var documenterSearchIndex = {"docs":
[{"location":"code_base_developer_guide/extending_powersimulations/#Extending-Source-Code-Functionalities","page":"Extending Source Code Functionalities","title":"Extending Source Code Functionalities","text":"","category":"section"},{"location":"code_base_developer_guide/extending_powersimulations/#Enable-other-recorder-events","page":"Extending Source Code Functionalities","title":"Enable other recorder events","text":"","category":"section"},{"location":"code_base_developer_guide/extending_powersimulations/","page":"Extending Source Code Functionalities","title":"Extending Source Code Functionalities","text":"Other types of recorder events can be enabled with a possible performance impact. To do this pass in the specific recorder names to be enabled when you call build.","category":"page"},{"location":"code_base_developer_guide/extending_powersimulations/","page":"Extending Source Code Functionalities","title":"Extending Source Code Functionalities","text":"sim = Simulation(...)\nrecorders = [:execution]\nbuild!(sim; recorders = recorders)\nexecute!(sim)","category":"page"},{"location":"code_base_developer_guide/extending_powersimulations/","page":"Extending Source Code Functionalities","title":"Extending Source Code Functionalities","text":"Now we can examine InitialConditionUpdateEvents for specific steps and stages.","category":"page"},{"location":"code_base_developer_guide/extending_powersimulations/","page":"Extending Source Code Functionalities","title":"Extending Source Code Functionalities","text":"show_simulation_events(\n    PSI.InitialConditionUpdateEvent,\n    \"./output/aggregation/1\",\n    x -> x.initial_condition_type == \"DeviceStatus\";\n    step = 2,\n    stage = 1\n)\n┌─────────────────────────────┬─────────────────────┬────────────────────────┬─────────────────┬─────────────┬─────┬──────────────┐\n│                        name │     simulation_time │ initial_condition_type │     device_type │ device_name │ val │ stage_number │\n├─────────────────────────────┼─────────────────────┼────────────────────────┼─────────────────┼─────────────┼─────┼──────────────┤\n│ InitialConditionUpdateEvent │ 2024-01-02T00:00:00 │           DeviceStatus │ ThermalStandard │    Solitude │ 0.0 │            1 │\n│ InitialConditionUpdateEvent │ 2024-01-02T00:00:00 │           DeviceStatus │ ThermalStandard │   Park City │ 1.0 │            1 │\n│ InitialConditionUpdateEvent │ 2024-01-02T00:00:00 │           DeviceStatus │ ThermalStandard │        Alta │ 1.0 │            1 │\n│ InitialConditionUpdateEvent │ 2024-01-02T00:00:00 │           DeviceStatus │ ThermalStandard │    Brighton │ 1.0 │            1 │\n│ InitialConditionUpdateEvent │ 2024-01-02T00:00:00 │           DeviceStatus │ ThermalStandard │    Sundance │ 0.0 │            1 │\n└─────────────────────────────┴─────────────────────┴────────────────────────┴─────────────────┴─────────────┴─────┴──────────────┘","category":"page"},{"location":"code_base_developer_guide/extending_powersimulations/#Show-the-wall-time-with-your-events","page":"Extending Source Code Functionalities","title":"Show the wall time with your events","text":"","category":"section"},{"location":"code_base_developer_guide/extending_powersimulations/","page":"Extending Source Code Functionalities","title":"Extending Source Code Functionalities","text":"Sometimes you might want to see how the events line up with the wall time.","category":"page"},{"location":"code_base_developer_guide/extending_powersimulations/","page":"Extending Source Code Functionalities","title":"Extending Source Code Functionalities","text":"show_simulation_events(\n    PSI.InitialConditionUpdateEvent,\n    \"./output/aggregation/1\",\n    x -> x.initial_condition_type == \"DeviceStatus\";\n    step = 2,\n    stage = 1,\n    wall_time = true\n)\n┌─────────────────────────┬─────────────────────────────┬─────────────────────┬────────────────────────┬─────────────────┬─────────────┬─────┬──────────────┐\n│               timestamp │                        name │     simulation_time │ initial_condition_type │     device_type │ device_name │ val │ stage_number │\n├─────────────────────────┼─────────────────────────────┼─────────────────────┼────────────────────────┼─────────────────┼─────────────┼─────┼──────────────┤\n│ 2020-04-07T15:08:32.711 │ InitialConditionUpdateEvent │ 2024-01-02T00:00:00 │           DeviceStatus │ ThermalStandard │    Solitude │ 0.0 │            1 │\n│ 2020-04-07T15:08:32.711 │ InitialConditionUpdateEvent │ 2024-01-02T00:00:00 │           DeviceStatus │ ThermalStandard │   Park City │ 1.0 │            1 │\n│ 2020-04-07T15:08:32.711 │ InitialConditionUpdateEvent │ 2024-01-02T00:00:00 │           DeviceStatus │ ThermalStandard │        Alta │ 1.0 │            1 │\n│ 2020-04-07T15:08:32.711 │ InitialConditionUpdateEvent │ 2024-01-02T00:00:00 │           DeviceStatus │ ThermalStandard │    Brighton │ 1.0 │            1 │\n│ 2020-04-07T15:08:32.711 │ InitialConditionUpdateEvent │ 2024-01-02T00:00:00 │           DeviceStatus │ ThermalStandard │    Sundance │ 0.0 │            1 │\n└─────────────────────────┴─────────────────────────────┴─────────────────────┴────────────────────────┴─────────────────┴─────────────┴─────┴──────────────┘","category":"page"},{"location":"modeler_guide/simulation_recorder/#Simulation-Recorder","page":"Simulation Recorder","title":"Simulation Recorder","text":"","category":"section"},{"location":"modeler_guide/simulation_recorder/","page":"Simulation Recorder","title":"Simulation Recorder","text":"PowerSimulations.jl provides the ability to record structured data as events during a simulation. These events can be post-processed to help debug problems.","category":"page"},{"location":"modeler_guide/simulation_recorder/","page":"Simulation Recorder","title":"Simulation Recorder","text":"By default only SimulationStepEvent and ProblemExecutionEvent are recorded.  Here is an example.","category":"page"},{"location":"modeler_guide/simulation_recorder/","page":"Simulation Recorder","title":"Simulation Recorder","text":"Suppose a simulation is run in the directory ./output.","category":"page"},{"location":"modeler_guide/simulation_recorder/","page":"Simulation Recorder","title":"Simulation Recorder","text":"Assume that setup commands have been run:","category":"page"},{"location":"modeler_guide/simulation_recorder/","page":"Simulation Recorder","title":"Simulation Recorder","text":"using PowerSimulations\nconst PSI = PowerSimulations","category":"page"},{"location":"modeler_guide/simulation_recorder/","page":"Simulation Recorder","title":"Simulation Recorder","text":"Note that for all functions below you can optionally specify a function to filter events. The function must accept the event type and return true or false.","category":"page"},{"location":"modeler_guide/simulation_recorder/#Show-all-events-of-type-PSI.SimulationStepEvent","page":"Simulation Recorder","title":"Show all events of type PSI.SimulationStepEvent","text":"","category":"section"},{"location":"modeler_guide/simulation_recorder/","page":"Simulation Recorder","title":"Simulation Recorder","text":"julia> show_simulation_events(PSI.SimulationStepEvent, \"./output/aggregation/1\")\n┌─────────────────────┬─────────────────────┬──────┬────────┐\n│                name │     simulation_time │ step │ status │\n├─────────────────────┼─────────────────────┼──────┼────────┤\n│ SimulationStepEvent │ 2024-01-01T00:00:00 │    1 │  start │\n│ SimulationStepEvent │ 2024-01-01T23:00:00 │    1 │   done │\n│ SimulationStepEvent │ 2024-01-01T23:00:00 │    2 │  start │\n│ SimulationStepEvent │ 2024-01-02T23:00:00 │    2 │   done │\n└─────────────────────┴─────────────────────┴──────┴────────┘","category":"page"},{"location":"modeler_guide/simulation_recorder/#Show-events-of-type-PSI.ProblemExecutionEvent-for-a-specific-step-and-stage.","page":"Simulation Recorder","title":"Show events of type PSI.ProblemExecutionEvent for a specific step and stage.","text":"","category":"section"},{"location":"modeler_guide/simulation_recorder/","page":"Simulation Recorder","title":"Simulation Recorder","text":"show_simulation_events(\n    PSI.ProblemExecutionEvent,\n    \"./output/aggregation/1\",\n    x -> x.step == 1 && x.stage == 2 && x.status == \"start\"\n)\n┌──────────────────────┬─────────────────────┬──────┬───────┬────────┐\n│                 name │     simulation_time │ step │ stage │ status │\n├──────────────────────┼─────────────────────┼──────┼───────┼────────┤\n│ ProblemExecutionEvent │ 2024-01-01T00:00:00 │    1 │     2 │  start │\n│ ProblemExecutionEvent │ 2024-01-01T00:00:00 │    1 │     2 │  start │\n│ ProblemExecutionEvent │ 2024-01-01T01:00:00 │    1 │     2 │  start │\n│ ProblemExecutionEvent │ 2024-01-01T02:00:00 │    1 │     2 │  start │\n│ ProblemExecutionEvent │ 2024-01-01T03:00:00 │    1 │     2 │  start │\n│ ProblemExecutionEvent │ 2024-01-01T04:00:00 │    1 │     2 │  start │\n│ ProblemExecutionEvent │ 2024-01-01T05:00:00 │    1 │     2 │  start │\n│ ProblemExecutionEvent │ 2024-01-01T06:00:00 │    1 │     2 │  start │\n│ ProblemExecutionEvent │ 2024-01-01T07:00:00 │    1 │     2 │  start │\n│ ProblemExecutionEvent │ 2024-01-01T08:00:00 │    1 │     2 │  start │\n│ ProblemExecutionEvent │ 2024-01-01T09:00:00 │    1 │     2 │  start │\n│ ProblemExecutionEvent │ 2024-01-01T10:00:00 │    1 │     2 │  start │\n│ ProblemExecutionEvent │ 2024-01-01T11:00:00 │    1 │     2 │  start │\n│ ProblemExecutionEvent │ 2024-01-01T12:00:00 │    1 │     2 │  start │\n│ ProblemExecutionEvent │ 2024-01-01T13:00:00 │    1 │     2 │  start │\n│ ProblemExecutionEvent │ 2024-01-01T14:00:00 │    1 │     2 │  start │\n│ ProblemExecutionEvent │ 2024-01-01T15:00:00 │    1 │     2 │  start │\n│ ProblemExecutionEvent │ 2024-01-01T16:00:00 │    1 │     2 │  start │\n│ ProblemExecutionEvent │ 2024-01-01T17:00:00 │    1 │     2 │  start │\n│ ProblemExecutionEvent │ 2024-01-01T18:00:00 │    1 │     2 │  start │\n│ ProblemExecutionEvent │ 2024-01-01T19:00:00 │    1 │     2 │  start │\n│ ProblemExecutionEvent │ 2024-01-01T20:00:00 │    1 │     2 │  start │\n│ ProblemExecutionEvent │ 2024-01-01T21:00:00 │    1 │     2 │  start │\n│ ProblemExecutionEvent │ 2024-01-01T22:00:00 │    1 │     2 │  start │\n└──────────────────────┴─────────────────────┴──────┴───────┴────────┘","category":"page"},{"location":"modeler_guide/parallel_simulations/#Parallel-Simulations","page":"Parallel Simulations","title":"Parallel Simulations","text":"","category":"section"},{"location":"modeler_guide/parallel_simulations/","page":"Parallel Simulations","title":"Parallel Simulations","text":"This section contains instructions to:","category":"page"},{"location":"modeler_guide/parallel_simulations/","page":"Parallel Simulations","title":"Parallel Simulations","text":"Run a Simulation in Parallel on a local computer\nRun a Simulation in Parallel on an HPC","category":"page"},{"location":"modeler_guide/parallel_simulations/#Run-a-Simulation-in-Parallel-on-a-local-computer","page":"Parallel Simulations","title":"Run a Simulation in Parallel on a local computer","text":"","category":"section"},{"location":"modeler_guide/parallel_simulations/","page":"Parallel Simulations","title":"Parallel Simulations","text":"This page describes how to split a simulation into partitions, run each partition in parallel, and then join the results.","category":"page"},{"location":"modeler_guide/parallel_simulations/#Setup","page":"Parallel Simulations","title":"Setup","text":"","category":"section"},{"location":"modeler_guide/parallel_simulations/","page":"Parallel Simulations","title":"Parallel Simulations","text":"Create a Julia script to build and run simulations. It must meet the requirements below. A full example is in the PowerSimulations repository in test/run_partitioned_simulation.jl.","category":"page"},{"location":"modeler_guide/parallel_simulations/","page":"Parallel Simulations","title":"Parallel Simulations","text":"Call using PowerSimulations.\nImplement a build function that matches the signature below. It must construct a Simulation, call build!, and then return the Simulation instance. It must throw an exception if the build fails.","category":"page"},{"location":"modeler_guide/parallel_simulations/","page":"Parallel Simulations","title":"Parallel Simulations","text":"function build_simulation(\n    output_dir::AbstractString,\n    simulation_name::AbstractString,\n    partitions::SimulationPartitions,\n    index::Union{Nothing, Integer}=nothing,\n)","category":"page"},{"location":"modeler_guide/parallel_simulations/","page":"Parallel Simulations","title":"Parallel Simulations","text":"Here is example code to construct the Simulation with these parameters:","category":"page"},{"location":"modeler_guide/parallel_simulations/","page":"Parallel Simulations","title":"Parallel Simulations","text":"    sim = Simulation(\n        name=simulation_name,\n        steps=partitions.num_steps,\n        models=models,\n        sequence=sequence,\n        simulation_folder=output_dir,\n    )\n    status = build!(sim; partitions=partitions, index=index, serialize=isnothing(index))\n    if status != PSI.BuildStatus.BUILT\n        error(\"Failed to build simulation: status=$status\")\n    end","category":"page"},{"location":"modeler_guide/parallel_simulations/","page":"Parallel Simulations","title":"Parallel Simulations","text":"Implement an execute function that matches the signature below. It must throw an exception if the execute fails.","category":"page"},{"location":"modeler_guide/parallel_simulations/","page":"Parallel Simulations","title":"Parallel Simulations","text":"function execute_simulation(sim, args...; kwargs...)\n    status = execute!(sim)\n    if status != PSI.RunStatus.SUCCESSFUL\n        error(\"Simulation failed to execute: status=$status\")\n    end\nend","category":"page"},{"location":"modeler_guide/parallel_simulations/#Execution","page":"Parallel Simulations","title":"Execution","text":"","category":"section"},{"location":"modeler_guide/parallel_simulations/","page":"Parallel Simulations","title":"Parallel Simulations","text":"After loading your script, call the function run_parallel_simulation as shown below.","category":"page"},{"location":"modeler_guide/parallel_simulations/","page":"Parallel Simulations","title":"Parallel Simulations","text":"This example splits a year-long simulation into weekly partitions for a total of 53 individual jobs and then runs them four at a time.","category":"page"},{"location":"modeler_guide/parallel_simulations/","page":"Parallel Simulations","title":"Parallel Simulations","text":"julia> include(\"my_simulation.jl\")\njulia> run_parallel_simulation(\n        build_simulation,\n        execute_simulation,\n        script=\"my_simulation.jl\",\n        output_dir=\"my_simulation_output\",\n        name=\"my_simulation\",\n        num_steps=365,\n        period=7,\n        num_overlap_steps=1,\n        num_parallel_processes=4,\n        exeflags=\"--project=<path-to-your-julia-environment>\",\n    )","category":"page"},{"location":"modeler_guide/parallel_simulations/","page":"Parallel Simulations","title":"Parallel Simulations","text":"The final results will be in ./my_simulation_otuput/my_simulation","category":"page"},{"location":"modeler_guide/parallel_simulations/","page":"Parallel Simulations","title":"Parallel Simulations","text":"Note the log files and results for each partition are located in ./my_simulation_otuput/my_simulation/simulation_partitions","category":"page"},{"location":"modeler_guide/parallel_simulations/#Run-a-Simulation-in-Parallel-on-an-HPC","page":"Parallel Simulations","title":"Run a Simulation in Parallel on an HPC","text":"","category":"section"},{"location":"modeler_guide/parallel_simulations/","page":"Parallel Simulations","title":"Parallel Simulations","text":"This page describes how to split a simulation into partitions, run each partition in parallel on HPC compute nodes, and then join the results.","category":"page"},{"location":"modeler_guide/parallel_simulations/","page":"Parallel Simulations","title":"Parallel Simulations","text":"These steps can be used on a local computer or any HPC supported by the submission software. Some steps may be specific to NREL's HPC Eagle cluster.","category":"page"},{"location":"modeler_guide/parallel_simulations/","page":"Parallel Simulations","title":"Parallel Simulations","text":"Note: Some instructions are preliminary and will change if functionality is moved to a new Julia package.","category":"page"},{"location":"modeler_guide/parallel_simulations/#Setup-2","page":"Parallel Simulations","title":"Setup","text":"","category":"section"},{"location":"modeler_guide/parallel_simulations/","page":"Parallel Simulations","title":"Parallel Simulations","text":"Create a conda environment and install the Python package NREL-jade: https://nrel.github.io/jade/installation.html. The rest of this page assumes that the environment is called jade.\nActivate the environment with conda activate jade.\nLocate the path to that conda environment. It will likely be ~/.conda-envs/jade or ~/.conda/envs/jade.\nLoad the Julia environment that you use to run simulations. Add the packages Conda and PyCall.\nSetup Conda to use the existing jade environment by running these commands:","category":"page"},{"location":"modeler_guide/parallel_simulations/","page":"Parallel Simulations","title":"Parallel Simulations","text":"julia> run(`conda create -n conda_jl python conda`)\njulia> ENV[\"CONDA_JL_HOME\"] = joinpath(ENV[\"HOME\"], \".conda-envs\", \"jade\")  # change this to your path\npkg> build Conda","category":"page"},{"location":"modeler_guide/parallel_simulations/","page":"Parallel Simulations","title":"Parallel Simulations","text":"Copy the code below into a Julia file called configure_parallel_simulation.jl. This is an interface to Jade through PyCall. It will be used to create a Jade configuration. (It may eventually be moved to a separate package.)","category":"page"},{"location":"modeler_guide/parallel_simulations/","page":"Parallel Simulations","title":"Parallel Simulations","text":"function configure_parallel_simulation(\n    script::AbstractString,\n    num_steps::Integer,\n    num_period_steps::Integer;\n    num_overlap_steps::Integer=0,\n    project_path=nothing,\n    simulation_name=\"simulation\",\n    config_file=\"config.json\",\n    force=false,\n)\n    partitions = SimulationPartitions(num_steps, num_period_steps, num_overlap_steps)\n    jgc = pyimport(\"jade.extensions.generic_command\")\n    julia_cmd = isnothing(project_path) ? \"julia\" : \"julia --project=$project_path\"\n    setup_command = \"$julia_cmd $script setup --simulation-name=$simulation_name \" *\n    \"--num-steps=$num_steps --num-period-steps=$num_period_steps \" *\n    \"--num-overlap-steps=$num_overlap_steps\"\n    teardown_command = \"$julia_cmd $script join --simulation-name=$simulation_name\"\n    config = jgc.GenericCommandConfiguration(\n        setup_command=setup_command,\n        teardown_command=teardown_command,\n    )\n\n    for i in 1:get_num_partitions(partitions)\n        cmd = \"$julia_cmd $script execute --simulation-name=$simulation_name --index=$i\"\n        job = jgc.GenericCommandParameters(command=cmd, name=\"execute-$i\")\n        config.add_job(job)\n    end\n\n    config.dump(config_file, indent=2)\n    println(\"Created Jade configuration in $config_file. \" *\n            \"Run 'jade submit-jobs [options] $config_file' to execute them.\")\nend","category":"page"},{"location":"modeler_guide/parallel_simulations/","page":"Parallel Simulations","title":"Parallel Simulations","text":"Create a Julia script to build and run simulations. It must meet the requirements below. A full example is in the PowerSimulations repository in test/run_partitioned_simulation.jl.","category":"page"},{"location":"modeler_guide/parallel_simulations/","page":"Parallel Simulations","title":"Parallel Simulations","text":"Call using PowerSimulations.\nImplement a build function that matches the signature below. It must construct a Simulation, call build!, and then return the Simulation instance. It must throw an exception if the build fails.","category":"page"},{"location":"modeler_guide/parallel_simulations/","page":"Parallel Simulations","title":"Parallel Simulations","text":"function build_simulation(\n    output_dir::AbstractString,\n    simulation_name::AbstractString,\n    partitions::SimulationPartitions,\n    index::Union{Nothing, Integer}=nothing,\n)","category":"page"},{"location":"modeler_guide/parallel_simulations/","page":"Parallel Simulations","title":"Parallel Simulations","text":"Here is example code to construct the Simulation with these parameters:","category":"page"},{"location":"modeler_guide/parallel_simulations/","page":"Parallel Simulations","title":"Parallel Simulations","text":"    sim = Simulation(\n        name=simulation_name,\n        steps=partitions.num_steps,\n        models=models,\n        sequence=sequence,\n        simulation_folder=output_dir,\n    )\n    status = build!(sim; partitions=partitions, index=index, serialize=isnothing(index))\n    if status != PSI.BuildStatus.BUILT\n        error(\"Failed to build simulation: status=$status\")\n    end","category":"page"},{"location":"modeler_guide/parallel_simulations/","page":"Parallel Simulations","title":"Parallel Simulations","text":"Implement an execute function that matches the signature below. It must throw an exception if the execute fails.","category":"page"},{"location":"modeler_guide/parallel_simulations/","page":"Parallel Simulations","title":"Parallel Simulations","text":"function execute_simulation(sim, args...; kwargs...)\n    status = execute!(sim)\n    if status != PSI.RunStatus.SUCCESSFUL\n        error(\"Simulation failed to execute: status=$status\")\n    end\nend","category":"page"},{"location":"modeler_guide/parallel_simulations/","page":"Parallel Simulations","title":"Parallel Simulations","text":"Make the script runnable as a CLI command by including the following code at the bottom of the","category":"page"},{"location":"modeler_guide/parallel_simulations/","page":"Parallel Simulations","title":"Parallel Simulations","text":"file.","category":"page"},{"location":"modeler_guide/parallel_simulations/","page":"Parallel Simulations","title":"Parallel Simulations","text":"function main()\n    process_simulation_partition_cli_args(build_simulation, execute_simulation, ARGS...)\nend\n\nif abspath(PROGRAM_FILE) == @__FILE__\n    main()\nend","category":"page"},{"location":"modeler_guide/parallel_simulations/#Execution-2","page":"Parallel Simulations","title":"Execution","text":"","category":"section"},{"location":"modeler_guide/parallel_simulations/","page":"Parallel Simulations","title":"Parallel Simulations","text":"Create a Jade configuration that defines the partitioned simulation jobs. Load your Julia environment.\nThis example splits a year-long simulation into weekly partitions for a total of 53 individual jobs.","category":"page"},{"location":"modeler_guide/parallel_simulations/","page":"Parallel Simulations","title":"Parallel Simulations","text":"julia> include(\"configure_parallel_simulation.jl\")\njulia> num_steps = 365\njulia> period = 7\njulia> num_overlap_steps = 1\njulia> configure_parallel_simulation(\n    \"my_simulation.jl\",  # this is your build/execute script\n    num_steps,\n    period,\n    num_overlap_steps=1,\n    project_path=\".\",  # This optionally specifies the Julia project environment to load.\n)\nCreated Jade configuration in config.json. Run 'jade submit-jobs [options] config.json' to execute them.","category":"page"},{"location":"modeler_guide/parallel_simulations/","page":"Parallel Simulations","title":"Parallel Simulations","text":"Exit Julia.","category":"page"},{"location":"modeler_guide/parallel_simulations/","page":"Parallel Simulations","title":"Parallel Simulations","text":"View the configuration for accuracy.","category":"page"},{"location":"modeler_guide/parallel_simulations/","page":"Parallel Simulations","title":"Parallel Simulations","text":"$ jade config show config.json","category":"page"},{"location":"modeler_guide/parallel_simulations/","page":"Parallel Simulations","title":"Parallel Simulations","text":"Start an interactive session on a debug node. Do not submit the jobs on a login node! The submission step will run a full build of the simulation and that may consume too many CPU and memory resources for the login node.","category":"page"},{"location":"modeler_guide/parallel_simulations/","page":"Parallel Simulations","title":"Parallel Simulations","text":"$ salloc -t 01:00:00 -N1 --account=<your-account> --partition=debug","category":"page"},{"location":"modeler_guide/parallel_simulations/","page":"Parallel Simulations","title":"Parallel Simulations","text":"Follow the instructions at https://nrel.github.io/jade/tutorial.html to submit the jobs. The example below will configure Jade to run each partition on its own compute node. Depending on the compute and memory constraints of your simulation, you may be able to pack more jobs on each node.\nAdjust the walltime as necessary.","category":"page"},{"location":"modeler_guide/parallel_simulations/","page":"Parallel Simulations","title":"Parallel Simulations","text":"$ jade config hpc -c hpc_config.toml -t slurm  --walltime=04:00:00 -a <your-account>\n$ jade submit-jobs config.json --per-node-batch-size=1 -o output","category":"page"},{"location":"modeler_guide/parallel_simulations/","page":"Parallel Simulations","title":"Parallel Simulations","text":"If you are unsure about how much memory and CPU resources your simulation consumes, add these options:","category":"page"},{"location":"modeler_guide/parallel_simulations/","page":"Parallel Simulations","title":"Parallel Simulations","text":"$ jade submit-jobs config.json --per-node-batch-size=1 -o output --resource-monitor-type periodic --resource-monitor-interval 3","category":"page"},{"location":"modeler_guide/parallel_simulations/","page":"Parallel Simulations","title":"Parallel Simulations","text":"Jade will create HTML plots of the resource utilization in output/stats. You may be able to customize --per-node-batch-size and --num-processes to finish the simulations more quickly.","category":"page"},{"location":"modeler_guide/parallel_simulations/","page":"Parallel Simulations","title":"Parallel Simulations","text":"Jade will run a final command to join the simulation partitions into one unified file. You can load the results as you normally would.","category":"page"},{"location":"modeler_guide/parallel_simulations/","page":"Parallel Simulations","title":"Parallel Simulations","text":"julia> results = SimulationResults(\"<output-dir>/job-outputs/<simulation-name>\")","category":"page"},{"location":"modeler_guide/parallel_simulations/","page":"Parallel Simulations","title":"Parallel Simulations","text":"Note the log files and results for each partition are located in <output-dir>/job-outputs/<simulation-name>/simulation_partitions","category":"page"},{"location":"quick_start_guide/#Quick-Start-Guide","page":"Quick Start Guide","title":"Quick Start Guide","text":"","category":"section"},{"location":"quick_start_guide/","page":"Quick Start Guide","title":"Quick Start Guide","text":"Julia: If this is your first time using Julia visit our Introduction to Julia and the officialGetting started with Julia.\nPackage Installation: If you want to install packages check the Package Manager instructions, or you can refer to the PowerSimulations installation instructions. \nPowerSystems: PowerSystems.jl manages the data and is a fundamental dependency of PowerSimulations.jl. Check the Understanding PowerSystems.jl page and PowerSystems.jl documentation to understand how the inputs to the models are organized.\nDataset Library: If you don't have a data set to start using PowerSimulations.jl check the test systems provided in PowerSystemCaseBuilder.jl","category":"page"},{"location":"quick_start_guide/","page":"Quick Start Guide","title":"Quick Start Guide","text":"tip: Tip\nIf you need to develop a dataset for a simulation check the tutorials on how to parse data and attach time series","category":"page"},{"location":"quick_start_guide/","page":"Quick Start Guide","title":"Quick Start Guide","text":"Tutorial: If you are eager to run your first simulation visit the Solve a Day Ahead Market Scheduling Problem using PowerSimulations.jl tutorial","category":"page"},{"location":"code_base_developer_guide/troubleshooting/#Troubleshooting-code-development","page":"Troubleshooting","title":"Troubleshooting code development","text":"","category":"section"},{"location":"formulation_library/Storage/#PowerSystems.Storage-Formulations","page":"Storage","title":"PowerSystems.Storage Formulations","text":"","category":"section"},{"location":"formulation_library/Storage/","page":"Storage","title":"Storage","text":"Valid DeviceModels for subtypes of Storage include the following:","category":"page"},{"location":"formulation_library/Storage/","page":"Storage","title":"Storage","text":"using PowerSimulations\nusing PowerSystems\nusing DataFrames\nusing Latexify\ncombos = PowerSimulations.generate_device_formulation_combinations()\nfilter!(x -> x[\"device_type\"] <: Storage, combos)\ncombo_table = DataFrame(\n    \"Valid DeviceModel\" => [\"`DeviceModel($(c[\"device_type\"]), $(c[\"formulation\"]))`\" for c in combos],\n    \"Device Type\" => [\"[$(c[\"device_type\"])](https://nrel-siip.github.io/PowerSystems.jl/stable/model_library/generated_$(c[\"device_type\"])/)\" for c in combos],\n    \"Formulation\" => [\"[$(c[\"formulation\"])](@ref)\" for c in combos],\n    )\nmdtable(combo_table, latex = false)","category":"page"},{"location":"formulation_library/Storage/","page":"Storage","title":"Storage","text":"","category":"page"},{"location":"formulation_library/Storage/#BookKeeping","page":"Storage","title":"BookKeeping","text":"","category":"section"},{"location":"formulation_library/Storage/","page":"Storage","title":"Storage","text":"BookKeeping","category":"page"},{"location":"formulation_library/Storage/#PowerSimulations.BookKeeping","page":"Storage","title":"PowerSimulations.BookKeeping","text":"Formulation type to add basic storage formulation. With attributes=Dict(\"reservation\"=>true) the formulation is augmented with abinary variable to prevent simultanious charging and discharging\n\n\n\n\n\n","category":"type"},{"location":"formulation_library/Storage/","page":"Storage","title":"Storage","text":"Variables:","category":"page"},{"location":"formulation_library/Storage/","page":"Storage","title":"Storage","text":"ActivePowerInVariable:\nBounds: [0.0, ]\nDefault initial value: -1 * PowerSystems.get_active_power(device)\nActivePowerOutVariable:\nBounds: [0.0, ]\nDefault initial value: PowerSystems.get_active_power(device)\nReactivePowerVariable:\nBounds: [0.0, ]\nDefault initial value: PowerSystems.get_reactive_power(device)\nEnergyVariable:\nBounds: [0.0, ]\nDefault initial value: PowerSystems.get_initial_storage(device)\nReservationVariable:\nonly included if DeviceModel(HydroPumpedStorage, HydroDispatchPumpedStorage; attributes = Dict(reservation => true))\nBounds: {0, 1}\nDefault initial value: 1","category":"page"},{"location":"formulation_library/Storage/","page":"Storage","title":"Storage","text":"Static Parameters:","category":"page"},{"location":"formulation_library/Storage/","page":"Storage","title":"Storage","text":"Pg^textmin = PowerSystems.get_active_power_limits(device).min\nQg^textmin = PowerSystems.get_reactive_power_limits(device).min\nQg^textmax = PowerSystems.get_reactive_power_limits(device).max\nE^textmax = PowerSystems.get_storage_capacity(device)","category":"page"},{"location":"formulation_library/Storage/","page":"Storage","title":"Storage","text":"Objective:","category":"page"},{"location":"formulation_library/Storage/","page":"Storage","title":"Storage","text":"Creates an objective function term based on the VariableCost Options where the quantity term is defined as Pg_t.","category":"page"},{"location":"formulation_library/Storage/","page":"Storage","title":"Storage","text":"Expressions:","category":"page"},{"location":"formulation_library/Storage/","page":"Storage","title":"Storage","text":"Adds Pg and Qg terms to the respective active and reactive power balance expressions created by the selected Network Formulations","category":"page"},{"location":"formulation_library/Storage/","page":"Storage","title":"Storage","text":"Constraints:","category":"page"},{"location":"formulation_library/Storage/","page":"Storage","title":"Storage","text":"beginaligned\n  E_t+1 = E_t + (Pg^in_t - Pg^out_t) cdot Delta T \n  Pg^in_t - r * Pg^textin max le Pg^textin max \n  Pg^out_t + r * Pg^textout max le Pg^textout max \n  Qg^textmin le Qg_t le Qg^textmax \n  E_t le E^textmax\nendaligned","category":"page"},{"location":"formulation_library/Storage/","page":"Storage","title":"Storage","text":"","category":"page"},{"location":"formulation_library/Storage/#EnergyTarget","page":"Storage","title":"EnergyTarget","text":"","category":"section"},{"location":"formulation_library/Storage/","page":"Storage","title":"Storage","text":"EnergyTarget","category":"page"},{"location":"formulation_library/Storage/#PowerSimulations.EnergyTarget","page":"Storage","title":"PowerSimulations.EnergyTarget","text":"Formulation type to add storage formulation that respects end of horizon energy state of charge target. With attributes=Dict(\"reservation\"=>true) the formulation is augmented with abinary variable to prevent simultanious charging and discharging\n\n\n\n\n\n","category":"type"},{"location":"formulation_library/Storage/","page":"Storage","title":"Storage","text":"Variables:","category":"page"},{"location":"formulation_library/Storage/","page":"Storage","title":"Storage","text":"ActivePowerInVariable:\nBounds: [0.0, ]\nDefault initial value: -1 * PowerSystems.get_active_power(device)\nActivePowerOutVariable:\nBounds: [0.0, ]\nDefault initial value: PowerSystems.get_active_power(device)\nReactivePowerVariable:\nBounds: [0.0, ]\nDefault initial value: PowerSystems.get_reactive_power(device)\nEnergyVariable:\nBounds: [0.0, ]\nDefault initial value: PowerSystems.get_initial_storage(device)\nEnergyShortageVariable:\nBounds: [ , 0.0]\nDefault initial value: 0.0\nEnergySurplusVariable:\nBounds: [0.0, ]\nDefault initial value: 0.0\nReservationVariable:\nonly included if DeviceModel(HydroPumpedStorage, HydroDispatchPumpedStorage; attributes = Dict(reservation => true))\nBounds: {0, 1}\nDefault initial value: 1","category":"page"},{"location":"formulation_library/Storage/","page":"Storage","title":"Storage","text":"Static Parameters:","category":"page"},{"location":"formulation_library/Storage/","page":"Storage","title":"Storage","text":"Pg^textmin = PowerSystems.get_active_power_limits(device).min\nQg^textmin = PowerSystems.get_reactive_power_limits(device).min\nQg^textmax = PowerSystems.get_reactive_power_limits(device).max\nE^textmax = PowerSystems.get_storage_capacity(device)","category":"page"},{"location":"formulation_library/Storage/","page":"Storage","title":"Storage","text":"Time Series Parameters:","category":"page"},{"location":"formulation_library/Storage/","page":"Storage","title":"Storage","text":"using PowerSimulations\nusing PowerSystems\nusing DataFrames\nusing Latexify\ncombos = PowerSimulations.get_default_time_series_names(Storage, EnergyTarget)\ncombo_table = DataFrame(\n    \"Parameter\" => map(x -> \"[`$x`](@ref)\", collect(keys(combos))),\n    \"Default Time Series Name\" => map(x -> \"`$x`\", collect(values(combos))),\n    )\nmdtable(combo_table, latex = false)","category":"page"},{"location":"formulation_library/Storage/","page":"Storage","title":"Storage","text":"Objective:","category":"page"},{"location":"formulation_library/Storage/","page":"Storage","title":"Storage","text":"Creates an objective function term based on the VariableCost Options where the quantity term is defined as Pg_t, and objective function terms for StorageManagementCost.","category":"page"},{"location":"formulation_library/Storage/","page":"Storage","title":"Storage","text":"Expressions:","category":"page"},{"location":"formulation_library/Storage/","page":"Storage","title":"Storage","text":"Adds Pg and Qg terms to the respective active and reactive power balance expressions created by the selected Network Formulations","category":"page"},{"location":"formulation_library/Storage/","page":"Storage","title":"Storage","text":"Constraints:","category":"page"},{"location":"formulation_library/Storage/","page":"Storage","title":"Storage","text":"beginaligned\n  E_t+1 = E_t + (Pg^in_t - Pg^out_t) cdot Delta T \n  E_t - E^surplus_t + E^shortage_t = EnergyTargetTimeSeriesParameter_t \n  Pg^in_t - r * Pg^textin max le Pg^textin max \n  Pg^out_t + r * Pg^textout max le Pg^textout max \n  Qg^textmin le Qg_t le Qg^textmax\n  E_t le E^textmax\nendaligned","category":"page"},{"location":"formulation_library/Storage/","page":"Storage","title":"Storage","text":"","category":"page"},{"location":"formulation_library/Storage/#BatteryAncillaryServices","page":"Storage","title":"BatteryAncillaryServices","text":"","category":"section"},{"location":"formulation_library/Storage/","page":"Storage","title":"Storage","text":"BatteryAncillaryServices","category":"page"},{"location":"formulation_library/Storage/#PowerSimulations.BatteryAncillaryServices","page":"Storage","title":"PowerSimulations.BatteryAncillaryServices","text":"Formulation type to add storage formulation than can provide ancillary services. With attributes=Dict(\"reservation\"=>true) the formulation is augmented with abinary variable to prevent simultanious charging and discharging\n\n\n\n\n\n","category":"type"},{"location":"formulation_library/Storage/","page":"Storage","title":"Storage","text":"Variables:","category":"page"},{"location":"formulation_library/Storage/","page":"Storage","title":"Storage","text":"ActivePowerInVariable:\nBounds: [0.0, ]\nDefault initial value: -1 * PowerSystems.get_active_power(device)\nActivePowerOutVariable:\nBounds: [0.0, ]\nDefault initial value: PowerSystems.get_active_power(device)\nReactivePowerVariable:\nBounds: [0.0, ]\nDefault initial value: PowerSystems.get_reactive_power(device)\nEnergyVariable:\nBounds: [0.0, ]\nDefault initial value: PowerSystems.get_initial_storage(device)\nReservationVariable:\nonly included if DeviceModel(HydroPumpedStorage, HydroDispatchPumpedStorage; attributes = Dict(reservation => true))\nBounds: {0, 1}\nDefault initial value: 1","category":"page"},{"location":"formulation_library/Storage/","page":"Storage","title":"Storage","text":"Static Parameters:","category":"page"},{"location":"formulation_library/Storage/","page":"Storage","title":"Storage","text":"Pg^textmin = PowerSystems.get_active_power_limits(device).min\nQg^textmin = PowerSystems.get_reactive_power_limits(device).min\nQg^textmax = PowerSystems.get_reactive_power_limits(device).max\nE^textmax = PowerSystems.get_storage_capacity(device)","category":"page"},{"location":"formulation_library/Storage/","page":"Storage","title":"Storage","text":"Time Series Parameters:","category":"page"},{"location":"formulation_library/Storage/","page":"Storage","title":"Storage","text":"using PowerSimulations\nusing PowerSystems\nusing DataFrames\nusing Latexify\ncombos = PowerSimulations.get_default_time_series_names(Storage, EnergyTarget)\ncombo_table = DataFrame(\n    \"Parameter\" => map(x -> \"[`$x`](@ref)\", collect(keys(combos))),\n    \"Default Time Series Name\" => map(x -> \"`$x`\", collect(values(combos))),\n    )\nmdtable(combo_table, latex = false)","category":"page"},{"location":"formulation_library/Storage/","page":"Storage","title":"Storage","text":"Objective:","category":"page"},{"location":"formulation_library/Storage/","page":"Storage","title":"Storage","text":"Creates an objective function term based on the VariableCost Options where the quantity term is defined as Pg_t, and objective function terms for StorageManagementCost.","category":"page"},{"location":"formulation_library/Storage/","page":"Storage","title":"Storage","text":"Expressions:","category":"page"},{"location":"formulation_library/Storage/","page":"Storage","title":"Storage","text":"Adds Pg and Qg terms to the respective active and reactive power balance expressions created by the selected Network Formulations","category":"page"},{"location":"formulation_library/Storage/","page":"Storage","title":"Storage","text":"Constraints:","category":"page"},{"location":"formulation_library/Storage/","page":"Storage","title":"Storage","text":"beginaligned\n  E_t+1 = E_t + (Pg^in_t - Pg^out_t) cdot Delta T \n  E_t - E^surplus_t + E^shortage_t = EnergyTargetTimeSeriesParameter_t \n  Pg^in_t - r * Pg^textin max le Pg^textin max \n  Pg^out_t + r * Pg^textout max le Pg^textout max \n  Qg^textmin le Qg_t le Qg^textmax\n  E_t le E^textmax\nendaligned","category":"page"},{"location":"modeler_guide/tips_and_tricks/#Tips-and-tricks","page":"Tips and tricks","title":"Tips and tricks","text":"","category":"section"},{"location":"formulation_library/ThermalGen/#ThermalGen-Formulations","page":"Thermal Generation","title":"ThermalGen Formulations","text":"","category":"section"},{"location":"formulation_library/ThermalGen/","page":"Thermal Generation","title":"Thermal Generation","text":"Valid DeviceModels for subtypes of ThermalGen include the following:","category":"page"},{"location":"formulation_library/ThermalGen/","page":"Thermal Generation","title":"Thermal Generation","text":"using PowerSimulations\nusing PowerSystems\nusing DataFrames\nusing Latexify\ncombos = PowerSimulations.generate_device_formulation_combinations()\nfilter!(x -> x[\"device_type\"] <: ThermalGen, combos)\ncombo_table = DataFrame(\n    \"Valid DeviceModel\" => [\"`DeviceModel($(c[\"device_type\"]), $(c[\"formulation\"]))`\" for c in combos],\n    \"Device Type\" => [\"[$(c[\"device_type\"])](https://nrel-siip.github.io/PowerSystems.jl/stable/model_library/generated_$(c[\"device_type\"])/)\" for c in combos],\n    \"Formulation\" => [\"[$(c[\"formulation\"])](@ref)\" for c in combos],\n    )\nmdtable(combo_table, latex = false)","category":"page"},{"location":"formulation_library/ThermalGen/","page":"Thermal Generation","title":"Thermal Generation","text":"","category":"page"},{"location":"formulation_library/ThermalGen/#ThermalBasicDispatch","page":"Thermal Generation","title":"ThermalBasicDispatch","text":"","category":"section"},{"location":"formulation_library/ThermalGen/","page":"Thermal Generation","title":"Thermal Generation","text":"ThermalBasicDispatch","category":"page"},{"location":"formulation_library/ThermalGen/#PowerSimulations.ThermalBasicDispatch","page":"Thermal Generation","title":"PowerSimulations.ThermalBasicDispatch","text":"Formulation type to enable basic dispatch without any intertemporal (ramp) constraints\n\n\n\n\n\n","category":"type"},{"location":"formulation_library/ThermalGen/","page":"Thermal Generation","title":"Thermal Generation","text":"TODO","category":"page"},{"location":"formulation_library/ThermalGen/","page":"Thermal Generation","title":"Thermal Generation","text":"","category":"page"},{"location":"formulation_library/ThermalGen/#ThermalCompactDispatch","page":"Thermal Generation","title":"ThermalCompactDispatch","text":"","category":"section"},{"location":"formulation_library/ThermalGen/","page":"Thermal Generation","title":"Thermal Generation","text":"ThermalCompactDispatch","category":"page"},{"location":"formulation_library/ThermalGen/#PowerSimulations.ThermalCompactDispatch","page":"Thermal Generation","title":"PowerSimulations.ThermalCompactDispatch","text":"Formulation type to enable thermal compact dispatch\n\n\n\n\n\n","category":"type"},{"location":"formulation_library/ThermalGen/","page":"Thermal Generation","title":"Thermal Generation","text":"TODO","category":"page"},{"location":"formulation_library/ThermalGen/","page":"Thermal Generation","title":"Thermal Generation","text":"","category":"page"},{"location":"formulation_library/ThermalGen/#ThermalDispatchNoMin","page":"Thermal Generation","title":"ThermalDispatchNoMin","text":"","category":"section"},{"location":"formulation_library/ThermalGen/","page":"Thermal Generation","title":"Thermal Generation","text":"ThermalDispatchNoMin","category":"page"},{"location":"formulation_library/ThermalGen/#PowerSimulations.ThermalDispatchNoMin","page":"Thermal Generation","title":"PowerSimulations.ThermalDispatchNoMin","text":"Formulation type to enable basic dispatch without any intertemporal constraints and relaxed minimum generation. may not work with PWL cost definitions\n\n\n\n\n\n","category":"type"},{"location":"formulation_library/ThermalGen/","page":"Thermal Generation","title":"Thermal Generation","text":"TODO","category":"page"},{"location":"formulation_library/ThermalGen/","page":"Thermal Generation","title":"Thermal Generation","text":"","category":"page"},{"location":"formulation_library/ThermalGen/#ThermalStandardDispatch","page":"Thermal Generation","title":"ThermalStandardDispatch","text":"","category":"section"},{"location":"formulation_library/ThermalGen/","page":"Thermal Generation","title":"Thermal Generation","text":"ThermalStandardDispatch","category":"page"},{"location":"formulation_library/ThermalGen/#PowerSimulations.ThermalStandardDispatch","page":"Thermal Generation","title":"PowerSimulations.ThermalStandardDispatch","text":"Formulation type to enable standard dispatch with a range and enforce intertemporal ramp constraints\n\n\n\n\n\n","category":"type"},{"location":"formulation_library/ThermalGen/","page":"Thermal Generation","title":"Thermal Generation","text":"TODO","category":"page"},{"location":"formulation_library/ThermalGen/","page":"Thermal Generation","title":"Thermal Generation","text":"","category":"page"},{"location":"formulation_library/ThermalGen/#ThermalBasicCompactUnitCommitment","page":"Thermal Generation","title":"ThermalBasicCompactUnitCommitment","text":"","category":"section"},{"location":"formulation_library/ThermalGen/","page":"Thermal Generation","title":"Thermal Generation","text":"ThermalBasicCompactUnitCommitment","category":"page"},{"location":"formulation_library/ThermalGen/#PowerSimulations.ThermalBasicCompactUnitCommitment","page":"Thermal Generation","title":"PowerSimulations.ThermalBasicCompactUnitCommitment","text":"Formulation type to enable thermal compact commitment without intertemporal (ramp, min on/off time) constraints\n\n\n\n\n\n","category":"type"},{"location":"formulation_library/ThermalGen/","page":"Thermal Generation","title":"Thermal Generation","text":"TODO","category":"page"},{"location":"formulation_library/ThermalGen/","page":"Thermal Generation","title":"Thermal Generation","text":"","category":"page"},{"location":"formulation_library/ThermalGen/#ThermalCompactUnitCommitment","page":"Thermal Generation","title":"ThermalCompactUnitCommitment","text":"","category":"section"},{"location":"formulation_library/ThermalGen/","page":"Thermal Generation","title":"Thermal Generation","text":"ThermalCompactUnitCommitment","category":"page"},{"location":"formulation_library/ThermalGen/#PowerSimulations.ThermalCompactUnitCommitment","page":"Thermal Generation","title":"PowerSimulations.ThermalCompactUnitCommitment","text":"Formulation type to enable thermal compact commitment\n\n\n\n\n\n","category":"type"},{"location":"formulation_library/ThermalGen/","page":"Thermal Generation","title":"Thermal Generation","text":"TODO","category":"page"},{"location":"formulation_library/ThermalGen/","page":"Thermal Generation","title":"Thermal Generation","text":"","category":"page"},{"location":"formulation_library/ThermalGen/#ThermalMultiStartUnitCommitment","page":"Thermal Generation","title":"ThermalMultiStartUnitCommitment","text":"","category":"section"},{"location":"formulation_library/ThermalGen/","page":"Thermal Generation","title":"Thermal Generation","text":"ThermalMultiStartUnitCommitment","category":"page"},{"location":"formulation_library/ThermalGen/#PowerSimulations.ThermalMultiStartUnitCommitment","page":"Thermal Generation","title":"PowerSimulations.ThermalMultiStartUnitCommitment","text":"Formulation type to enable pg-lib commitment formulation with startup/shutdown profiles\n\n\n\n\n\n","category":"type"},{"location":"formulation_library/ThermalGen/","page":"Thermal Generation","title":"Thermal Generation","text":"TODO","category":"page"},{"location":"formulation_library/ThermalGen/","page":"Thermal Generation","title":"Thermal Generation","text":"","category":"page"},{"location":"formulation_library/ThermalGen/#ThermalBasicUnitCommitment","page":"Thermal Generation","title":"ThermalBasicUnitCommitment","text":"","category":"section"},{"location":"formulation_library/ThermalGen/","page":"Thermal Generation","title":"Thermal Generation","text":"ThermalBasicUnitCommitment","category":"page"},{"location":"formulation_library/ThermalGen/#PowerSimulations.ThermalBasicUnitCommitment","page":"Thermal Generation","title":"PowerSimulations.ThermalBasicUnitCommitment","text":"Formulation type to enable basic unit commitment representation without any intertemporal (ramp, min on/off time) constraints\n\n\n\n\n\n","category":"type"},{"location":"formulation_library/ThermalGen/","page":"Thermal Generation","title":"Thermal Generation","text":"TODO","category":"page"},{"location":"formulation_library/ThermalGen/","page":"Thermal Generation","title":"Thermal Generation","text":"","category":"page"},{"location":"formulation_library/ThermalGen/#ThermalStandardUnitCommitment","page":"Thermal Generation","title":"ThermalStandardUnitCommitment","text":"","category":"section"},{"location":"formulation_library/ThermalGen/","page":"Thermal Generation","title":"Thermal Generation","text":"ThermalStandardUnitCommitment","category":"page"},{"location":"formulation_library/ThermalGen/#PowerSimulations.ThermalStandardUnitCommitment","page":"Thermal Generation","title":"PowerSimulations.ThermalStandardUnitCommitment","text":"Formulaiton type to enable standard unit commitment with intertemporal constraints and simplified startup profiles\n\n\n\n\n\n","category":"type"},{"location":"formulation_library/ThermalGen/","page":"Thermal Generation","title":"Thermal Generation","text":"TODO","category":"page"},{"location":"formulation_library/ThermalGen/","page":"Thermal Generation","title":"Thermal Generation","text":"","category":"page"},{"location":"formulation_library/Branch/#PowerSystems.Branch-Formulations","page":"Branch","title":"PowerSystems.Branch Formulations","text":"","category":"section"},{"location":"formulation_library/Branch/","page":"Branch","title":"Branch","text":"Valid DeviceModels for subtypes of Branch include the following:","category":"page"},{"location":"formulation_library/Branch/","page":"Branch","title":"Branch","text":"using PowerSimulations\nusing PowerSystems\nusing DataFrames\nusing Latexify\ncombos = PowerSimulations.generate_device_formulation_combinations()\nfilter!(x -> x[\"device_type\"] <: Branch, combos)\ncombo_table = DataFrame(\n    \"Valid DeviceModel\" => [\"`DeviceModel($(c[\"device_type\"]), $(c[\"formulation\"]))`\" for c in combos],\n    \"Device Type\" => [\"[$(c[\"device_type\"])](https://nrel-siip.github.io/PowerSystems.jl/stable/model_library/generated_$(c[\"device_type\"])/)\" for c in combos],\n    \"Formulation\" => [\"[$(c[\"formulation\"])](@ref)\" for c in combos],\n    )\nmdtable(combo_table, latex = false)","category":"page"},{"location":"formulation_library/Branch/","page":"Branch","title":"Branch","text":"","category":"page"},{"location":"formulation_library/Branch/#StaticBranch","page":"Branch","title":"StaticBranch","text":"","category":"section"},{"location":"formulation_library/Branch/","page":"Branch","title":"Branch","text":"StaticBranch","category":"page"},{"location":"formulation_library/Branch/#PowerSimulations.StaticBranch","page":"Branch","title":"PowerSimulations.StaticBranch","text":"Branch type to add unbounded flow variables and use flow constraints\n\n\n\n\n\n","category":"type"},{"location":"formulation_library/Branch/","page":"Branch","title":"Branch","text":"","category":"page"},{"location":"formulation_library/Branch/#StaticBranchBounds","page":"Branch","title":"StaticBranchBounds","text":"","category":"section"},{"location":"formulation_library/Branch/","page":"Branch","title":"Branch","text":"StaticBranchBounds","category":"page"},{"location":"formulation_library/Branch/#PowerSimulations.StaticBranchBounds","page":"Branch","title":"PowerSimulations.StaticBranchBounds","text":"Branch type to add bounded flow variables and use flow constraints\n\n\n\n\n\n","category":"type"},{"location":"formulation_library/Branch/","page":"Branch","title":"Branch","text":"","category":"page"},{"location":"formulation_library/Branch/#StaticBranchUnbounded","page":"Branch","title":"StaticBranchUnbounded","text":"","category":"section"},{"location":"formulation_library/Branch/","page":"Branch","title":"Branch","text":"StaticBranchUnbounded","category":"page"},{"location":"formulation_library/Branch/#PowerSimulations.StaticBranchUnbounded","page":"Branch","title":"PowerSimulations.StaticBranchUnbounded","text":"Branch type to avoid flow constraints\n\n\n\n\n\n","category":"type"},{"location":"formulation_library/Branch/","page":"Branch","title":"Branch","text":"","category":"page"},{"location":"formulation_library/Branch/#HVDCP2PLossless","page":"Branch","title":"HVDCP2PLossless","text":"","category":"section"},{"location":"formulation_library/Branch/","page":"Branch","title":"Branch","text":"HVDCP2PLossless","category":"page"},{"location":"formulation_library/Branch/#PowerSimulations.HVDCP2PLossless","page":"Branch","title":"PowerSimulations.HVDCP2PLossless","text":"Branch type to represent lossless power flow on DC lines\n\n\n\n\n\n","category":"type"},{"location":"formulation_library/Branch/","page":"Branch","title":"Branch","text":"","category":"page"},{"location":"formulation_library/Branch/#HVDCP2PDispatch","page":"Branch","title":"HVDCP2PDispatch","text":"","category":"section"},{"location":"formulation_library/Branch/","page":"Branch","title":"Branch","text":"HVDCP2PDispatch","category":"page"},{"location":"formulation_library/Branch/#PowerSimulations.HVDCP2PDispatch","page":"Branch","title":"PowerSimulations.HVDCP2PDispatch","text":"Branch type to represent lossy power flow on DC lines\n\n\n\n\n\n","category":"type"},{"location":"formulation_library/Branch/","page":"Branch","title":"Branch","text":"","category":"page"},{"location":"formulation_library/Branch/#HVDCP2PUnbounded","page":"Branch","title":"HVDCP2PUnbounded","text":"","category":"section"},{"location":"formulation_library/Branch/","page":"Branch","title":"Branch","text":"HVDCP2PUnbounded","category":"page"},{"location":"formulation_library/Branch/#PowerSimulations.HVDCP2PUnbounded","page":"Branch","title":"PowerSimulations.HVDCP2PUnbounded","text":"Branch type to avoid flow constraints\n\n\n\n\n\n","category":"type"},{"location":"modeler_guide/problem_templates/#op_problem_template","page":"Operations ProblemTemplates","title":"Operations ProblemTemplates","text":"","category":"section"},{"location":"modeler_guide/problem_templates/","page":"Operations ProblemTemplates","title":"Operations ProblemTemplates","text":"Templates are used to specify the modeling properties of the devices and network that are going to he used to specify a problem. A ProblemTemplate is just a collection of DeviceModels that allows the user to specify the formulations of each set of devices (by device type) independently so that the modeler can adjust the level of detail according to the question of interest and the available data. For more information about valid DeviceModels and their mathematical representations, check out the Formulation Library.","category":"page"},{"location":"modeler_guide/problem_templates/#Building-a-ProblemTemplate","page":"Operations ProblemTemplates","title":"Building a ProblemTemplate","text":"","category":"section"},{"location":"modeler_guide/problem_templates/","page":"Operations ProblemTemplates","title":"Operations ProblemTemplates","text":"You can build a ProblemTemplate by adding a NetworkModel, DeviceModels, and ServiceModels.","category":"page"},{"location":"modeler_guide/problem_templates/","page":"Operations ProblemTemplates","title":"Operations ProblemTemplates","text":"template = ProblemTemplate()\nset_network_model!(template, NetworkModel(CopperPlatePowerModel))\nset_device_model!(template, PowerLoad, StaticPowerLoad)\nset_device_model!(template, ThermalStandard, ThermalBasicUnitCommitment)\nset_service_model!(template, VariableReserve{ReserveUp}, RangeReserve)","category":"page"},{"location":"modeler_guide/problem_templates/#Default-Templates","page":"Operations ProblemTemplates","title":"Default Templates","text":"","category":"section"},{"location":"modeler_guide/problem_templates/","page":"Operations ProblemTemplates","title":"Operations ProblemTemplates","text":"PowerSimulations.jl provides default templates for common operation problems. You can retrieve a default template and modify it according to your requirements. Currently supported default templates are:","category":"page"},{"location":"modeler_guide/problem_templates/","page":"Operations ProblemTemplates","title":"Operations ProblemTemplates","text":"template_economic_dispatch","category":"page"},{"location":"modeler_guide/problem_templates/","page":"Operations ProblemTemplates","title":"Operations ProblemTemplates","text":"using PowerSimulations #hide\ntemplate_economic_dispatch()","category":"page"},{"location":"modeler_guide/problem_templates/","page":"Operations ProblemTemplates","title":"Operations ProblemTemplates","text":"template_unit_commitment","category":"page"},{"location":"modeler_guide/problem_templates/","page":"Operations ProblemTemplates","title":"Operations ProblemTemplates","text":"using PowerSimulations #hide\ntemplate_unit_commitment()","category":"page"},{"location":"modeler_guide/problem_templates/","page":"Operations ProblemTemplates","title":"Operations ProblemTemplates","text":"template_agc_reserve_deployment","category":"page"},{"location":"modeler_guide/problem_templates/","page":"Operations ProblemTemplates","title":"Operations ProblemTemplates","text":"using PowerSimulations #hide\ntemplate_agc_reserve_deployment()","category":"page"},{"location":"code_base_developer_guide/developer/#Guidelines-for-Developers","page":"Developer Guide","title":"Guidelines for Developers","text":"","category":"section"},{"location":"code_base_developer_guide/developer/","page":"Developer Guide","title":"Developer Guide","text":"In order to contribute to PowerSystems.jl repository please read the following sections of InfrastructureSystems.jl documentation in detail:","category":"page"},{"location":"code_base_developer_guide/developer/","page":"Developer Guide","title":"Developer Guide","text":"Style Guide\nContributing Guidelines","category":"page"},{"location":"code_base_developer_guide/developer/","page":"Developer Guide","title":"Developer Guide","text":"Pull requests are always welcome to fix bugs or add additional modeling capabilities.","category":"page"},{"location":"code_base_developer_guide/developer/","page":"Developer Guide","title":"Developer Guide","text":"All the code contributions need to include tests with a minimum coverage of 70%","category":"page"},{"location":"modeler_guide/modeling_faq/#Modeling-FAQ","page":"Modeling FAQ","title":"Modeling FAQ","text":"","category":"section"},{"location":"modeler_guide/modeling_faq/","page":"Modeling FAQ","title":"Modeling FAQ","text":"question: How do I reduce the amount of print on my REPL?\nThe print to the REPL is controlled with the logging. Check the Logging documentation page to see how to reduce the print out","category":"page"},{"location":"modeler_guide/modeling_faq/","page":"Modeling FAQ","title":"Modeling FAQ","text":"question: How do I print the optimizer logs to see the solution process?\nWhen specifying the DecisionModel or EmulationModel pass the keyword print_optimizer_log = true","category":"page"},{"location":"api/PowerSimulations/","page":"API Reference","title":"API Reference","text":"CurrentModule = PowerSimulations\nDocTestSetup  = quote\n    using PowerSimulations\nend","category":"page"},{"location":"api/PowerSimulations/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"api/PowerSimulations/#Table-of-Contents","page":"API Reference","title":"Table of Contents","text":"","category":"section"},{"location":"api/PowerSimulations/","page":"API Reference","title":"API Reference","text":"Device Models\nDecision Models\nEmulation Models\nSimulation Models\nVariables\nConstraints","category":"page"},{"location":"api/PowerSimulations/#Device-Models","page":"API Reference","title":"Device Models","text":"","category":"section"},{"location":"api/PowerSimulations/","page":"API Reference","title":"API Reference","text":"List of structures and methods for Device models","category":"page"},{"location":"api/PowerSimulations/","page":"API Reference","title":"API Reference","text":"DeviceModel","category":"page"},{"location":"api/PowerSimulations/#PowerSimulations.DeviceModel","page":"API Reference","title":"PowerSimulations.DeviceModel","text":"DeviceModel(\n    ::Type{D},\n    ::Type{B},\n    feedforwards::Vector{<:AbstractAffectFeedforward}\n    use_slacks::Bool,\n    duals::Vector{DataType},\n    services::Vector{ServiceModel}\n    attributes::Dict{String, Any}\n)\n\nEstablishes the model for a particular device specified by type. Uses the keyword argument feedforward to enable passing values between operation model at simulation time\n\nArguments\n\n::Type{D} where D<:PSY.Device: Power System Device Type\n::Type{B} where B<:AbstractDeviceFormulation: Abstract Device Formulation\nfeedforward::Array{<:AbstractAffectFeedforward} = Vector{AbstractAffectFeedforward}() : use to pass parameters between models\nuse_slacks::Bool = false : Add slacks to the device model\nduals::Vector{DataType} = Vector{DataType}(): use to pass constraint type to calculate the duals\ntime_series_names::Dict{Type{<:TimeSeriesParameter}, String} = get_default_time_series_names(D, B) : use to specify time series names associated to the device`\nattributes::Dict{String, Any} = get_default_attributes(D, B) : use to specify attributes to the device\n\nExample\n\nthermal_gens = DeviceModel(ThermalStandard, ThermalBasicUnitCommitment)\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSimulations/#Formulations","page":"API Reference","title":"Formulations","text":"","category":"section"},{"location":"api/PowerSimulations/","page":"API Reference","title":"API Reference","text":"Refer to the Formulations Page for each Abstract Device Formulation.","category":"page"},{"location":"api/PowerSimulations/#Problem-Templates","page":"API Reference","title":"Problem Templates","text":"","category":"section"},{"location":"api/PowerSimulations/","page":"API Reference","title":"API Reference","text":"Refer to the Problem Templates Page for available ProblemTemplates.","category":"page"},{"location":"api/PowerSimulations/","page":"API Reference","title":"API Reference","text":"&nbsp;\n&nbsp;","category":"page"},{"location":"api/PowerSimulations/#Decision-Models","page":"API Reference","title":"Decision Models","text":"","category":"section"},{"location":"api/PowerSimulations/","page":"API Reference","title":"API Reference","text":"DecisionModel\nDecisionModel(::Type{M} where {M <: DecisionProblem}, ::ProblemTemplate, ::PSY.System, ::Union{Nothing, JuMP.Model}) \nDecisionModel(::AbstractString, ::MOI.OptimizerWithAttributes)\nbuild!(::DecisionModel)\nsolve!(::DecisionModel)","category":"page"},{"location":"api/PowerSimulations/#PowerSimulations.DecisionModel","page":"API Reference","title":"PowerSimulations.DecisionModel","text":"DecisionModel{M}(\n    template::ProblemTemplate,\n    sys::PSY.System,\n    jump_model::Union{Nothing, JuMP.Model}=nothing;\n    kwargs...) where {M<:DecisionProblem}\n\nThis builds the optimization problem of type M with the specific system and template.\n\nArguments\n\n::Type{M} where M<:DecisionProblem: The abstract operation model type\ntemplate::ProblemTemplate: The model reference made up of transmission, devices, branches, and services.\nsys::PSY.System: the system created using Power Systems\njump_model::Union{Nothing, JuMP.Model}: Enables passing a custom JuMP model. Use with care\nname = nothing: name of model, string or symbol; defaults to the type of template converted to a symbol.\noptimizer::Union{Nothing,MOI.OptimizerWithAttributes} = nothing : The optimizer does not get serialized. Callers should pass whatever they passed to the original problem.\nhorizon::Int = UNSET_HORIZON: Manually specify the length of the forecast Horizon\nwarm_start::Bool = true: True will use the current operation point in the system to initialize variable values. False initializes all variables to zero. Default is true\nsystem_to_file::Bool = true:: True to create a copy of the system used in the model.\ninitialize_model::Bool = true: Option to decide to initialize the model or not.\ninitialization_file::String = \"\": TODO\ndeserialize_initial_conditions::Bool = false: Option to deserialize conditions\nexport_pwl_vars::Bool = false: True to export all the pwl intermediate variables. It can slow down significantly the solve time.\nallow_fails::Bool = false: True to allow the simulation to continue even if the optimization step fails. Use with care.\noptimizer_solve_log_print::Bool = false: Uses JuMP.unset_silent() to print the optimizer's log. By default all solvers are set to MOI.Silent()\ndetailed_optimizer_stats::Bool = false: True to save detailed optimizer stats log.\ncalculate_conflict::Bool = false: True to use solver to calculate conflicts for infeasible problems. Only specific solvers are able to calculate conflicts.\ndirect_mode_optimizer::Bool = false: True to use the solver in direct mode. Creates a JuMP.direct_model.\nstore_variable_names::Bool = false: True to store variable names in optimization model.\nrebuild_model::Bool = false: TODO\ninitial_time::Dates.DateTime = UNSET_INI_TIME: Initial Time for the model solve.\ntime_series_cache_size::Int = IS.TIME_SERIES_CACHE_SIZE_BYTES: Size in bytes to cache for each time array. Default is 1 MiB. Set to 0 to disable.\n\nExample\n\ntemplate = ProblemTemplate(CopperPlatePowerModel, devices, branches, services)\nOpModel = DecisionModel(MockOperationProblem, template, system)\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSimulations/#PowerSimulations.DecisionModel-Tuple{Type{M} where M<:PowerSimulations.DecisionProblem, ProblemTemplate, System, Union{Nothing, JuMP.Model}}","page":"API Reference","title":"PowerSimulations.DecisionModel","text":"DecisionModel(\n    ::Type{M<:PowerSimulations.DecisionProblem},\n    template::ProblemTemplate,\n    sys::System\n) -> Any\nDecisionModel(\n    ::Type{M<:PowerSimulations.DecisionProblem},\n    template::ProblemTemplate,\n    sys::System,\n    jump_model::Union{Nothing, JuMP.Model};\n    kwargs...\n) -> Any\n\n\nThis builds the optimization problem of type M with the specific system and template\n\nArguments\n\n::Type{M} where M<:DecisionProblem: The abstract operation model type\ntemplate::ProblemTemplate: The model reference made up of transmission, devices, branches, and services.\nsys::PSY.System: the system created using Power Systems\njump_model::Union{Nothing, JuMP.Model} = nothing: Enables passing a custom JuMP model. Use with care.\n\nExample\n\ntemplate = ProblemTemplate(CopperPlatePowerModel, devices, branches, services)\nproblem = DecisionModel(MyOpProblemType, template, system, optimizer)\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.DecisionModel-Tuple{AbstractString, MathOptInterface.OptimizerWithAttributes}","page":"API Reference","title":"PowerSimulations.DecisionModel","text":"DecisionModel(\n    directory::AbstractString,\n    optimizer::MathOptInterface.OptimizerWithAttributes;\n    jump_model,\n    system\n) -> Any\n\n\nConstruct an DecisionProblem from a serialized file.\n\nArguments\n\ndirectory::AbstractString: Directory containing a serialized model\njump_model::Union{Nothing, JuMP.Model} = nothing: The JuMP model does not get serialized. Callers should pass whatever they passed to the original problem.\noptimizer::Union{Nothing,MOI.OptimizerWithAttributes} = nothing: The optimizer does not get serialized. Callers should pass whatever they passed to the original problem.\nsystem::Union{Nothing, PSY.System}: Optionally, the system used for the model. If nothing and systofile was set to true when the model was created, the system will be deserialized from a file.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.build!-Tuple{DecisionModel}","page":"API Reference","title":"PowerSimulations.build!","text":"build!(\n    model::DecisionModel;\n    output_dir,\n    recorders,\n    console_level,\n    file_level,\n    disable_timer_outputs\n)\n\n\nBuild the Decision Model based on the specified DecisionProblem.\n\nArguments\n\nmodel::DecisionModel{<:DecisionProblem}: DecisionModel object\noutput_dir::String: Output directory for results\nrecorders::Vector{Symbol} = []: recorder names to register\nconsole_level = Logging.Error: \nfile_level = Logging.Info:\ndisable_timer_outputs = false : Enable/Disable timing outputs\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.solve!-Tuple{DecisionModel}","page":"API Reference","title":"PowerSimulations.solve!","text":"solve!(\n    model::DecisionModel;\n    export_problem_results,\n    console_level,\n    file_level,\n    disable_timer_outputs,\n    serialize,\n    kwargs...\n) -> RunStatus\n\n\nDefault solve method for models that conform to the requirements of DecisionModel{<: DecisionProblem}.\n\nThis will call build! on the model if it is not already built. It will forward all keyword arguments to that function.\n\nArguments\n\nmodel::OperationModel = model: operation model\nexport_problem_results::Bool = false: If true, export ProblemResults DataFrames to CSV files.\nconsole_level = Logging.Error: \nfile_level = Logging.Info:\ndisable_timer_outputs = false : Enable/Disable timing outputs\nserialize::Bool = true: If true, serialize the model to a file to allow re-execution later.\n\nExamples\n\nresults = solve!(OpModel)\nresults = solve!(OpModel, export_problem_results = true)\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/","page":"API Reference","title":"API Reference","text":"&nbsp;\n&nbsp;","category":"page"},{"location":"api/PowerSimulations/#Emulation-Models","page":"API Reference","title":"Emulation Models","text":"","category":"section"},{"location":"api/PowerSimulations/","page":"API Reference","title":"API Reference","text":"EmulationModel\nEmulationModel(::Type{M} where {M <: EmulationProblem}, ::ProblemTemplate, ::PSY.System, ::Union{Nothing, JuMP.Model})\nEmulationModel(::AbstractString, ::MOI.OptimizerWithAttributes)\nbuild!(::EmulationModel)\nrun!(::EmulationModel)","category":"page"},{"location":"api/PowerSimulations/#PowerSimulations.EmulationModel","page":"API Reference","title":"PowerSimulations.EmulationModel","text":"EmulationModel{M}(\n    template::ProblemTemplate,\n    sys::PSY.System,\n    jump_model::Union{Nothing, JuMP.Model}=nothing;\n    kwargs...) where {M<:EmulationProblem}\n\nThis builds the optimization problem of type M with the specific system and template.\n\nArguments\n\n::Type{M} where M<:EmulationProblem: The abstract Emulation model type\ntemplate::ProblemTemplate: The model reference made up of transmission, devices, branches, and services.\nsys::PSY.System: the system created using Power Systems\njump_model::Union{Nothing, JuMP.Model}: Enables passing a custom JuMP model. Use with care\nname = nothing: name of model, string or symbol; defaults to the type of template converted to a symbol.\noptimizer::Union{Nothing,MOI.OptimizerWithAttributes} = nothing : The optimizer does not get serialized. Callers should pass whatever they passed to the original problem.\nwarm_start::Bool = true: True will use the current operation point in the system to initialize variable values. False initializes all variables to zero. Default is true\nsystem_to_file::Bool = true:: True to create a copy of the system used in the model.\ninitialize_model::Bool = true: Option to decide to initialize the model or not.\ninitialization_file::String = \"\": TODO\ndeserialize_initial_conditions::Bool = false: Option to deserialize conditions\nexport_pwl_vars::Bool = false: True to export all the pwl intermediate variables. It can slow down significantly the solve time.\nallow_fails::Bool = false: True to allow the simulation to continue even if the optimization step fails. Use with care.\ncalculate_conflict::Bool = false: True to use solver to calculate conflicts for infeasible problems. Only specific solvers are able to calculate conflicts.\noptimizer_solve_log_print::Bool = false: Uses JuMP.unset_silent() to print the optimizer's log. By default all solvers are set to MOI.Silent()\ndetailed_optimizer_stats::Bool = false: True to save detailed optimizer stats log.\ndirect_mode_optimizer::Bool = false: True to use the solver in direct mode. Creates a JuMP.direct_model.\nstore_variable_names::Bool = false: True to store variable names in optimization model.\nrebuild_model::Bool = false: TODO\ninitial_time::Dates.DateTime = UNSET_INI_TIME: Initial Time for the model solve.\ntime_series_cache_size::Int = IS.TIME_SERIES_CACHE_SIZE_BYTES: Size in bytes to cache for each time array. Default is 1 MiB. Set to 0 to disable.\n\nExample\n\ntemplate = ProblemTemplate(CopperPlatePowerModel, devices, branches, services)\nOpModel = EmulationModel(MockEmulationProblem, template, system)\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSimulations/#PowerSimulations.EmulationModel-Tuple{Type{M} where M<:PowerSimulations.EmulationProblem, ProblemTemplate, System, Union{Nothing, JuMP.Model}}","page":"API Reference","title":"PowerSimulations.EmulationModel","text":"EmulationModel(\n    ::Type{M<:PowerSimulations.EmulationProblem},\n    template::ProblemTemplate,\n    sys::System\n) -> Any\nEmulationModel(\n    ::Type{M<:PowerSimulations.EmulationProblem},\n    template::ProblemTemplate,\n    sys::System,\n    jump_model::Union{Nothing, JuMP.Model};\n    kwargs...\n) -> Any\n\n\nThis builds the optimization problem of type M with the specific system and template\n\nArguments\n\n::Type{M} where M<:EmulationProblem: The abstract Emulation model type\ntemplate::ProblemTemplate: The model reference made up of transmission, devices, branches, and services.\nsys::PSY.System: the system created using Power Systems\njump_model::Union{Nothing, JuMP.Model}: Enables passing a custom JuMP model. Use with care\n\nExample\n\ntemplate = ProblemTemplate(CopperPlatePowerModel, devices, branches, services)\nproblem = EmulationModel(MyEmProblemType, template, system, optimizer)\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.EmulationModel-Tuple{AbstractString, MathOptInterface.OptimizerWithAttributes}","page":"API Reference","title":"PowerSimulations.EmulationModel","text":"EmulationModel(\n    directory::AbstractString,\n    optimizer::MathOptInterface.OptimizerWithAttributes;\n    jump_model,\n    system,\n    kwargs...\n) -> Any\n\n\nConstruct an EmulationProblem from a serialized file.\n\nArguments\n\ndirectory::AbstractString: Directory containing a serialized model.\noptimizer::MOI.OptimizerWithAttributes: The optimizer does not get serialized. Callers should pass whatever they passed to the original problem.\njump_model::Union{Nothing, JuMP.Model} = nothing: The JuMP model does not get serialized. Callers should pass whatever they passed to the original problem.\nsystem::Union{Nothing, PSY.System}: Optionally, the system used for the model. If nothing and systofile was set to true when the model was created, the system will be deserialized from a file.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.build!-Tuple{EmulationModel}","page":"API Reference","title":"PowerSimulations.build!","text":"build!(\n    model::EmulationModel;\n    executions,\n    output_dir,\n    recorders,\n    console_level,\n    file_level,\n    disable_timer_outputs\n)\n\n\nImplementation of build for any EmulationProblem\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.run!-Tuple{EmulationModel}","page":"API Reference","title":"PowerSimulations.run!","text":"run!(\n    model::EmulationModel;\n    export_problem_results,\n    console_level,\n    file_level,\n    disable_timer_outputs,\n    serialize,\n    kwargs...\n) -> RunStatus\n\n\nDefault run method for problems that conform to the requirements of EmulationModel{<: EmulationProblem}\n\nThis will call build! on the model if it is not already built. It will forward all keyword arguments to that function.\n\nArguments\n\nmodel::EmulationModel = model: Emulation model\noptimizer::MOI.OptimizerWithAttributes: The optimizer that is used to solve the model\nexecutions::Int: Number of executions for the emulator run\nexport_problem_results::Bool: If true, export ProblemResults DataFrames to CSV files.\noutput_dir::String: Required if the model is not already built, otherwise ignored\nenable_progress_bar::Bool: Enables/Disable progress bar printing\nserialize::Bool: If true, serialize the model to a file to allow re-execution later.\n\nExamples\n\nstatus = run!(model; optimizer = GLPK.Optimizer, executions = 10)\nstatus = run!(model; output_dir = ./model_output, optimizer = GLPK.Optimizer, executions = 10)\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/","page":"API Reference","title":"API Reference","text":"&nbsp;\n&nbsp;","category":"page"},{"location":"api/PowerSimulations/#Simulation-Models","page":"API Reference","title":"Simulation Models","text":"","category":"section"},{"location":"api/PowerSimulations/","page":"API Reference","title":"API Reference","text":"Refer to the Simulations Page to explanations on how to setup a Simulation, with Sequencing and Feedforwards.","category":"page"},{"location":"api/PowerSimulations/","page":"API Reference","title":"API Reference","text":"SimulationModels\nSimulationSequence\nSimulation\nSimulation(::AbstractString, ::Dict)\nbuild!(::Simulation)\nexecute!(::Simulation)","category":"page"},{"location":"api/PowerSimulations/#PowerSimulations.SimulationModels","page":"API Reference","title":"PowerSimulations.SimulationModels","text":"SimulationModels(\n    decision_models::Vector{<:DecisionModel},\n    emulation_models::Union{Nothing, EmulationModel}\n)\n\nStores the OperationProblem definitions to be used in the simulation. When creating the SimulationModels, the order in which the models are created determines the order on which the simulation is executed.\n\nArguments\n\ndecision_models::Vector{<:DecisionModel}: Vector of decision models.\nemulation_models::Union{Nothing, EmulationModel}: Optional argument to include\n\nan EmulationModel in the Simulation\n\nExample\n\ntemplate_uc = template_unit_commitment()\ntemplate_ed = template_economic_dispatch()\nmy_decision_model_uc = DecisionModel(template_1, sys_uc, optimizer, name = \"UC\")\nmy_decision_model_ed = DecisionModel(template_ed, sys_ed, optimizer, name = \"ED\")\nmodels = SimulationModels(\n    decision_models = [\n        my_decision_model_uc,\n        my_decision_model_ed\n    ]\n)\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSimulations/#PowerSimulations.SimulationSequence","page":"API Reference","title":"PowerSimulations.SimulationSequence","text":"SimulationSequence(\n    models::SimulationModels,\n    feedforward::Dict{String, Vector{<:AbstractAffectFeedforward}}\n    ini_cond_chronology::InitialConditionChronology\n)\n\nConstruct the simulation sequence between decision and emulation models.\n\nArguments\n\nmodels::SimulationModels: Vector of decisions and emulation models.\nfeedforward = Dict{String, Vector{<:AbstractAffectFeedforward}}(): Optional dictionary to specify how information\n\nand variables are exchanged between decision and emulation models.\n\nini_cond_chronology::nitialConditionChronology =  InterProblemChronology(): TODO\n\nExample\n\ntemplate_uc = template_unit_commitment()\ntemplate_ed = template_economic_dispatch()\nmy_decision_model_uc = DecisionModel(template_1, sys_uc, optimizer, name = \"UC\")\nmy_decision_model_ed = DecisionModel(template_ed, sys_ed, optimizer, name = \"ED\")\nmodels = SimulationModels(\n    decision_models = [\n        my_decision_model_uc,\n        my_decision_model_ed\n    ]\n)\n# The following sequence set the commitment variables (`OnVariable`) for `ThermalStandard` units from UC to ED.\nsequence = SimulationSequence(;\n    models = models,\n    feedforwards = Dict(\n        \"ED\" => [\n            SemiContinuousFeedforward(;\n                component_type = ThermalStandard,\n                source = OnVariable,\n                affected_values = [ActivePowerVariable],\n            ),\n        ],\n    ),\n)\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSimulations/#PowerSimulations.Simulation","page":"API Reference","title":"PowerSimulations.Simulation","text":"Simulation(\n    sequence::SimulationSequence,\n    name::String,\n    steps::Int\n    models::SimulationModels,        \n    simulation_folder::String,        \n    initial_time::Union{Nothing, Dates.DateTime}\n)\n\nConstruct the Simulation structure to run the sequence of decision and emulation models specified.\n\nArguments\n\n-sequence::SimulationSequence: Simulation sequence that specify how the decision and emulation models will be executed.   -name::String: Name of the Simulation   -steps::Int: Number of steps on which the sequence of models will be executed   -models::SimulationModels: List of Decision and Emulation Models   -simulation_folder::String: Folder on which results will be stored   -initial_time::Union{Nothing, Dates.DateTime} = nothing: Initial time of which the simulation starts. If nothing it will default to the first timestamp     of time series of the system.\n\nExample\n\ntemplate_uc = template_unit_commitment()\ntemplate_ed = template_economic_dispatch()\nmy_decision_model_uc = DecisionModel(template_1, sys_uc, optimizer, name = \"UC\")\nmy_decision_model_ed = DecisionModel(template_ed, sys_ed, optimizer, name = \"ED\")\nmodels = SimulationModels(\n    decision_models = [\n        my_decision_model_uc,\n        my_decision_model_ed\n    ]\n)\n# The following sequence set the commitment variables (`OnVariable`) for `ThermalStandard` units from UC to ED.\nsequence = SimulationSequence(;\n    models = models,\n    feedforwards = Dict(\n        \"ED\" => [\n            SemiContinuousFeedforward(;\n                component_type = ThermalStandard,\n                source = OnVariable,\n                affected_values = [ActivePowerVariable],\n            ),\n        ],\n    ),\n)\n\nsim = Simulation(\n    sequence = sequence,\n    name = \"Sim\",\n    steps = 5,\n    models = models,\n    simulation_folder = mktempdir(cleanup=true),\n)\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSimulations/#PowerSimulations.Simulation-Tuple{AbstractString, Dict}","page":"API Reference","title":"PowerSimulations.Simulation","text":"Simulation(directory::AbstractString, model_info::Dict)\n\n\nConstructs Simulation from a serialized directory. Callers should pass any kwargs here that they passed to the original Simulation.\n\nArguments\n\ndirectory::AbstractString: the directory returned from the call to serialize\nmodel_info::Dict: Two-level dictionary containing model parameters that cannot be serialized. The outer dict should be keyed by the problem name. The inner dict must contain 'optimizer' and may contain 'jump_model'. These should be the same values used for the original simulation.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.build!-Tuple{Simulation}","page":"API Reference","title":"PowerSimulations.build!","text":"build!(\n    sim::Simulation;\n    recorders,\n    console_level,\n    file_level,\n    serialize,\n    partitions,\n    index\n) -> BuildStatus\n\n\nBuild the Simulation, problems and the related folder structure.\n\nArguments\n\nsim::Simulation: simulation object\nrecorders::Vector{Symbol} = []: recorder names to register\nserialize::Bool = true: serializes the simulation objects in the simulation\nconsole_level = Logging.Error:\nfile_level = Logging.Info:\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.execute!-Tuple{Simulation}","page":"API Reference","title":"PowerSimulations.execute!","text":"execute!(sim::Simulation; kwargs...) -> RunStatus\n\n\nSolves the simulation model for sequential Simulations.\n\nArguments\n\nsim::Simulation=sim: simulation object created by Simulation()\n\nThe optional keyword argument exports controls exporting of results to CSV files as the simulation runs. Refer to export_results for a description of this argument.\n\nExample\n\nsim = Simulation(\"Test\", 7, problems, \"/Users/folder\")\nexecute!(sim::Simulation; kwargs...)\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/","page":"API Reference","title":"API Reference","text":"&nbsp;\n&nbsp;","category":"page"},{"location":"api/PowerSimulations/#Variables","page":"API Reference","title":"Variables","text":"","category":"section"},{"location":"api/PowerSimulations/","page":"API Reference","title":"API Reference","text":"For a list of variables for each device refer to its Formulations page.","category":"page"},{"location":"api/PowerSimulations/#Common-Variables","page":"API Reference","title":"Common Variables","text":"","category":"section"},{"location":"api/PowerSimulations/","page":"API Reference","title":"API Reference","text":"ActivePowerVariable\nReactivePowerVariable\nPieceWiseLinearCostVariable\nEnergyShortageVariable\nEnergySurplusVariable","category":"page"},{"location":"api/PowerSimulations/#PowerSimulations.ActivePowerVariable","page":"API Reference","title":"PowerSimulations.ActivePowerVariable","text":"Struct to dispatch the creation of Active Power Variables\n\nDocs abbreviation: Pg\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSimulations/#PowerSimulations.ReactivePowerVariable","page":"API Reference","title":"PowerSimulations.ReactivePowerVariable","text":"Struct to dispatch the creation of Reactive Power Variables\n\nDocs abbreviation: Qg\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSimulations/#PowerSimulations.EnergyShortageVariable","page":"API Reference","title":"PowerSimulations.EnergyShortageVariable","text":"Struct to dispatch the creation of a slack variable for energy storage levels < target storage levels\n\nDocs abbreviation: E^shortage\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSimulations/#PowerSimulations.EnergySurplusVariable","page":"API Reference","title":"PowerSimulations.EnergySurplusVariable","text":"Struct to dispatch the creation of a slack variable for energy storage levels > target storage levels\n\nDocs abbreviation: E^surplus\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSimulations/#Thermal-Unit-Variables","page":"API Reference","title":"Thermal Unit Variables","text":"","category":"section"},{"location":"api/PowerSimulations/","page":"API Reference","title":"API Reference","text":"OnVariable\nStartVariable\nStopVariable\nTimeDurationOn\nTimeDurationOff\nHotStartVariable\nWarmStartVariable\nColdStartVariable\nPowerAboveMinimumVariable","category":"page"},{"location":"api/PowerSimulations/#PowerSimulations.OnVariable","page":"API Reference","title":"PowerSimulations.OnVariable","text":"Struct to dispatch the creation of a binary commitment status variable\n\nDocs abbreviation: u\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSimulations/#PowerSimulations.PowerAboveMinimumVariable","page":"API Reference","title":"PowerSimulations.PowerAboveMinimumVariable","text":"Struct to dispatch the creation of Active Power Variables above minimum power for Thermal Compact formulations\n\nDocs abbreviation: hatPg\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSimulations/#Storage-Unit-Variables","page":"API Reference","title":"Storage Unit Variables","text":"","category":"section"},{"location":"api/PowerSimulations/","page":"API Reference","title":"API Reference","text":"ActivePowerOutVariable\nActivePowerInVariable\nEnergyVariable\nReservationVariable","category":"page"},{"location":"api/PowerSimulations/#PowerSimulations.ActivePowerOutVariable","page":"API Reference","title":"PowerSimulations.ActivePowerOutVariable","text":"Struct to dispatch the creation of Active Power Output Variables for 2-directional devices. For instance storage or pump-hydro\n\nDocs abbreviation: Pg^out\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSimulations/#PowerSimulations.ActivePowerInVariable","page":"API Reference","title":"PowerSimulations.ActivePowerInVariable","text":"Struct to dispatch the creation of Active Power Input Variables for 2-directional devices. For instance storage or pump-hydro\n\nDocs abbreviation: Pg^in\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSimulations/#PowerSimulations.EnergyVariable","page":"API Reference","title":"PowerSimulations.EnergyVariable","text":"Struct to dispatch the creation of a variable for energy storage level (state of charge)\n\nDocs abbreviation: E\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSimulations/#PowerSimulations.ReservationVariable","page":"API Reference","title":"PowerSimulations.ReservationVariable","text":"Struct to dispatch the creation of binary storage charge reservation variable\n\nDocs abbreviation: r\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSimulations/#Hydro-Variables","page":"API Reference","title":"Hydro Variables","text":"","category":"section"},{"location":"api/PowerSimulations/","page":"API Reference","title":"API Reference","text":"WaterSpillageVariable","category":"page"},{"location":"api/PowerSimulations/#PowerSimulations.WaterSpillageVariable","page":"API Reference","title":"PowerSimulations.WaterSpillageVariable","text":"Struct to dispatch the creation of energy (water) spillage variable representing energy released from a storage/reservoir not injected into the network\n\nDocs abbreviation: S\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSimulations/#Branches-and-Network-Variables","page":"API Reference","title":"Branches and Network Variables","text":"","category":"section"},{"location":"api/PowerSimulations/","page":"API Reference","title":"API Reference","text":"FlowActivePowerVariable\nFlowActivePowerFromToVariable\nFlowActivePowerToFromVariable\nFlowReactivePowerFromToVariable\nFlowReactivePowerToFromVariable\nPhaseShifterAngle\nHVDCLosses\nHVDCFlowDirectionVariable\nVoltageMagnitude\nVoltageAngle","category":"page"},{"location":"api/PowerSimulations/#PowerSimulations.FlowActivePowerVariable","page":"API Reference","title":"PowerSimulations.FlowActivePowerVariable","text":"Struct to dispatch the creation of bidirectional Active Power Flow Variables\n\nDocs abbreviation: P\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSimulations/#PowerSimulations.FlowActivePowerFromToVariable","page":"API Reference","title":"PowerSimulations.FlowActivePowerFromToVariable","text":"Struct to dispatch the creation of unidirectional Active Power Flow Variables\n\nDocs abbreviation: overrightarrowP\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSimulations/#PowerSimulations.FlowActivePowerToFromVariable","page":"API Reference","title":"PowerSimulations.FlowActivePowerToFromVariable","text":"Struct to dispatch the creation of unidirectional Active Power Flow Variables\n\nDocs abbreviation: overleftarrowP\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSimulations/#PowerSimulations.FlowReactivePowerFromToVariable","page":"API Reference","title":"PowerSimulations.FlowReactivePowerFromToVariable","text":"Struct to dispatch the creation of unidirectional Reactive Power Flow Variables\n\nDocs abbreviation: overrightarrowQ\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSimulations/#PowerSimulations.FlowReactivePowerToFromVariable","page":"API Reference","title":"PowerSimulations.FlowReactivePowerToFromVariable","text":"Struct to dispatch the creation of unidirectional Reactive Power Flow Variables\n\nDocs abbreviation: overleftarrowQ\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSimulations/#Regulation-and-Services-Variables","page":"API Reference","title":"Regulation and Services Variables","text":"","category":"section"},{"location":"api/PowerSimulations/","page":"API Reference","title":"API Reference","text":"ActivePowerReserveVariable\nServiceRequirementVariable\nDeltaActivePowerUpVariable\nDeltaActivePowerDownVariable\nAdditionalDeltaActivePowerUpVariable\nAdditionalDeltaActivePowerDownVariable\nAreaMismatchVariable\nSteadyStateFrequencyDeviation\nSmoothACE\nSystemBalanceSlackUp\nSystemBalanceSlackDown\nReserveRequirementSlack","category":"page"},{"location":"api/PowerSimulations/#PowerSimulations.ActivePowerReserveVariable","page":"API Reference","title":"PowerSimulations.ActivePowerReserveVariable","text":"Struct to dispatch the creation of Active Power Reserve Variables\n\nDocs abbreviation: Pr\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSimulations/","page":"API Reference","title":"API Reference","text":"&nbsp;\n&nbsp;","category":"page"},{"location":"api/PowerSimulations/#Constraints","page":"API Reference","title":"Constraints","text":"","category":"section"},{"location":"api/PowerSimulations/#Common-Constraints","page":"API Reference","title":"Common Constraints","text":"","category":"section"},{"location":"api/PowerSimulations/","page":"API Reference","title":"API Reference","text":"PieceWiseLinearCostConstraint\n","category":"page"},{"location":"api/PowerSimulations/#Network-Constraints","page":"API Reference","title":"Network Constraints","text":"","category":"section"},{"location":"api/PowerSimulations/","page":"API Reference","title":"API Reference","text":"ActiveConstraint\nAreaDispatchBalanceConstraint\nAreaParticipationAssignmentConstraint\nBalanceAuxConstraint\nCopperPlateBalanceConstraint\nFrequencyResponseConstraint\nNodalBalanceActiveConstraint\nNodalBalanceReactiveConstraint","category":"page"},{"location":"api/PowerSimulations/#Power-Variable-Limit-Constraints","page":"API Reference","title":"Power Variable Limit Constraints","text":"","category":"section"},{"location":"api/PowerSimulations/","page":"API Reference","title":"API Reference","text":"ActivePowerVariableLimitsConstraint \nReactivePowerVariableLimitsConstraint\nActivePowerVariableTimeSeriesLimitsConstraint\nInputActivePowerVariableLimitsConstraint\nOutputActivePowerVariableLimitsConstraint","category":"page"},{"location":"api/PowerSimulations/#Regulation-and-Services-Constraints","page":"API Reference","title":"Regulation and Services Constraints","text":"","category":"section"},{"location":"api/PowerSimulations/","page":"API Reference","title":"API Reference","text":"ParticipationAssignmentConstraint\nRegulationLimitsConstraint\nRequirementConstraint\nReserveEnergyCoverageConstraint\nReservePowerConstraint","category":"page"},{"location":"api/PowerSimulations/#Thermal-Unit-Constraints","page":"API Reference","title":"Thermal Unit Constraints","text":"","category":"section"},{"location":"api/PowerSimulations/","page":"API Reference","title":"API Reference","text":"ActiveRangeICConstraint\nCommitmentConstraint\nDurationConstraint\nMustRunConstraint\nRampConstraint\nRampLimitConstraint\nStartupInitialConditionConstraint\nStartupTimeLimitTemperatureConstraint","category":"page"},{"location":"api/PowerSimulations/#Renewable-Unit-Constraints","page":"API Reference","title":"Renewable Unit Constraints","text":"","category":"section"},{"location":"api/PowerSimulations/","page":"API Reference","title":"API Reference","text":"EqualityConstraint\n","category":"page"},{"location":"api/PowerSimulations/#Hydro-and-Storage-Constraints","page":"API Reference","title":"Hydro and Storage Constraints","text":"","category":"section"},{"location":"api/PowerSimulations/","page":"API Reference","title":"API Reference","text":"EnergyBalanceConstraint\nEnergyBudgetConstraint\nEnergyCapacityConstraint\nEnergyCapacityDownConstraint\nEnergyCapacityUpConstraint \nEnergyTargetConstraint\nRangeLimitConstraint","category":"page"},{"location":"api/PowerSimulations/#Branches-Constraints","page":"API Reference","title":"Branches Constraints","text":"","category":"section"},{"location":"api/PowerSimulations/","page":"API Reference","title":"API Reference","text":"AbsoluteValueConstraint\nFlowLimitFromToConstraint\nFlowLimitToFromConstraint\nFlowRateConstraint\nFlowRateConstraintFromTo\nFlowRateConstraintToFrom\nHVDCDirection\nHVDCLossesAbsoluteValue\nHVDCPowerBalance\nNetworkFlowConstraint\nRateLimitConstraint\nRateLimitConstraintFromTo\nRateLimitConstraintToFrom\nPhaseAngleControlLimit ","category":"page"},{"location":"api/PowerSimulations/#Feedforward-Constraints","page":"API Reference","title":"Feedforward Constraints","text":"","category":"section"},{"location":"api/PowerSimulations/","page":"API Reference","title":"API Reference","text":"FeedforwardSemiContinousConstraint\nFeedforwardIntegralLimitConstraint\nFeedforwardUpperBoundConstraint\nFeedforwardLowerBoundConstraint\nFeedforwardEnergyTargetConstraint","category":"page"},{"location":"modeler_guide/definitions/#Definitions","page":"Definitions","title":"Definitions","text":"","category":"section"},{"location":"modeler_guide/definitions/#D","page":"Definitions","title":"D","text":"","category":"section"},{"location":"modeler_guide/definitions/","page":"Definitions","title":"Definitions","text":"Decision Problem: A decision problem calculates the desired system operation based on forecasts of uncertain inputs and information about the state of the system. The output of a decision problem represents the policies used to drive the set-points of the system's devices, like generators or switches, and depends on the purpose of the problem.","category":"page"},{"location":"modeler_guide/definitions/#E","page":"Definitions","title":"E","text":"","category":"section"},{"location":"modeler_guide/definitions/","page":"Definitions","title":"Definitions","text":"Emulation Problem: An emulation problem is used to mimic the system's behavior subject to an incoming decision and the realization of a forecasted inputs. The solution of the emulator produces outputs representative of the system performance when operating subject the policies resulting from the decision models.","category":"page"},{"location":"modeler_guide/definitions/#H","page":"Definitions","title":"H","text":"","category":"section"},{"location":"modeler_guide/definitions/","page":"Definitions","title":"Definitions","text":"Horizon: The number of steps in the look-ahead of a decision problem. For instance, a Day-ahead problem usually has a 48 step horizon.","category":"page"},{"location":"modeler_guide/definitions/#I","page":"Definitions","title":"I","text":"","category":"section"},{"location":"modeler_guide/definitions/","page":"Definitions","title":"Definitions","text":"Interval:","category":"page"},{"location":"modeler_guide/definitions/#R","page":"Definitions","title":"R","text":"","category":"section"},{"location":"modeler_guide/definitions/","page":"Definitions","title":"Definitions","text":"Resolution: The amount of time between timesteps in a simulation. For instance 1-hour or 5-minutes. In Julia these are defined using the syntax Hour(1) and Minute(5)","category":"page"},{"location":"modeler_guide/debugging_infeasible_models/#Debugging-infeasible-models","page":"Debugging infeasible models","title":"Debugging infeasible models","text":"","category":"section"},{"location":"modeler_guide/debugging_infeasible_models/","page":"Debugging infeasible models","title":"Debugging infeasible models","text":"Getting infeasible solutions to models is a common ocurrence in operations simulations, there are multiple reasons why this can happen. PowerSimulations.jl has several tools to help debug this situation.","category":"page"},{"location":"modeler_guide/debugging_infeasible_models/#Adding-slacks-to-the-model","page":"Debugging infeasible models","title":"Adding slacks to the model","text":"","category":"section"},{"location":"modeler_guide/debugging_infeasible_models/#Getting-the-infeasibility-conflict","page":"Debugging infeasible models","title":"Getting the infeasibility conflict","text":"","category":"section"},{"location":"formulation_library/HydroGen/#PowerSystems.HydroGen-Formulations","page":"Hydro Generation","title":"PowerSystems.HydroGen Formulations","text":"","category":"section"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"Valid DeviceModels for subtypes of HydroGen include the following:","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"using PowerSimulations\nusing PowerSystems\nusing DataFrames\nusing Latexify\ncombos = PowerSimulations.generate_device_formulation_combinations()\nfilter!(x -> x[\"device_type\"] <: HydroGen, combos)\ncombo_table = DataFrame(\n    \"Valid DeviceModel\" => [\"`DeviceModel($(c[\"device_type\"]), $(c[\"formulation\"]))`\" for c in combos],\n    \"Device Type\" => [\"[$(c[\"device_type\"])](https://nrel-siip.github.io/PowerSystems.jl/stable/model_library/generated_$(c[\"device_type\"])/)\" for c in combos],\n    \"Formulation\" => [\"[$(c[\"formulation\"])](@ref)\" for c in combos],\n    )\nmdtable(combo_table, latex = false)","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"","category":"page"},{"location":"formulation_library/HydroGen/#HydroDispatchRunOfRiver","page":"Hydro Generation","title":"HydroDispatchRunOfRiver","text":"","category":"section"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"HydroDispatchRunOfRiver","category":"page"},{"location":"formulation_library/HydroGen/#PowerSimulations.HydroDispatchRunOfRiver","page":"Hydro Generation","title":"PowerSimulations.HydroDispatchRunOfRiver","text":"Formulation type to add injection variables constrained by a maximum injection time series for HydroGen\n\n\n\n\n\n","category":"type"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"Variables:","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"ActivePowerVariable:\nBounds: [0.0, ]\nDefault initial value: PowerSystems.get_active_power(device)\nReactivePowerVariable:\nBounds: [0.0, ]\nDefault initial value: PowerSystems.get_reactive_power(device)","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"Static Parameters:","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"Pg^textmin = PowerSystems.get_active_power_limits(device).min\nQg^textmin = PowerSystems.get_reactive_power_limits(device).min\nQg^textmax = PowerSystems.get_reactive_power_limits(device).max","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"Time Series Parameters:","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"using PowerSimulations\nusing PowerSystems\nusing DataFrames\nusing Latexify\ncombos = PowerSimulations.get_default_time_series_names(HydroGen, HydroDispatchRunOfRiver)\ncombo_table = DataFrame(\n    \"Parameter\" => map(x -> \"[`$x`](@ref)\", collect(keys(combos))),\n    \"Default Time Series Name\" => map(x -> \"`$x`\", collect(values(combos))),\n    )\nmdtable(combo_table, latex = false)","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"Objective:","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"Creates an objective function term based on the VariableCost Options where the quantity term is defined as Pg.","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"Expressions:","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"Adds Pg and Qg terms to the respective active and reactive power balance expressions created by the selected Network Formulations","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"Constraints:","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"beginaligned\n  Pg^textmin le Pg_t le ActivePowerTimeSeriesParameter_t \n  Qg^textmin le Qg_t le Qg^textmax\nendaligned","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"","category":"page"},{"location":"formulation_library/HydroGen/#HydroDispatchPumpedStorage","page":"Hydro Generation","title":"HydroDispatchPumpedStorage","text":"","category":"section"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"HydroDispatchPumpedStorage","category":"page"},{"location":"formulation_library/HydroGen/#PowerSimulations.HydroDispatchPumpedStorage","page":"Hydro Generation","title":"PowerSimulations.HydroDispatchPumpedStorage","text":"Formulation type to constrain energy production from pumped storage with a representation of the energy storage capacity of upper and lower reservoirs and water inflow time series of upper reservoir and outflow time series of lower reservoir for HydroPumpedStorage\n\n\n\n\n\n","category":"type"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"Variables:","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"ActivePowerInVariable:\nBounds: [0.0, ]\nDefault initial value: -1 * PowerSystems.get_active_power(device)\nActivePowerOutVariable:\nBounds: [0.0, ]\nDefault initial value: PowerSystems.get_active_power(device)\nEnergyVariableUp:\nBounds: [0.0, ]\nDefault initial value: PowerSystems.get_initial_storage(device).up\nEnergyVariableDown:\nBounds: [0.0, ]\nDefault initial value: PowerSystems.get_initial_storage(device).down\nWaterSpillageVariable:\nBounds: [0.0, ]\nDefault initial value: 0.0\nEnergyOutput:\nBounds: [0.0, ]\nDefault initial value: 0.0\nReservationVariable:\nonly included if DeviceModel(HydroPumpedStorage, HydroDispatchPumpedStorage; attributes = Dict(reservation => true))\nBounds: {0, 1}\nDefault initial value: 1","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"Static Parameters:","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"Pg^textout max = map(x -> x.max - x.min, PowerSystems.get_active_power_limits(device))\nPg^textin max = map(x -> x.max - x.min, PowerSystems.get_active_power_limits_pump(device))\nEg^textup max = PowerSystems.get_storage_capacity(device).up\nEg^textdown max = PowerSystems.get_storage_capacity(device).down","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"Time Series Parameters:","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"using PowerSimulations\nusing PowerSystems\nusing DataFrames\nusing Latexify\ncombos = PowerSimulations.get_default_time_series_names(HydroPumpedStorage, HydroDispatchPumpedStorage)\ncombo_table = DataFrame(\n    \"Parameter\" => map(x -> \"[`$x`](@ref)\", collect(keys(combos))),\n    \"Default Time Series Name\" => map(x -> \"`$x`\", collect(values(combos))),\n    )\nmdtable(combo_table, latex = false)","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"Objective:","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"Creates an objective function term based on the VariableCost Options where the quantity term is defined as Pg^out.","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"Expressions:","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"Adds Pg term(s) to the active power balance expression(s) created by the selected Network Formulations","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"Constraints:","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"beginaligned\n  E^up_t+1 = E^up_t + (InflowTimeSeriesParameter_t - S_t - Pg^out_t + Pg^in_t) cdot Delta T \n  E^down_t+1 = E^down_t + (S_t - OutflowTimeSeriesParameter_t + Pg^out_t - Pg^in_t) cdot Delta T \n  Pg^in_t - r * Pg^textin max le Pg^textin max \n  Pg^out_t + r * Pg^textout max le Pg^textout max \n  E^up_t le E^up max\n  E^down_t le E^down max\nendaligned","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"","category":"page"},{"location":"formulation_library/HydroGen/#HydroDispatchReservoirBudget","page":"Hydro Generation","title":"HydroDispatchReservoirBudget","text":"","category":"section"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"HydroDispatchReservoirBudget","category":"page"},{"location":"formulation_library/HydroGen/#PowerSimulations.HydroDispatchReservoirBudget","page":"Hydro Generation","title":"PowerSimulations.HydroDispatchReservoirBudget","text":"Formulation type to add injection variables constrained by total energy production budget defined with a time series for HydroGen\n\n\n\n\n\n","category":"type"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"Variables:","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"ActivePowerVariable:\nBounds: [0.0, ]\nDefault initial value: PowerSystems.get_active_power(device)\nReactivePowerVariable:\nBounds: [0.0, ]\nDefault initial value: PowerSystems.get_reactive_power(device)","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"Auxillary Variables:","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"EnergyOutput - TODO","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"Static Parameters:","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"Pg^textmin = PowerSystems.get_active_power_limits(device).min\nPg^textmax = PowerSystems.get_active_power_limits(device).max\nQg^textmin = PowerSystems.get_reactive_power_limits(device).min\nQg^textmax = PowerSystems.get_reactive_power_limits(device).max","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"Time Series Parameters:","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"using PowerSimulations\nusing PowerSystems\nusing DataFrames\nusing Latexify\ncombos = PowerSimulations.get_default_time_series_names(HydroEnergyReservoir, HydroDispatchReservoirBudget)\ncombo_table = DataFrame(\n    \"Parameter\" => map(x -> \"[`$x`](@ref)\", collect(keys(combos))),\n    \"Default Time Series Name\" => map(x -> \"`$x`\", collect(values(combos))),\n    )\nmdtable(combo_table, latex = false)","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"Objective:","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"Creates an objective function term based on the VariableCost Options where the quantity term is defined as Pg.","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"Expressions:","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"Adds Pg and Qg terms to the respective active and reactive power balance expressions created by the selected Network Formulations","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"Constraints:","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"beginaligned\n  Pg^textmin le Pg_t le Pg^textmax \n  Qg^textmin le Qg_t le Qg^textmax \n  sum_t = 1^N(Pg_t) cdot Delta T le sum_t = 1^N(EnergyBudgetTimeSeriesParameter_t) cdot Delta T\nendaligned","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"","category":"page"},{"location":"formulation_library/HydroGen/#HydroDispatchReservoirStorage","page":"Hydro Generation","title":"HydroDispatchReservoirStorage","text":"","category":"section"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"HydroDispatchReservoirStorage","category":"page"},{"location":"formulation_library/HydroGen/#PowerSimulations.HydroDispatchReservoirStorage","page":"Hydro Generation","title":"PowerSimulations.HydroDispatchReservoirStorage","text":"Formulation type to constrain hydropower production with a representation of the energy storage capacity and water inflow time series of a reservoir for HydroGen\n\n\n\n\n\n","category":"type"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"Variables:","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"ActivePowerVariable:\nBounds: [0.0, ]\nDefault initial value: PowerSystems.get_active_power(device)\nReactivePowerVariable:\nBounds: [0.0, ]\nDefault initial value: PowerSystems.get_reactive_power(device)\nEnergyVariable:\nBounds: [0.0, ]\nDefault initial value: PowerSystems.get_initial_storage(device)\nWaterSpillageVariable:\nBounds: [0.0, ]\nDefault initial value: 0.0\nEnergyShortageVariable:\nBounds: [ , 0.0]\nDefault initial value: 0.0\nEnergySurplusVariable:\nBounds: [0.0, ]\nDefault initial value: 0.0","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"Auxillary Variables:","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"EnergyOutput","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"Static Parameters:","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"Pg^textmin = PowerSystems.get_active_power_limits(device).min\nPg^textmax = PowerSystems.get_active_power_limits(device).max\nQg^textmin = PowerSystems.get_reactive_power_limits(device).min\nQg^textmax = PowerSystems.get_reactive_power_limits(device).max\nEg^textmax = PowerSystems.get_storage_capacity(device)","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"Time Series Parameters:","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"using PowerSimulations\nusing PowerSystems\nusing DataFrames\nusing Latexify\ncombos = PowerSimulations.get_default_time_series_names(HydroEnergyReservoir, HydroDispatchReservoirStorage)\ncombo_table = DataFrame(\n    \"Parameter\" => map(x -> \"[`$x`](@ref)\", collect(keys(combos))),\n    \"Default Time Series Name\" => map(x -> \"`$x`\", collect(values(combos))),\n    )\nmdtable(combo_table, latex = false)","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"Objective:","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"Creates an objective function term based on the VariableCost Options where the quantity term is defined as Pg. TODO: add slack terms","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"Expressions:","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"Adds Pg and Qg terms to the respective active and reactive power balance expressions created by the selected Network Formulations","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"Constraints:","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"beginaligned\n  E_t+1 = E_t + (InflowTimeSeriesParameter_t - S_t - Pg_t) cdot Delta T \n  E_t - E^surplus_t + E^shortage_t = EnergyTargetTimeSeriesParameter_t \n  Pg^textmin le Pg_t le Pg^textmax \n  Qg^textmin le Qg_t le Qg^textmax\nendaligned","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"","category":"page"},{"location":"formulation_library/HydroGen/#HydroCommitmentReservoirBudget","page":"Hydro Generation","title":"HydroCommitmentReservoirBudget","text":"","category":"section"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"HydroCommitmentReservoirBudget","category":"page"},{"location":"formulation_library/HydroGen/#PowerSimulations.HydroCommitmentReservoirBudget","page":"Hydro Generation","title":"PowerSimulations.HydroCommitmentReservoirBudget","text":"Formulation type to add commitment and injection variables constrained by total energy production budget defined with a time series for HydroGen\n\n\n\n\n\n","category":"type"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"Variables:","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"ActivePowerVariable:\nBounds: [0.0, ]\nDefault initial value: PowerSystems.get_active_power(device)\nReactivePowerVariable:\nBounds: [0.0, ]\nDefault initial value: PowerSystems.get_reactive_power(device)\nOnVariable:\nBounds: {0, 1}\nDefault initial value: PowerSystems.get_status(device)","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"Auxillary Variables:","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"EnergyOutput - TODO","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"Static Parameters:","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"Pg^textmin = PowerSystems.get_active_power_limits(device).min\nPg^textmax = PowerSystems.get_active_power_limits(device).max\nQg^textmin = PowerSystems.get_reactive_power_limits(device).min\nQg^textmax = PowerSystems.get_reactive_power_limits(device).max","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"Time Series Parameters:","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"using PowerSimulations\nusing PowerSystems\nusing DataFrames\nusing Latexify\ncombos = PowerSimulations.get_default_time_series_names(HydroEnergyReservoir, HydroCommitmentReservoirBudget)\ncombo_table = DataFrame(\n    \"Parameter\" => map(x -> \"[`$x`](@ref)\", collect(keys(combos))),\n    \"Default Time Series Name\" => map(x -> \"`$x`\", collect(values(combos))),\n    )\nmdtable(combo_table, latex = false)","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"Objective:","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"Creates an objective function term based on the VariableCost Options where the quantity term is defined as Pg.","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"Expressions:","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"Adds Pg and Qg terms to the respective active and reactive power balance expressions created by the selected Network Formulations","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"Constraints:","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"beginaligned\n  sum_t = 1^N P_t cdot Delta T le E^textbudget \n  Pg_t - u_t Pg^textmax le 0 \n  Pg_t - u_t Pg^textmin ge 0 \n  Qg_t - u_t Qg^textmax le 0 \n  Qg_t - u_t Qg^textmin ge 0\nendaligned","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"","category":"page"},{"location":"formulation_library/HydroGen/#HydroCommitmentReservoirStorage","page":"Hydro Generation","title":"HydroCommitmentReservoirStorage","text":"","category":"section"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"HydroCommitmentReservoirStorage","category":"page"},{"location":"formulation_library/HydroGen/#PowerSimulations.HydroCommitmentReservoirStorage","page":"Hydro Generation","title":"PowerSimulations.HydroCommitmentReservoirStorage","text":"Formulation type to constrain hydropower production with unit commitment variables and a representation of the energy storage capacity and water inflow time series of a reservoir for HydroGen\n\n\n\n\n\n","category":"type"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"Variables:","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"ActivePowerVariable:\nBounds: [0.0, ]\nDefault initial value: PowerSystems.get_active_power(device)\nReactivePowerVariable:\nBounds: [0.0, ]\nDefault initial value: PowerSystems.get_reactive_power(device)\nEnergyVariable:\nBounds: [0.0, ]\nDefault initial value: PowerSystems.get_initial_storage(device)\nWaterSpillageVariable:\nBounds: [0.0, ]\nDefault initial value: 0.0\nEnergyShortageVariable:\nBounds: [ , 0.0]\nDefault initial value: 0.0\nEnergySurplusVariable:\nBounds: [0.0, ]\nDefault initial value: 0.0\nOnVariable:\nBounds: {0, 1}\nDefault initial value: PowerSystems.get_status(device)","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"Auxillary Variables:","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"EnergyOutput","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"Static Parameters:","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"Pg^textmin = PowerSystems.get_active_power_limits(device).min\nPg^textmax = PowerSystems.get_active_power_limits(device).max\nQg^textmin = PowerSystems.get_reactive_power_limits(device).min\nQg^textmax = PowerSystems.get_reactive_power_limits(device).max\nEg^textmax = PowerSystems.get_storage_capacity(device)","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"Time Series Parameters:","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"using PowerSimulations\nusing PowerSystems\nusing DataFrames\nusing Latexify\ncombos = PowerSimulations.get_default_time_series_names(HydroEnergyReservoir, HydroCommitmentReservoirStorage)\ncombo_table = DataFrame(\n    \"Parameter\" => map(x -> \"[`$x`](@ref)\", collect(keys(combos))),\n    \"Default Time Series Name\" => map(x -> \"`$x`\", collect(values(combos))),\n    )\nmdtable(combo_table, latex = false)","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"Objective:","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"Creates an objective function term based on the VariableCost Options where the quantity term is defined as Pg, and objective function terms for StorageManagementCost.","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"Expressions:","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"Adds Pg and Qg terms to the respective active and reactive power balance expressions created by the selected Network Formulations","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"Constraints:","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"beginaligned\n  E_t+1 = E_t + (InflowTimeSeriesParameter_t - S_t - Pg_t) cdot Delta T \n  E_t - E^surplus_t + E^shortage_t = EnergyTargetTimeSeriesParameter_t \n  Pg_t - u_t Pg^textmax le 0 \n  Pg_t - u_t Pg^textmin ge 0 \n  Qg_t - u_t Qg^textmax le 0 \n  Qg_t - u_t Qg^textmin ge 0\nendaligned","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"","category":"page"},{"location":"formulation_library/HydroGen/#HydroCommitmentRunOfRiver","page":"Hydro Generation","title":"HydroCommitmentRunOfRiver","text":"","category":"section"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"HydroCommitmentRunOfRiver","category":"page"},{"location":"formulation_library/HydroGen/#PowerSimulations.HydroCommitmentRunOfRiver","page":"Hydro Generation","title":"PowerSimulations.HydroCommitmentRunOfRiver","text":"Formulation type to add commitment and injection variables constrained by a maximum injection time series for HydroGen\n\n\n\n\n\n","category":"type"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"Variables:","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"ActivePowerVariable:\nBounds: [0.0, ]\nDefault initial value: PowerSystems.get_active_power(device)\nReactivePowerVariable:\nBounds: [0.0, ]\nDefault initial value: PowerSystems.get_reactive_power(device)\nOnVariable:\nBounds: {0, 1}\nDefault initial value: PowerSystems.get_status(device)","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"Static Parameters:","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"Pg^textmin = PowerSystems.get_active_power_limits(device).min\nQg^textmin = PowerSystems.get_reactive_power_limits(device).min\nQg^textmax = PowerSystems.get_reactive_power_limits(device).max","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"Time Series Parameters:","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"using PowerSimulations\nusing PowerSystems\nusing DataFrames\nusing Latexify\ncombos = PowerSimulations.get_default_time_series_names(HydroGen, HydroCommitmentRunOfRiver)\ncombo_table = DataFrame(\n    \"Parameter\" => map(x -> \"[`$x`](@ref)\", collect(keys(combos))),\n    \"Default Time Series Name\" => map(x -> \"`$x`\", collect(values(combos))),\n    )\nmdtable(combo_table, latex = false)","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"Objective:","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"Creates an objective function term based on the VariableCost Options where the quantity term is defined as Pg.","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"Expressions:","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"Adds Pg and Qg terms to the respective active and reactive power balance expressions created by the selected Network Formulations","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"Constraints:","category":"page"},{"location":"formulation_library/HydroGen/","page":"Hydro Generation","title":"Hydro Generation","text":"beginaligned\n  Pg_t le Pg^textmax\n  Pg_t - u_t Pg^textmax le 0 \n  Pg_t - u_t Pg^textmin ge 0 \n  Qg_t - u_t Qg^textmax le 0 \n  Qg_t - u_t Qg^textmin ge 0\nendaligned","category":"page"},{"location":"modeler_guide/psi_structure/#psi_structure","page":"PowerSimulations.jl Modeling Structure","title":"PowerSimulations.jl Modeling Structure","text":"","category":"section"},{"location":"modeler_guide/psi_structure/","page":"PowerSimulations.jl Modeling Structure","title":"PowerSimulations.jl Modeling Structure","text":"PowerSimulations enables the simulation of a sequence of power systems optimization problems and provides user control over each aspect of the simulation configuration. Specifically:","category":"page"},{"location":"modeler_guide/psi_structure/","page":"PowerSimulations.jl Modeling Structure","title":"PowerSimulations.jl Modeling Structure","text":"mathematical formulations can be selected for each component with DeviceModel and ServiceModel\na problem can be defined by creating model entries in a Operations ProblemTemplates\nmodels (DecisionModel or EmulationModel) can be built by applying a ProblemTemplate to a System and can be executed/solved in isolation or as part of a Simulation\nSimulations can be defined and executed by sequencing one or more models and defining how and when data flows between models.","category":"page"},{"location":"modeler_guide/psi_structure/","page":"PowerSimulations.jl Modeling Structure","title":"PowerSimulations.jl Modeling Structure","text":"question: What is the difference between a Model and a Problem?\nA \"Problem\" is an abstract mathematical description of how to represent power system behavior, whereas a \"Model\" is a concrete representation of a \"Problem\" applied to a dataset. I.e. once a Problem is populated with data describing all the loads, generators, lines, etc., it becomes a Model.","category":"page"},{"location":"formulation_library/General/#formulation_library","page":"General","title":"Formulations","text":"","category":"section"},{"location":"formulation_library/General/","page":"General","title":"General","text":"Modeling formulations are created by dispatching on abstract subtypes of PowerSimulations.AbstractDeviceFormulation","category":"page"},{"location":"formulation_library/General/#FixedOutput","page":"General","title":"FixedOutput","text":"","category":"section"},{"location":"formulation_library/General/","page":"General","title":"General","text":"FixedOutput","category":"page"},{"location":"formulation_library/General/#PowerSimulations.FixedOutput","page":"General","title":"PowerSimulations.FixedOutput","text":"Formulation type to augment the power balance constraint expression with a time series parameter\n\n\n\n\n\n","category":"type"},{"location":"formulation_library/General/","page":"General","title":"General","text":"Variables:","category":"page"},{"location":"formulation_library/General/","page":"General","title":"General","text":"No variables are created for DeviceModel(<:DeviceType, FixedOutput)","category":"page"},{"location":"formulation_library/General/","page":"General","title":"General","text":"Static Parameters:","category":"page"},{"location":"formulation_library/General/","page":"General","title":"General","text":"ThermalGen:\nPg^textmax = PowerSystems.get_max_active_power(device)\nQg^textmax = PowerSystems.get_max_reactive_power(device)\nStorage:\nPg^textmax = PowerSystems.get_max_active_power(device)\nQg^textmax = PowerSystems.get_max_reactive_power(device)","category":"page"},{"location":"formulation_library/General/","page":"General","title":"General","text":"Time Series Parameters:","category":"page"},{"location":"formulation_library/General/","page":"General","title":"General","text":"using PowerSimulations\nusing PowerSystems\nusing DataFrames\nusing Latexify\ncombo_tables = []\nfor t in [RenewableGen, ThermalGen, HydroGen, Storage, ElectricLoad]\n    combos = PowerSimulations.get_default_time_series_names(t, FixedOutput)\n    combo_table = DataFrame(\n        \"Parameter\" => map(x -> \"[`$x`](@ref)\", collect(keys(combos))),\n        \"Default Time Series Name\" => map(x -> \"`$x`\", collect(values(combos))),\n        )\n    insertcols!(combo_table, 1, \"Device Type\" => fill(string(t), length(combos)))\n    push!(combo_tables, combo_table)\nend\nmdtable(vcat(combo_tables...), latex = false)","category":"page"},{"location":"formulation_library/General/","page":"General","title":"General","text":"Objective:","category":"page"},{"location":"formulation_library/General/","page":"General","title":"General","text":"No objective terms are created for DeviceModel(<:DeviceType, FixedOutput)","category":"page"},{"location":"formulation_library/General/","page":"General","title":"General","text":"Expressions:","category":"page"},{"location":"formulation_library/General/","page":"General","title":"General","text":"Adds the active and reactive parameters listed for specific device types above to the respective active and reactive power balance expressions created by the selected Network Formulations","category":"page"},{"location":"formulation_library/General/","page":"General","title":"General","text":"Constraints:","category":"page"},{"location":"formulation_library/General/","page":"General","title":"General","text":"No constraints are created for DeviceModel(<:DeviceType, FixedOutput)","category":"page"},{"location":"formulation_library/General/","page":"General","title":"General","text":"","category":"page"},{"location":"formulation_library/General/#VariableCost-Options","page":"General","title":"VariableCost Options","text":"","category":"section"},{"location":"formulation_library/General/","page":"General","title":"General","text":"PowerSimulations can represent variable costs using a variety of different methods depending on the data available in each device. The following describes the objective function terms that are populated for each variable cost option.","category":"page"},{"location":"formulation_library/General/#Scalar-VariableCost","page":"General","title":"Scalar VariableCost","text":"","category":"section"},{"location":"formulation_library/General/","page":"General","title":"General","text":"variable_cost <: Float64: creates a fixed marginal cost term in the objective function","category":"page"},{"location":"formulation_library/General/","page":"General","title":"General","text":"beginaligned\n  textmin sum_t C * G_t\nendaligned","category":"page"},{"location":"formulation_library/General/#Polynomial-VariableCost","page":"General","title":"Polynomial VariableCost","text":"","category":"section"},{"location":"formulation_library/General/","page":"General","title":"General","text":"variable_cost <: Tuple{Float64, Float64}: creates a polynomial cost term in the objective function where","category":"page"},{"location":"formulation_library/General/","page":"General","title":"General","text":"C_g=variable_cost[1]\nC_g^prime=variable_cost[2]","category":"page"},{"location":"formulation_library/General/","page":"General","title":"General","text":"beginaligned\n  textmin sum_t C * G_t + C^prime * G_t^2\nendaligned","category":"page"},{"location":"formulation_library/General/#Piecewise-Linear-VariableCost","page":"General","title":"Piecewise Linear VariableCost","text":"","category":"section"},{"location":"formulation_library/General/","page":"General","title":"General","text":"variable_cost <: Vector{Tuple{Float64, Float64}}: creates a piecewise linear cost term in the objective function ","category":"page"},{"location":"formulation_library/General/","page":"General","title":"General","text":"TODO: add formulation ","category":"page"},{"location":"formulation_library/General/","page":"General","title":"General","text":"___","category":"page"},{"location":"formulation_library/General/#StorageManagementCost","page":"General","title":"StorageManagementCost","text":"","category":"section"},{"location":"formulation_library/General/","page":"General","title":"General","text":"Adds an objective function cost term according to:","category":"page"},{"location":"formulation_library/General/","page":"General","title":"General","text":"beginaligned\n  textmin sum_t quad E^surplus_t * C^penalty - E^shortage_t * C^value \nendaligned","category":"page"},{"location":"formulation_library/General/","page":"General","title":"General","text":"Impact of different cost configurations:","category":"page"},{"location":"formulation_library/General/","page":"General","title":"General","text":"The following table describes all possible configuration of the StorageManagementCost with the target constraint in hydro or storage device models. Cases 1(a) & 2(a) will have no impact of the models operations and the target constraint will be rendered useless. In most cases that have no energy target and a non-zero value for C^value, if this cost is too high (C^value  0) or too low (C^value 0) can result in either the model holding on to stored energy till the end or the model not storing any energy in the device. This is caused by the fact that when energy target is zero, we have E_t = - E^shortage_t, and - E^shortage_t * C^value in the objective function is replaced by E_t * C^value, thus resulting in C^value to be seen as the cost of stored energy.","category":"page"},{"location":"formulation_library/General/","page":"General","title":"General","text":"Case Energy Target Energy Shortage Cost Energy Value / Energy Surplus cost Effect\nCase 1(a) hatE=0 C^penalty=0 C^value=0 no change\nCase 1(b) hatE=0 C^penalty=0 C^value0 penalty for storing energy\nCase 1(c) hatE=0 C^penalty0 C^value=0 no penalties or incentives applied\nCase 1(d) hatE=0 C^penalty=0 C^value0 incentive for storing energy\nCase 1(e) hatE=0 C^penalty0 C^value0 penalty for storing energy\nCase 1(f) hatE=0 C^penalty0 C^value0 incentive for storing energy\nCase 2(a) hatE0 C^penalty=0 C^value=0 no change\nCase 2(b) hatE0 C^penalty=0 C^value0 penalty on energy storage in excess of target\nCase 2(c) hatE0 C^penalty0 C^value=0 penalty on energy storage short of target\nCase 2(d) hatE0 C^penalty=0 C^value0 incentive on excess energy\nCase 2(e) hatE0 C^penalty0 C^value0 penalty on both excess/shortage of energy\nCase 2(f) hatE0 C^penalty0 C^value0 penalty for shortage, incentive for excess energy","category":"page"},{"location":"modeler_guide/logging/#Logging","page":"Logging","title":"Logging","text":"","category":"section"},{"location":"modeler_guide/logging/","page":"Logging","title":"Logging","text":"PowerSimulations.jl will output many log messages when building systems and running simulations. You may want to customize what gets logged to the console and, optionally, a file.","category":"page"},{"location":"modeler_guide/logging/","page":"Logging","title":"Logging","text":"By default all log messages of level Logging.Info or higher will get displayed to the console.  When you run a simulation a simulation-specific logger will take over and log its messages to a file in the logs directory in the simulation output directory. When finished it will relinquish control back to the global logger.","category":"page"},{"location":"modeler_guide/logging/#Configuring-the-global-logger","page":"Logging","title":"Configuring the global logger","text":"","category":"section"},{"location":"modeler_guide/logging/","page":"Logging","title":"Logging","text":"To configure the global logger in a Jupyter Notebook or REPL you may configure your own logger with the Julia Logging standard library or use the convenience function provided by PowerSimulations.  This example will log messages of level Logging.Error to console and Logging.Info and higher to the file power-simulations.log in the current directory.","category":"page"},{"location":"modeler_guide/logging/","page":"Logging","title":"Logging","text":"import Logging\nusing PowerSimulations\nlogger = configure_logging(\n    console_level = Logging.Error,\n    file_level = Logging.Info,\n    filename = \"power-simulations.log\"\n)","category":"page"},{"location":"modeler_guide/logging/#Configuring-the-simulation-logger","page":"Logging","title":"Configuring the simulation logger","text":"","category":"section"},{"location":"modeler_guide/logging/","page":"Logging","title":"Logging","text":"You can configure the logging level used by the simulation logger when you call build!(simulation).  Here is an example that increases logging verbosity:","category":"page"},{"location":"modeler_guide/logging/","page":"Logging","title":"Logging","text":"import Logging\nusing PowerSimulations\nsimulation = Simulation(...)\nbuild!(simulation, console_level = Logging.Info, file_level = Logging.Debug)","category":"page"},{"location":"modeler_guide/logging/","page":"Logging","title":"Logging","text":"The log file will be located at <your-output-path>/<simulation-name>/<run-output-dir>/logs/simulation.log.","category":"page"},{"location":"modeler_guide/logging/#Solver-logs","page":"Logging","title":"Solver logs","text":"","category":"section"},{"location":"modeler_guide/logging/","page":"Logging","title":"Logging","text":"You can configure logging for the solver you use.  Refer to the solver documentation.  PowerSimulations does not redirect or intercept prints to stdout or stderr from other libraries.","category":"page"},{"location":"modeler_guide/logging/#Recorder-events","page":"Logging","title":"Recorder events","text":"","category":"section"},{"location":"modeler_guide/logging/","page":"Logging","title":"Logging","text":"PowerSimulations uses the InfrastructureSystems.Recorder to store simulation events in a log file.  Refer to this link for more information.","category":"page"},{"location":"formulation_library/RenewableGen/#PowerSystems.RenewableGen-Formulations","page":"Renewable Generation","title":"PowerSystems.RenewableGen Formulations","text":"","category":"section"},{"location":"formulation_library/RenewableGen/","page":"Renewable Generation","title":"Renewable Generation","text":"Valid DeviceModels for subtypes of RenewableGen include the following:","category":"page"},{"location":"formulation_library/RenewableGen/","page":"Renewable Generation","title":"Renewable Generation","text":"using PowerSimulations\nusing PowerSystems\nusing DataFrames\nusing Latexify\ncombos = PowerSimulations.generate_device_formulation_combinations()\nfilter!(x -> x[\"device_type\"] <: RenewableGen, combos)\ncombo_table = DataFrame(\n    \"Valid DeviceModel\" => [\"`DeviceModel($(c[\"device_type\"]), $(c[\"formulation\"]))`\" for c in combos],\n    \"Device Type\" => [\"[$(c[\"device_type\"])](https://nrel-siip.github.io/PowerSystems.jl/stable/model_library/generated_$(c[\"device_type\"])/)\" for c in combos],\n    \"Formulation\" => [\"[$(c[\"formulation\"])](@ref)\" for c in combos],\n    )\nmdtable(combo_table, latex = false)","category":"page"},{"location":"formulation_library/RenewableGen/","page":"Renewable Generation","title":"Renewable Generation","text":"","category":"page"},{"location":"formulation_library/RenewableGen/#RenewableFullDispatch","page":"Renewable Generation","title":"RenewableFullDispatch","text":"","category":"section"},{"location":"formulation_library/RenewableGen/","page":"Renewable Generation","title":"Renewable Generation","text":"RenewableFullDispatch","category":"page"},{"location":"formulation_library/RenewableGen/#PowerSimulations.RenewableFullDispatch","page":"Renewable Generation","title":"PowerSimulations.RenewableFullDispatch","text":"Formulation type to add injection variables constrained by a maximum injection time series for RenewableGen\n\n\n\n\n\n","category":"type"},{"location":"formulation_library/RenewableGen/","page":"Renewable Generation","title":"Renewable Generation","text":"Variables:","category":"page"},{"location":"formulation_library/RenewableGen/","page":"Renewable Generation","title":"Renewable Generation","text":"ActivePowerVariable:\nBounds: [0.0, ]\nDefault initial value: PowerSystems.get_active_power(device)\nReactivePowerVariable:\nBounds: [0.0, ]\nDefault initial value: PowerSystems.get_reactive_power(device)","category":"page"},{"location":"formulation_library/RenewableGen/","page":"Renewable Generation","title":"Renewable Generation","text":"Static Parameters:","category":"page"},{"location":"formulation_library/RenewableGen/","page":"Renewable Generation","title":"Renewable Generation","text":"Pg^textmin = PowerSystems.get_active_power_limits(device).min\nQg^textmin = PowerSystems.get_reactive_power_limits(device).min\nQg^textmax = PowerSystems.get_reactive_power_limits(device).max","category":"page"},{"location":"formulation_library/RenewableGen/","page":"Renewable Generation","title":"Renewable Generation","text":"Time Series Parameters:","category":"page"},{"location":"formulation_library/RenewableGen/","page":"Renewable Generation","title":"Renewable Generation","text":"using PowerSimulations\nusing PowerSystems\nusing DataFrames\nusing Latexify\ncombos = PowerSimulations.get_default_time_series_names(RenewableGen, RenewableFullDispatch)\ncombo_table = DataFrame(\n    \"Parameter\" => map(x -> \"[`$x`](@ref)\", collect(keys(combos))),\n    \"Default Time Series Name\" => map(x -> \"`$x`\", collect(values(combos))),\n    )\nmdtable(combo_table, latex = false)","category":"page"},{"location":"formulation_library/RenewableGen/","page":"Renewable Generation","title":"Renewable Generation","text":"Objective:","category":"page"},{"location":"formulation_library/RenewableGen/","page":"Renewable Generation","title":"Renewable Generation","text":"Creates an objective function term based on the VariableCost Options where the quantity term is defined as - Pg_t to incentivize generation from RenewableGen devices.","category":"page"},{"location":"formulation_library/RenewableGen/","page":"Renewable Generation","title":"Renewable Generation","text":"Expressions:","category":"page"},{"location":"formulation_library/RenewableGen/","page":"Renewable Generation","title":"Renewable Generation","text":"Adds Pg and Qg terms to the respective active and reactive power balance expressions created by the selected Network Formulations","category":"page"},{"location":"formulation_library/RenewableGen/","page":"Renewable Generation","title":"Renewable Generation","text":"Constraints:","category":"page"},{"location":"formulation_library/RenewableGen/","page":"Renewable Generation","title":"Renewable Generation","text":"beginaligned\n  Pg^textmin le Pg_t le ActivePowerTimeSeriesParameter_t \n  Qg^textmin le Qg_t le Qg^textmax\nendaligned","category":"page"},{"location":"formulation_library/RenewableGen/","page":"Renewable Generation","title":"Renewable Generation","text":"","category":"page"},{"location":"formulation_library/RenewableGen/#RenewableConstantPowerFactor","page":"Renewable Generation","title":"RenewableConstantPowerFactor","text":"","category":"section"},{"location":"formulation_library/RenewableGen/","page":"Renewable Generation","title":"Renewable Generation","text":"RenewableConstantPowerFactor","category":"page"},{"location":"formulation_library/RenewableGen/#PowerSimulations.RenewableConstantPowerFactor","page":"Renewable Generation","title":"PowerSimulations.RenewableConstantPowerFactor","text":"Formulation type to add real and reactive injection variables with constant power factor with maximum real power injections constrained by a time series for RenewableGen\n\n\n\n\n\n","category":"type"},{"location":"formulation_library/RenewableGen/","page":"Renewable Generation","title":"Renewable Generation","text":"Variables:","category":"page"},{"location":"formulation_library/RenewableGen/","page":"Renewable Generation","title":"Renewable Generation","text":"ActivePowerVariable:\nBounds: [0.0, ]\nDefault initial value: PowerSystems.get_active_power(device)\nReactivePowerVariable:\nBounds: [0.0, ]\nDefault initial value: PowerSystems.get_reactive_power(device)","category":"page"},{"location":"formulation_library/RenewableGen/","page":"Renewable Generation","title":"Renewable Generation","text":"Static Parameters:","category":"page"},{"location":"formulation_library/RenewableGen/","page":"Renewable Generation","title":"Renewable Generation","text":"Pg^textmin = PowerSystems.get_active_power_limits(device).min\nQg^textmin = PowerSystems.get_reactive_power_limits(device).min\nQg^textmax = PowerSystems.get_reactive_power_limits(device).max\npf = PowerSystems.get_power_factor(device)","category":"page"},{"location":"formulation_library/RenewableGen/","page":"Renewable Generation","title":"Renewable Generation","text":"Time Series Parameters:","category":"page"},{"location":"formulation_library/RenewableGen/","page":"Renewable Generation","title":"Renewable Generation","text":"using PowerSimulations\nusing PowerSystems\nusing DataFrames\nusing Latexify\ncombos = PowerSimulations.get_default_time_series_names(RenewableGen, RenewableConstantPowerFactor)\ncombo_table = DataFrame(\n    \"Parameter\" => map(x -> \"[`$x`](@ref)\", collect(keys(combos))),\n    \"Default Time Series Name\" => map(x -> \"`$x`\", collect(values(combos))),\n    )\nmdtable(combo_table, latex = false)","category":"page"},{"location":"formulation_library/RenewableGen/","page":"Renewable Generation","title":"Renewable Generation","text":"Objective:","category":"page"},{"location":"formulation_library/RenewableGen/","page":"Renewable Generation","title":"Renewable Generation","text":"Creates an objective function term based on the VariableCost Options where the quantity term is defined as - Pg_t to incentivize generation from RenewableGen devices.","category":"page"},{"location":"formulation_library/RenewableGen/","page":"Renewable Generation","title":"Renewable Generation","text":"Expressions:","category":"page"},{"location":"formulation_library/RenewableGen/","page":"Renewable Generation","title":"Renewable Generation","text":"Adds Pg and Qg terms to the respective active and reactive power balance expressions created by the selected Network Formulations","category":"page"},{"location":"formulation_library/RenewableGen/","page":"Renewable Generation","title":"Renewable Generation","text":"Constraints:","category":"page"},{"location":"formulation_library/RenewableGen/","page":"Renewable Generation","title":"Renewable Generation","text":"beginaligned\n  Pg^textmin le Pg_t le ActivePowerTimeSeriesParameter_t \n  Qg^textmin le Qg_t le Qg^textmax \n  Qg_t = pf * Pg_t\nendaligned","category":"page"},{"location":"formulation_library/Service/#PowerSystems.Service-Formulations","page":"PowerSystems.Service Formulations","title":"PowerSystems.Service Formulations","text":"","category":"section"},{"location":"formulation_library/Service/","page":"PowerSystems.Service Formulations","title":"PowerSystems.Service Formulations","text":"TODO","category":"page"},{"location":"model_developer_guide/adding_new_problem_model/#Adding-an-Operations-Problem-Model","page":"Adding Problems","title":"Adding an Operations Problem Model","text":"","category":"section"},{"location":"model_developer_guide/adding_new_problem_model/#Decision-Problem","page":"Adding Problems","title":"Decision Problem","text":"","category":"section"},{"location":"model_developer_guide/adding_new_problem_model/#Emulation-Problem","page":"Adding Problems","title":"Emulation Problem","text":"","category":"section"},{"location":"formulation_library/README/#Formulation-documentation-guide","page":"Formulation documentation guide","title":"Formulation documentation guide","text":"","category":"section"},{"location":"formulation_library/README/","page":"Formulation documentation guide","title":"Formulation documentation guide","text":"Formulation documentation should roughly follow the template established by RenewableGen.md","category":"page"},{"location":"formulation_library/README/#Auto-generated-items","page":"Formulation documentation guide","title":"Auto generated items","text":"","category":"section"},{"location":"formulation_library/README/","page":"Formulation documentation guide","title":"Formulation documentation guide","text":"Valid DeviceModel table: just change the device category in the filter function\nTime Series Parameters: just change the device category and formulation in the get_defualt_time_series_names method call","category":"page"},{"location":"formulation_library/README/#Linked-items","page":"Formulation documentation guide","title":"Linked items","text":"","category":"section"},{"location":"formulation_library/README/","page":"Formulation documentation guide","title":"Formulation documentation guide","text":"Formulations in the Valid DeviceModel table must have a docstring in src/core/formulations.jl\nThe Formulation in the @docs block must have a docstring in src/core/formulations.jl\nThe Variables must have docstrings in src/core/variables.jl \nThe Time Series Paraemters must have docstrings in src/core/paramters.jl","category":"page"},{"location":"model_developer_guide/troubleshooting/#Troubleshooting-model-development","page":"Troubleshooting","title":"Troubleshooting model development","text":"","category":"section"},{"location":"model_developer_guide/adding_new_device_formulation/#Adding-Device-Formulations","page":"Adding Formulations","title":"Adding Device Formulations","text":"","category":"section"},{"location":"modeler_guide/running_a_simulation/#Simulation","page":"Simulation","title":"Simulation","text":"","category":"section"},{"location":"modeler_guide/running_a_simulation/","page":"Simulation","title":"Simulation","text":"tip: Always try to solve the operations problem first before putting together the simulation\nIt is not uncommon that when trying to solve a complex simulation the resulting models are infeasible. This situation can be the result of many factors like the input data, the incorrect specification of the initial conditions for models with time dependencies or a poorly specified model. Therefore, it's highly recommended to run and analyze an Operations Problems that reflect the problems that will be included in a simulation prior to executing a simulation.","category":"page"},{"location":"modeler_guide/running_a_simulation/","page":"Simulation","title":"Simulation","text":"Check out the tutorial","category":"page"},{"location":"modeler_guide/running_a_simulation/#Feedforward","page":"Simulation","title":"Feedforward","text":"","category":"section"},{"location":"modeler_guide/running_a_simulation/","page":"Simulation","title":"Simulation","text":"TODO","category":"page"},{"location":"modeler_guide/running_a_simulation/#Sequencing","page":"Simulation","title":"Sequencing","text":"","category":"section"},{"location":"modeler_guide/running_a_simulation/","page":"Simulation","title":"Simulation","text":"TODO","category":"page"},{"location":"formulation_library/Network/#Network-Formulations","page":"Network","title":"Network Formulations","text":"","category":"section"},{"location":"formulation_library/Network/","page":"Network","title":"Network","text":"TODO","category":"page"},{"location":"formulation_library/Load/#PowerSystems.ElectricLoad-Formulations","page":"Load","title":"PowerSystems.ElectricLoad Formulations","text":"","category":"section"},{"location":"formulation_library/Load/","page":"Load","title":"Load","text":"Valid DeviceModels for subtypes of ElectricLoad include the following:","category":"page"},{"location":"formulation_library/Load/","page":"Load","title":"Load","text":"using PowerSimulations\nusing PowerSystems\nusing DataFrames\nusing Latexify\ncombos = PowerSimulations.generate_device_formulation_combinations()\nfilter!(x -> x[\"device_type\"] <: ElectricLoad, combos)\ncombo_table = DataFrame(\n    \"Valid DeviceModel\" => [\"`DeviceModel($(c[\"device_type\"]), $(c[\"formulation\"]))`\" for c in combos],\n    \"Device Type\" => [\"[$(c[\"device_type\"])](https://nrel-siip.github.io/PowerSystems.jl/stable/model_library/generated_$(c[\"device_type\"])/)\" for c in combos],\n    \"Formulation\" => [\"[$(c[\"formulation\"])](@ref)\" for c in combos],\n    )\nmdtable(combo_table, latex = false)","category":"page"},{"location":"formulation_library/Load/","page":"Load","title":"Load","text":"","category":"page"},{"location":"formulation_library/Load/#StaticPowerLoad","page":"Load","title":"StaticPowerLoad","text":"","category":"section"},{"location":"formulation_library/Load/","page":"Load","title":"Load","text":"StaticPowerLoad","category":"page"},{"location":"formulation_library/Load/#PowerSimulations.StaticPowerLoad","page":"Load","title":"PowerSimulations.StaticPowerLoad","text":"Formulation type to add a time series paraemter for non-dispatchable ElectricLoad withdrawls to power balance constraints\n\n\n\n\n\n","category":"type"},{"location":"formulation_library/Load/","page":"Load","title":"Load","text":"Variables:","category":"page"},{"location":"formulation_library/Load/","page":"Load","title":"Load","text":"No variables are created","category":"page"},{"location":"formulation_library/Load/","page":"Load","title":"Load","text":"Time Series Parameters:","category":"page"},{"location":"formulation_library/Load/","page":"Load","title":"Load","text":"using PowerSimulations\nusing PowerSystems\nusing DataFrames\nusing Latexify\ncombos = PowerSimulations.get_default_time_series_names(ElectricLoad, StaticPowerLoad)\ncombo_table = DataFrame(\n    \"Parameter\" => map(x -> \"[`$x`](@ref)\", collect(keys(combos))),\n    \"Default Time Series Name\" => map(x -> \"`$x`\", collect(values(combos))),\n    )\nmdtable(combo_table, latex = false)","category":"page"},{"location":"formulation_library/Load/","page":"Load","title":"Load","text":"Expressions:","category":"page"},{"location":"formulation_library/Load/","page":"Load","title":"Load","text":"Subtracts the parameters listed above from the respective active and reactive power balance expressions created by the selected Network Formulations","category":"page"},{"location":"formulation_library/Load/","page":"Load","title":"Load","text":"Constraints:","category":"page"},{"location":"formulation_library/Load/","page":"Load","title":"Load","text":"No constraints are created","category":"page"},{"location":"formulation_library/Load/","page":"Load","title":"Load","text":"","category":"page"},{"location":"formulation_library/Load/#PowerLoadInterruption","page":"Load","title":"PowerLoadInterruption","text":"","category":"section"},{"location":"formulation_library/Load/","page":"Load","title":"Load","text":"PowerLoadInterruption","category":"page"},{"location":"formulation_library/Load/#PowerSimulations.PowerLoadInterruption","page":"Load","title":"PowerSimulations.PowerLoadInterruption","text":"Formulation type to enable (binary) load interruptions\n\n\n\n\n\n","category":"type"},{"location":"formulation_library/Load/","page":"Load","title":"Load","text":"Variables:","category":"page"},{"location":"formulation_library/Load/","page":"Load","title":"Load","text":"ActivePowerVariable:\nBounds: [0.0, ]\nDefault initial value: 0.0\nReactivePowerVariable:\nBounds: [0.0, ]\nDefault initial value: 0.0\nOnVariable:\nBounds: {0,1}\nDefault initial value: 1","category":"page"},{"location":"formulation_library/Load/","page":"Load","title":"Load","text":"Time Series Parameters:","category":"page"},{"location":"formulation_library/Load/","page":"Load","title":"Load","text":"using PowerSimulations\nusing PowerSystems\nusing DataFrames\nusing Latexify\ncombos = PowerSimulations.get_default_time_series_names(ElectricLoad, PowerLoadInterruption)\ncombo_table = DataFrame(\n    \"Parameter\" => map(x -> \"[`$x`](@ref)\", collect(keys(combos))),\n    \"Default Time Series Name\" => map(x -> \"`$x`\", collect(values(combos))),\n    )\nmdtable(combo_table, latex = false)","category":"page"},{"location":"formulation_library/Load/","page":"Load","title":"Load","text":"Objective:","category":"page"},{"location":"formulation_library/Load/","page":"Load","title":"Load","text":"Creates an objective function term based on the VariableCost Options where the quantity term is defined as Pg.","category":"page"},{"location":"formulation_library/Load/","page":"Load","title":"Load","text":"Expressions:","category":"page"},{"location":"formulation_library/Load/","page":"Load","title":"Load","text":"Adds Pg and Qg terms and to the respective active and reactive power balance expressions created by the selected Network Formulations\nSubtracts the time series parameters listed above terms from the respective active and reactive power balance expressions created by the selected Network Formulations","category":"page"},{"location":"formulation_library/Load/","page":"Load","title":"Load","text":"Constraints:","category":"page"},{"location":"formulation_library/Load/","page":"Load","title":"Load","text":"Pg and Qg represent the \"unserved\" active and reactive power loads","category":"page"},{"location":"formulation_library/Load/","page":"Load","title":"Load","text":"beginaligned\n  Pg_t le ActivePowerTimeSeriesParameter_t\n  Pg_t - u_t ActivePowerTimeSeriesParameter_t le 0 \n  Qg_t le ReactivePowerTimeSeriesParameter_t\n  Qg_t - u_t ReactivePowerTimeSeriesParameter_tle 0\nendaligned","category":"page"},{"location":"formulation_library/Load/","page":"Load","title":"Load","text":"","category":"page"},{"location":"formulation_library/Load/#PowerLoadDispatch","page":"Load","title":"PowerLoadDispatch","text":"","category":"section"},{"location":"formulation_library/Load/","page":"Load","title":"Load","text":"PowerLoadDispatch","category":"page"},{"location":"formulation_library/Load/#PowerSimulations.PowerLoadDispatch","page":"Load","title":"PowerSimulations.PowerLoadDispatch","text":"Formulation type to enable (continuous) load interruption dispatch\n\n\n\n\n\n","category":"type"},{"location":"formulation_library/Load/","page":"Load","title":"Load","text":"Variables:","category":"page"},{"location":"formulation_library/Load/","page":"Load","title":"Load","text":"ActivePowerVariable:\nBounds: [0.0, ]\nDefault initial value: PowerSystems.get_active_power(device)\nReactivePowerVariable:\nBounds: [0.0, ]\nDefault initial value: PowerSystems.get_reactive_power(device)","category":"page"},{"location":"formulation_library/Load/","page":"Load","title":"Load","text":"Time Series Parameters:","category":"page"},{"location":"formulation_library/Load/","page":"Load","title":"Load","text":"using PowerSimulations\nusing PowerSystems\nusing DataFrames\nusing Latexify\ncombos = PowerSimulations.get_default_time_series_names(ElectricLoad, PowerLoadDispatch)\ncombo_table = DataFrame(\n    \"Parameter\" => map(x -> \"[`$x`](@ref)\", collect(keys(combos))),\n    \"Default Time Series Name\" => map(x -> \"`$x`\", collect(values(combos))),\n    )\nmdtable(combo_table, latex = false)","category":"page"},{"location":"formulation_library/Load/","page":"Load","title":"Load","text":"Objective:","category":"page"},{"location":"formulation_library/Load/","page":"Load","title":"Load","text":"Creates an objective function term based on the VariableCost Options where the quantity term is defined as Pg.","category":"page"},{"location":"formulation_library/Load/","page":"Load","title":"Load","text":"Expressions:","category":"page"},{"location":"formulation_library/Load/","page":"Load","title":"Load","text":"Adds Pg and Qg terms and to the respective active and reactive power balance expressions created by the selected Network Formulations\nSubtracts the time series parameters listed above terms from the respective active and reactive power balance expressions created by the selected Network Formulations","category":"page"},{"location":"formulation_library/Load/","page":"Load","title":"Load","text":"Constraints:","category":"page"},{"location":"formulation_library/Load/","page":"Load","title":"Load","text":"Pg and Qg represent the \"unserved\" active and reactive power loads","category":"page"},{"location":"formulation_library/Load/","page":"Load","title":"Load","text":"beginaligned\n  Pg_t le ActivePowerTimeSeriesParameter_t\n  Qg_t le ReactivePowerTimeSeriesParameter_t\nendaligned","category":"page"},{"location":"#PowerSimulations.jl","page":"Welcome Page","title":"PowerSimulations.jl","text":"","category":"section"},{"location":"","page":"Welcome Page","title":"Welcome Page","text":"CurrentModule = PowerSimulations","category":"page"},{"location":"#Overview","page":"Welcome Page","title":"Overview","text":"","category":"section"},{"location":"","page":"Welcome Page","title":"Welcome Page","text":"PowerSimulations.jl is a power system operations simulation tool developed as a flexible and open source software for quasi-static power systems simulations including Production Cost Models. PowerSimulations.jl tackles the issues of developing a simulation model in a modular way providing tools for the formulation of decision models and emulation models that can be solved independently or in an interconnected fashion.","category":"page"},{"location":"","page":"Welcome Page","title":"Welcome Page","text":"PowerSimulations.jl supports the workflows to develop simulations by separating the development of operations models and simulation models.","category":"page"},{"location":"","page":"Welcome Page","title":"Welcome Page","text":"Operation Models: Optimization model used to find the solution of an operation problem.\nSimulations Models: Defined the requirements to find solutions to a sequence of operation problems in a way that resembles the procedures followed by operators.","category":"page"},{"location":"","page":"Welcome Page","title":"Welcome Page","text":"The most common Simulation Model is the solution of a Unit Commitment and Economic Dispatch sequence of problems. This model is used in commercial Production Cost Modeling tools, but it has a limited scope of analysis.","category":"page"},{"location":"#How-the-documentation-is-structured","page":"Welcome Page","title":"How the documentation is structured","text":"","category":"section"},{"location":"","page":"Welcome Page","title":"Welcome Page","text":"PowerSimulations.jl documentation and code are organized according to the needs of different users depending on their skillset and requirements. In broad terms there are three categories:","category":"page"},{"location":"","page":"Welcome Page","title":"Welcome Page","text":"Modeler: Users that want to solve an operations problem or run a simulation using the existing models in PowerSimulations.jl. For instance, answer questions about the change in operation costs in future fuel mixes. Check the formulations library page to choose a modeling strategy that fits your needs.\nModel Developer: Users that want to develop custom models and workflows for the simulation of a power system operation. For instance, study the impacts of an stochastic optimization problem over a deterministic.\nCode Base Developers: Users that want to add new core functionalities or fix bugs in the core capabilities of PowerSimulations.jl.","category":"page"},{"location":"","page":"Welcome Page","title":"Welcome Page","text":"PowerSimulations.jl is an active project under development, and we welcome your feedback, suggestions, and bug reports.","category":"page"},{"location":"","page":"Welcome Page","title":"Welcome Page","text":"Note: PowerSimulations.jl uses the data model implemented in PowerSystems.jl to construct optimization models. In most cases, you need to add PowerSystems.jl to your scripts.","category":"page"},{"location":"#Installation","page":"Welcome Page","title":"Installation","text":"","category":"section"},{"location":"","page":"Welcome Page","title":"Welcome Page","text":"The latest stable release of PowerModels can be installed using the Julia package manager with","category":"page"},{"location":"","page":"Welcome Page","title":"Welcome Page","text":"] add PowerSimulations","category":"page"},{"location":"","page":"Welcome Page","title":"Welcome Page","text":"For the current development version, \"checkout\" this package with","category":"page"},{"location":"","page":"Welcome Page","title":"Welcome Page","text":"] add PowerSimulations#master","category":"page"},{"location":"","page":"Welcome Page","title":"Welcome Page","text":"An appropriate optimization solver is required for running PowerSimulations models. Refer to JuMP.jl solver's page to select the most appropriate for the application of interest.","category":"page"},{"location":"","page":"Welcome Page","title":"Welcome Page","text":"","category":"page"},{"location":"","page":"Welcome Page","title":"Welcome Page","text":"PowerSystems has been developed as part of the Scalable Integrated Infrastructure Planning (SIIP) initiative at the U.S. Department of Energy's National Renewable Energy Laboratory (NREL).","category":"page"}]
}
