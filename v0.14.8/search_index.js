var documenterSearchIndex = {"docs":
[{"location":"man/simulation_recorder/#Simulation-Recorder","page":"Simulation Recorder","title":"Simulation Recorder","text":"","category":"section"},{"location":"man/simulation_recorder/","page":"Simulation Recorder","title":"Simulation Recorder","text":"PowerSimulations provides the ability to record structured data as events during a simulation. These events can be post-processed to help debug problems.","category":"page"},{"location":"man/simulation_recorder/","page":"Simulation Recorder","title":"Simulation Recorder","text":"By default only SimulationStepEvent and ProblemExecutionEvent are recorded.  Here is an example.","category":"page"},{"location":"man/simulation_recorder/","page":"Simulation Recorder","title":"Simulation Recorder","text":"Suppose a simulation is run in the directory ./output.","category":"page"},{"location":"man/simulation_recorder/","page":"Simulation Recorder","title":"Simulation Recorder","text":"Assume that setup commands have been run:","category":"page"},{"location":"man/simulation_recorder/","page":"Simulation Recorder","title":"Simulation Recorder","text":"using PowerSimulations\nconst PSI = PowerSimulations","category":"page"},{"location":"man/simulation_recorder/","page":"Simulation Recorder","title":"Simulation Recorder","text":"Note that for all functions below you can optionally specify a function to filter events. The function must accept the event type and return true or false.","category":"page"},{"location":"man/simulation_recorder/#Show-all-events-of-type-PSI.SimulationStepEvent","page":"Simulation Recorder","title":"Show all events of type PSI.SimulationStepEvent","text":"","category":"section"},{"location":"man/simulation_recorder/","page":"Simulation Recorder","title":"Simulation Recorder","text":"julia> show_simulation_events(PSI.SimulationStepEvent, \"./output/aggregation/1\")\n┌─────────────────────┬─────────────────────┬──────┬────────┐\n│                name │     simulation_time │ step │ status │\n├─────────────────────┼─────────────────────┼──────┼────────┤\n│ SimulationStepEvent │ 2024-01-01T00:00:00 │    1 │  start │\n│ SimulationStepEvent │ 2024-01-01T23:00:00 │    1 │   done │\n│ SimulationStepEvent │ 2024-01-01T23:00:00 │    2 │  start │\n│ SimulationStepEvent │ 2024-01-02T23:00:00 │    2 │   done │\n└─────────────────────┴─────────────────────┴──────┴────────┘","category":"page"},{"location":"man/simulation_recorder/#Show-events-of-type-PSI.ProblemExecutionEvent-for-a-specific-step-and-stage.","page":"Simulation Recorder","title":"Show events of type PSI.ProblemExecutionEvent for a specific step and stage.","text":"","category":"section"},{"location":"man/simulation_recorder/","page":"Simulation Recorder","title":"Simulation Recorder","text":"show_simulation_events(\n    PSI.ProblemExecutionEvent,\n    \"./output/aggregation/1\",\n    x -> x.step == 1 && x.stage == 2 && x.status == \"start\"\n)\n┌──────────────────────┬─────────────────────┬──────┬───────┬────────┐\n│                 name │     simulation_time │ step │ stage │ status │\n├──────────────────────┼─────────────────────┼──────┼───────┼────────┤\n│ ProblemExecutionEvent │ 2024-01-01T00:00:00 │    1 │     2 │  start │\n│ ProblemExecutionEvent │ 2024-01-01T00:00:00 │    1 │     2 │  start │\n│ ProblemExecutionEvent │ 2024-01-01T01:00:00 │    1 │     2 │  start │\n│ ProblemExecutionEvent │ 2024-01-01T02:00:00 │    1 │     2 │  start │\n│ ProblemExecutionEvent │ 2024-01-01T03:00:00 │    1 │     2 │  start │\n│ ProblemExecutionEvent │ 2024-01-01T04:00:00 │    1 │     2 │  start │\n│ ProblemExecutionEvent │ 2024-01-01T05:00:00 │    1 │     2 │  start │\n│ ProblemExecutionEvent │ 2024-01-01T06:00:00 │    1 │     2 │  start │\n│ ProblemExecutionEvent │ 2024-01-01T07:00:00 │    1 │     2 │  start │\n│ ProblemExecutionEvent │ 2024-01-01T08:00:00 │    1 │     2 │  start │\n│ ProblemExecutionEvent │ 2024-01-01T09:00:00 │    1 │     2 │  start │\n│ ProblemExecutionEvent │ 2024-01-01T10:00:00 │    1 │     2 │  start │\n│ ProblemExecutionEvent │ 2024-01-01T11:00:00 │    1 │     2 │  start │\n│ ProblemExecutionEvent │ 2024-01-01T12:00:00 │    1 │     2 │  start │\n│ ProblemExecutionEvent │ 2024-01-01T13:00:00 │    1 │     2 │  start │\n│ ProblemExecutionEvent │ 2024-01-01T14:00:00 │    1 │     2 │  start │\n│ ProblemExecutionEvent │ 2024-01-01T15:00:00 │    1 │     2 │  start │\n│ ProblemExecutionEvent │ 2024-01-01T16:00:00 │    1 │     2 │  start │\n│ ProblemExecutionEvent │ 2024-01-01T17:00:00 │    1 │     2 │  start │\n│ ProblemExecutionEvent │ 2024-01-01T18:00:00 │    1 │     2 │  start │\n│ ProblemExecutionEvent │ 2024-01-01T19:00:00 │    1 │     2 │  start │\n│ ProblemExecutionEvent │ 2024-01-01T20:00:00 │    1 │     2 │  start │\n│ ProblemExecutionEvent │ 2024-01-01T21:00:00 │    1 │     2 │  start │\n│ ProblemExecutionEvent │ 2024-01-01T22:00:00 │    1 │     2 │  start │\n└──────────────────────┴─────────────────────┴──────┴───────┴────────┘","category":"page"},{"location":"man/simulation_recorder/#Enable-other-recorder-events","page":"Simulation Recorder","title":"Enable other recorder events","text":"","category":"section"},{"location":"man/simulation_recorder/","page":"Simulation Recorder","title":"Simulation Recorder","text":"Other types of recorder events can be enabled with a possible performance impact. To do this pass in the specific recorder names to be enabled when you call build.","category":"page"},{"location":"man/simulation_recorder/","page":"Simulation Recorder","title":"Simulation Recorder","text":"sim = Simulation(...)\nrecorders = [:simulation]\nbuild!(sim; recorders = recorders)\nexecute!(sim)","category":"page"},{"location":"man/simulation_recorder/","page":"Simulation Recorder","title":"Simulation Recorder","text":"Now we can examine InitialConditionUpdateEvents for specific steps and stages.","category":"page"},{"location":"man/simulation_recorder/","page":"Simulation Recorder","title":"Simulation Recorder","text":"show_simulation_events(\n    PSI.InitialConditionUpdateEvent,\n    \"./output/aggregation/1\",\n    x -> x.initial_condition_type == \"DeviceStatus\";\n    step = 2,\n    stage = 1\n)\n┌─────────────────────────────┬─────────────────────┬────────────────────────┬─────────────────┬─────────────┬─────┬──────────────┐\n│                        name │     simulation_time │ initial_condition_type │     device_type │ device_name │ val │ stage_number │\n├─────────────────────────────┼─────────────────────┼────────────────────────┼─────────────────┼─────────────┼─────┼──────────────┤\n│ InitialConditionUpdateEvent │ 2024-01-02T00:00:00 │           DeviceStatus │ ThermalStandard │    Solitude │ 0.0 │            1 │\n│ InitialConditionUpdateEvent │ 2024-01-02T00:00:00 │           DeviceStatus │ ThermalStandard │   Park City │ 1.0 │            1 │\n│ InitialConditionUpdateEvent │ 2024-01-02T00:00:00 │           DeviceStatus │ ThermalStandard │        Alta │ 1.0 │            1 │\n│ InitialConditionUpdateEvent │ 2024-01-02T00:00:00 │           DeviceStatus │ ThermalStandard │    Brighton │ 1.0 │            1 │\n│ InitialConditionUpdateEvent │ 2024-01-02T00:00:00 │           DeviceStatus │ ThermalStandard │    Sundance │ 0.0 │            1 │\n└─────────────────────────────┴─────────────────────┴────────────────────────┴─────────────────┴─────────────┴─────┴──────────────┘","category":"page"},{"location":"man/simulation_recorder/#Show-the-wall-time-with-your-events","page":"Simulation Recorder","title":"Show the wall time with your events","text":"","category":"section"},{"location":"man/simulation_recorder/","page":"Simulation Recorder","title":"Simulation Recorder","text":"Sometimes you might want to see how the events line up with the wall time.","category":"page"},{"location":"man/simulation_recorder/","page":"Simulation Recorder","title":"Simulation Recorder","text":"show_simulation_events(\n    PSI.InitialConditionUpdateEvent,\n    \"./output/aggregation/1\",\n    x -> x.initial_condition_type == \"DeviceStatus\";\n    step = 2,\n    stage = 1,\n    wall_time = true\n)\n┌─────────────────────────┬─────────────────────────────┬─────────────────────┬────────────────────────┬─────────────────┬─────────────┬─────┬──────────────┐\n│               timestamp │                        name │     simulation_time │ initial_condition_type │     device_type │ device_name │ val │ stage_number │\n├─────────────────────────┼─────────────────────────────┼─────────────────────┼────────────────────────┼─────────────────┼─────────────┼─────┼──────────────┤\n│ 2020-04-07T15:08:32.711 │ InitialConditionUpdateEvent │ 2024-01-02T00:00:00 │           DeviceStatus │ ThermalStandard │    Solitude │ 0.0 │            1 │\n│ 2020-04-07T15:08:32.711 │ InitialConditionUpdateEvent │ 2024-01-02T00:00:00 │           DeviceStatus │ ThermalStandard │   Park City │ 1.0 │            1 │\n│ 2020-04-07T15:08:32.711 │ InitialConditionUpdateEvent │ 2024-01-02T00:00:00 │           DeviceStatus │ ThermalStandard │        Alta │ 1.0 │            1 │\n│ 2020-04-07T15:08:32.711 │ InitialConditionUpdateEvent │ 2024-01-02T00:00:00 │           DeviceStatus │ ThermalStandard │    Brighton │ 1.0 │            1 │\n│ 2020-04-07T15:08:32.711 │ InitialConditionUpdateEvent │ 2024-01-02T00:00:00 │           DeviceStatus │ ThermalStandard │    Sundance │ 0.0 │            1 │\n└─────────────────────────┴─────────────────────────────┴─────────────────────┴────────────────────────┴─────────────────┴─────────────┴─────┴──────────────┘","category":"page"},{"location":"api/PowerSimulations/#PowerSimulations","page":"PowerSimulations","title":"PowerSimulations","text":"","category":"section"},{"location":"api/PowerSimulations/","page":"PowerSimulations","title":"PowerSimulations","text":"CurrentModule = PowerSimulations\nDocTestSetup  = quote\n    using PowerSimulations\nend","category":"page"},{"location":"api/PowerSimulations/","page":"PowerSimulations","title":"PowerSimulations","text":"API documentation","category":"page"},{"location":"api/PowerSimulations/","page":"PowerSimulations","title":"PowerSimulations","text":"Pages = [\"PowerSimulations.md\"]","category":"page"},{"location":"api/PowerSimulations/#Index","page":"PowerSimulations","title":"Index","text":"","category":"section"},{"location":"api/PowerSimulations/","page":"PowerSimulations","title":"PowerSimulations","text":"Pages = [\"PowerSimulations.md\"]","category":"page"},{"location":"api/PowerSimulations/#Exported","page":"PowerSimulations","title":"Exported","text":"","category":"section"},{"location":"api/PowerSimulations/","page":"PowerSimulations","title":"PowerSimulations","text":"Modules = [PowerSimulations]\nPrivate = false","category":"page"},{"location":"api/PowerSimulations/#PowerSimulations.AGCReserveDeployment-Tuple{System}","page":"PowerSimulations","title":"PowerSimulations.AGCReserveDeployment","text":"AGCReserveDeployment(system::PSY.System; kwargs...)\n\nCreates an OperationsProblemTemplate with default DeviceModels for an AGC Reserve Deplyoment Problem. Uses the template to create an OperationsProblem.\n\nExample\n\nagc_problem = AGCReserveDeployment(system)\n\nAccepted Key Words\n\nKey word arguments supported by OperationsProblem\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.DeviceModel","page":"PowerSimulations","title":"PowerSimulations.DeviceModel","text":"Establishes the model for a particular device specified by type. Uses the keyword argument feedforward to enable passing values between operation model at simulation time\n\nArguments\n\n-::Type{D}: Power System Device Type -::Type{B}: Abstract Device Formulation\n\nAccepted Key Words\n\nfeedforward::Array{<:AbstractAffectFeedForward} : use to pass parameters between models\n\nExample\n\nthermal_gens = DeviceModel(ThermalStandard, ThermalBasicUnitCommitment),\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSimulations/#PowerSimulations.EconomicDispatchProblem-Tuple{System}","page":"PowerSimulations","title":"PowerSimulations.EconomicDispatchProblem","text":"EconomicDispatchProblem(system::PSY.System; kwargs...)\n\nCreates an OperationsProblemTemplate with default DeviceModels for an EconomicDispatch problem. Uses the template to create an OperationsProblem.\n\nExample\n\ned_problem = EconomicDispatchProblem(system)\n\nAccepted Key Words\n\nnetwork::Type{<:PM.AbstractPowerModel} : override default network model settings\ndevices::Dict{String, DeviceModel} : override default DeviceModel settings\nservices::Dict{String, ServiceModel} : override default ServiceModel settings\nKey word arguments supported by OperationsProblem\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.FixedOutput","page":"PowerSimulations","title":"PowerSimulations.FixedOutput","text":"Formulation that fixes the injection values of devices\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSimulations/#PowerSimulations.GenericOpProblem","page":"PowerSimulations","title":"PowerSimulations.GenericOpProblem","text":"Default PowerSimulations Operation Problem Type\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSimulations/#PowerSimulations.IntraProblemChronology","page":"PowerSimulations","title":"PowerSimulations.IntraProblemChronology","text":"InterProblemChronology()\n\nType struct to select an information sharing model between stages that uses results from the same recent stage to calculate the initial conditions. This model ignores solutions from stages defined finer resolutions.\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSimulations/#PowerSimulations.OperationsProblem","page":"PowerSimulations","title":"PowerSimulations.OperationsProblem","text":"OperationsProblem(::Type{M},\ntemplate::OperationsProblemTemplate,\nsys::PSY.System,\njump_model::Union{Nothing, JuMP.Model}=nothing;\nkwargs...) where {M<:AbstractOperationsProblem,\n                  T<:PM.AbstractPowerFormulation}\n\nThis builds the optimization problem of type M with the specific system and template.\n\nArguments\n\n::Type{M} where M<:AbstractOperationsProblem: The abstract operation model type\ntemplate::OperationsProblemTemplate: The model reference made up of transmission, devices,                                         branches, and services.\nsys::PSY.System: the system created using Power Systems\njump_model::Union{Nothing, JuMP.Model}: Enables passing a custom JuMP model. Use with care\n\nOutput\n\nproblem::OperationsProblem: The operation model containing the model type, built JuMP model, Power\n\nSystems system.\n\nExample\n\ntemplate = OperationsProblemTemplate(CopperPlatePowerModel, devices, branches, services)\nOpModel = OperationsProblem(MockOperationProblem, template, system)\n\nAccepted Key Words\n\noptimizer: The optimizer that will be used in the optimization model.\nPTDF::PTDF: Passes the PTDF matrix into the optimization model for StandardPTDFModel networks.\nhorizon::Int: Manually specify the length of the forecast Horizon\nwarm_start::Bool: True will use the current operation point in the system to initialize variable values. False initializes all variables to zero. Default is true\nbalance_slack_variables::Bool: True will add slacks to the system balance constraints\nservices_slack_variables::Bool: True will add slacks to the services requirement constraints\nconstraint_duals::Vector{Symbol}: Vector with the duals to query from the optimization model\nsystem_to_file::Bool:: True to create a copy of the system used in the model. Default true.\nexport_pwl_vars::Bool: True to export all the pwl intermediate variables. It can slow down significantly the solve time. Default to false.\nallow_fails::Bool: True to allow the simulation to continue even if the optimization step fails. Use with care, default to false.\noptimizer_log_print::Bool: True to print the optimizer solve log. Default to false.\ndirect_mode_optimizer::Bool True to use the solver in direct mode. Creates a JuMP.direct_model. Default to false.\nuse_parameters::Bool: True will substitute will implement formulations using ParameterJuMP parameters. Default is false.\nuse_forecast_data::Bool: If true uses the data in the system forecasts. If false uses the data for current operating point in the system.\ninitial_time::Dates.DateTime: Initial Time for the model solve\ntime_series_cache_size::Int: Size in bytes to cache for each time array. Default is 1 MiB. Set to 0 to disable.\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSimulations/#PowerSimulations.OperationsProblem-Tuple{AbstractString}","page":"PowerSimulations","title":"PowerSimulations.OperationsProblem","text":"OperationsProblem(filename::AbstractString)\n\nConstruct an OperationsProblem from a serialized file.\n\nArguments\n\nfilename::AbstractString: path to serialized file\njump_model::Union{Nothing, JuMP.Model} = nothing: The JuMP model does not get  serialized. Callers should pass whatever they passed to the original problem.\noptimizer::Union{Nothing,MOI.OptimizerWithAttributes} = nothing: The optimizer does  not get serialized. Callers should pass whatever they passed to the original problem.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.OperationsProblem-Union{Tuple{M}, Tuple{Type{M}, OperationsProblemTemplate, System}, Tuple{Type{M}, OperationsProblemTemplate, System, Union{Nothing, JuMP.Model}}} where M<:PowerSimulations.AbstractOperationsProblem","page":"PowerSimulations","title":"PowerSimulations.OperationsProblem","text":"OperationsProblem(::Type{M},\ntemplate::OperationsProblemTemplate,\nsys::PSY.System,\noptimizer::MOI.OptimizerWithAttributes,\njump_model::Union{Nothing, JuMP.Model}=nothing;\nkwargs...) where {M<:AbstractOperationsProblem}\n\nThis builds the optimization problem of type M with the specific system and template\n\nArguments\n\n::Type{M} where M<:AbstractOperationsProblem: The abstract operation model type\ntemplate::OperationsProblemTemplate: The model reference made up of transmission, devices,                                         branches, and services.\nsys::PSY.System: the system created using Power Systems\njump_model::Union{Nothing, JuMP.Model}: Enables passing a custom JuMP model. Use with care\n\nOutput\n\nStage::OperationsProblem: The operation model containing the model type, unbuilt JuMP model, Power\n\nSystems system.\n\nExample\n\ntemplate = OperationsProblemTemplate(CopperPlatePowerModel, devices, branches, services)\nproblem = OperationsProblem(MyOpProblemType template, system, optimizer)\n\nAccepted Key Words\n\ninitial_time::Dates.DateTime: Initial Time for the model solve\nPTDF::PTDF: Passes the PTDF matrix into the optimization model for StandardPTDFModel networks.\nwarm_start::Bool True will use the current operation point in the system to initialize variable values. False initializes all variables to zero. Default is true\nbalance_slack_variables::Bool True will add slacks to the system balance constraints\nservices_slack_variables::Bool True will add slacks to the services requirement constraints\nexport_pwl_vars::Bool True will write the results of the piece-wise-linear intermediate variables. Slows down the simulation process significantly\nallow_fails::Bool True will allow the simulation to continue if the optimizer can't find a solution. Use with care, can lead to unwanted behaviour or results\noptimizer_log_print::Bool Uses JuMP.unset_silent() to print the optimizer's log. By default all solvers are set to MOI.Silent()\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.OperationsProblemTemplate","page":"PowerSimulations","title":"PowerSimulations.OperationsProblemTemplate","text":"OperationsProblemTemplate(::Type{T}) where {T<:PM.AbstractPowerFormulation}\n\nCreates a model reference of the PowerSimulations Optimization Problem.\n\nArguments\n\nmodel::Type{T<:PM.AbstractPowerFormulation}:\n\nExample\n\ntemplate = OperationsProblemTemplate(CopperPlatePowerModel)\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSimulations/#PowerSimulations.RecedingHorizon","page":"PowerSimulations","title":"PowerSimulations.RecedingHorizon","text":"RecedingHorizon(period::Int)\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSimulations/#PowerSimulations.ServiceModel","page":"PowerSimulations","title":"PowerSimulations.ServiceModel","text":"Establishes the model for a particular services specified by type. Uses the keyword argument use_service_name to assign the model to a service with the same name as the label in the template. Uses the keyword argument feedforward to enable passing values between operation model at simulation time\n\nArguments\n\n-::Type{D}: Power System Service Type -::Type{B}: Abstract Service Formulation\n\nAccepted Key Words\n\nfeedforward::Array{<:AbstractAffectFeedForward} : use to pass parameters between models\nuse_service_name::Bool : use the label as the name for the service\n\nExample\n\nreserves = ServiceModel(PSY.VariableReserve{PSY.ReserveUp}, RangeReserve)\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSimulations/#PowerSimulations.Simulation","page":"PowerSimulations","title":"PowerSimulations.Simulation","text":"Simulation(steps::Int\n            problems::Dict{String, OperationsProblem{<:AbstractOperationsProblem}}\n            sequence::Union{Nothing, SimulationSequence}\n            simulation_folder::String\n            name::String\n            internal::Union{Nothing, SimulationInternal}\n            )\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSimulations/#PowerSimulations.Simulation-Tuple{AbstractString, Dict}","page":"PowerSimulations","title":"PowerSimulations.Simulation","text":"Simulation(directory::AbstractString)\n\nConstructs Simulation from a serialized directory. Callers should pass any kwargs here that they passed to the original Simulation.\n\nArguments\n\ndirectory::AbstractString: the directory returned from the call to serialize\nproblem_info::Dict: Two-level dictionary containing problem parameters that cannot be serialized. The outer dict should be keyed by the problem name. The inner dict must contain 'optimizer' and may contain 'jump_model'. These should be the same values used for the original simulation.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.SimulationProblems","page":"PowerSimulations","title":"PowerSimulations.SimulationProblems","text":"Stores the OperationProblem definitions to be used in the simulation. When creating the SimulationProblems, the order in which the problems are created determines the order on which the simulation is executed.\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSimulations/#PowerSimulations.SimulationResults","page":"PowerSimulations","title":"PowerSimulations.SimulationResults","text":"Construct SimulationResults from a simulation output directory.\n\nArguments\n\npath::AbstractString: Simulation output directory\nexecution::AbstractString: Execution number. Default is the most recent.\nignore_status::Bool: If true, return results even if the simulation failed.\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSimulations/#PowerSimulations.SimulationResults-Tuple{Simulation}","page":"PowerSimulations","title":"PowerSimulations.SimulationResults","text":"Construct SimulationResults from a simulation.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.SimulationSequence","page":"PowerSimulations","title":"PowerSimulations.SimulationSequence","text":"SimulationSequence(horizons::Dict{String, Int}\n                    step_resolution::Dates.TimePeriod\n                    intervals::Dict{String, <:Tuple{<:Dates.TimePeriod, <:FeedForwardChronology}}\n                    order::Dict{Int, String}\n                    feedforward_chronologies::Dict{Pair{String, String}, <:FeedForwardChronology}\n                    feedforward::Dict{Tuple{String, Symbol, Symbol}, <:AbstractAffectFeedForward}\n                    ini_cond_chronology::Dict{String, <:FeedForwardChronology}\n                    cache::Dict{String, AbstractCache}\n                    )\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSimulations/#PowerSimulations.StaticBranch","page":"PowerSimulations","title":"PowerSimulations.StaticBranch","text":"Branch type to add unbounded flow variables and use flow constraints\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSimulations/#PowerSimulations.StaticBranchBounds","page":"PowerSimulations","title":"PowerSimulations.StaticBranchBounds","text":"Branch type to add bounded flow variables and use flow constraints\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSimulations/#PowerSimulations.StaticBranchUnbounded","page":"PowerSimulations","title":"PowerSimulations.StaticBranchUnbounded","text":"Branch type to avoid flow constraints\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSimulations/#PowerSimulations.Synchronize","page":"PowerSimulations","title":"PowerSimulations.Synchronize","text":"Synchronize(periods::Int)\n\nDefines the co-ordination of time between Two problems.\n\nArguments\n\nperiods::Int: Number of time periods to grab data from\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSimulations/#PowerSimulations.TimeStatusChange","page":"PowerSimulations","title":"PowerSimulations.TimeStatusChange","text":"Tracks the last time status of a device changed in a simulation\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSimulations/#PowerSimulations.UnitCommitmentProblem-Tuple{System}","page":"PowerSimulations","title":"PowerSimulations.UnitCommitmentProblem","text":"UnitCommitmentProblem(system::PSY.System; kwargs...)\n\nCreates an OperationsProblemTemplate with default DeviceModels for a Unit Commitment problem. Uses the template to create an OperationsProblem.\n\nExample\n\nuc_problem = UnitCommitmentProblem(system)\n\nAccepted Key Words\n\nnetwork::Type{<:PM.AbstractPowerModel} : override default network model settings\ndevices::Dict{String, DeviceModel} : override default DeviceModel settings\nservices::Dict{String, ServiceModel} : override default ServiceModel settings\nKey word arguments supported by OperationsProblem\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.build!-Tuple{OperationsProblem{var\"#s306\"} where var\"#s306\"<:PowerSimulations.AbstractOperationsProblem}","page":"PowerSimulations","title":"PowerSimulations.build!","text":"Implementation of build for any OperationsProblem\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.build!-Tuple{Simulation}","page":"PowerSimulations","title":"PowerSimulations.build!","text":"build!(sim::Simulation)\n\nBuild the Simulation, problems and the related folder structure\n\nArguments\n\nsim::Simulation: simulation object\noutput_dir = nothing: Name of the output directory for the simulation. If nothing, the  folder will have the same name as the simulation\nserialize::Bool = true: serializes the simulation objects in the simulation\nrecorders::Vector{Symbol} = []: recorder names to register\nconsole_level = Logging.Error:\nfile_level = Logging.Info:\n\nThrows an exception if label is passed and the directory already exists.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.execute!-Tuple{Simulation}","page":"PowerSimulations","title":"PowerSimulations.execute!","text":"execute!(sim::Simulation; kwargs...)\n\nSolves the simulation model for sequential Simulations.\n\nArguments\n\nsim::Simulation=sim: simulation object created by Simulation()\n\nThe optional keyword argument exports controls exporting of results to CSV files as the simulation runs. Refer to export_results for a description of this argument.\n\nExample\n\nsim = Simulation(\"Test\", 7, problems, \"/Users/folder\")\nexecute!(sim::Simulation; kwargs...)\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.export_results-Tuple{ProblemResults}","page":"PowerSimulations","title":"PowerSimulations.export_results","text":"Exports all results from the operations problem.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.export_results-Tuple{SimulationResults, Any}","page":"PowerSimulations","title":"PowerSimulations.export_results","text":"Export results to files in the results directory.\n\nArguments\n\nresults::SimulationResults: simulation results\nexports: SimulationResultsExport or anything that can be passed to its constructor. (such as Dict or path to JSON file)\n\nAn example JSON file demonstrating possible options is below. Note that start_time, end_time, path, and format are optional.\n\n{\n  \"problems\": [\n    {\n      \"name\": \"ED\",\n      \"variables\": [\n        \"P__ThermalStandard\",\n        \"E__HydroEnergyReservoir\"\n      ],\n      \"parameters\": [\n        \"all\"\n      ]\n    },\n    {\n      \"name\": \"UC\",\n      \"variables\": [\n        \"On__ThermalStandard\"\n      ],\n      \"parameters\": [\n        \"all\"\n      ],\n      \"duals\": [\n        \"all\"\n      ]\n    }\n  ],\n  \"start_time\": \"2020-01-01T04:00:00\",\n  \"end_time\": null,\n  \"path\": null,\n  \"format\": \"csv\"\n}\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.get_all_constraint_index-Tuple{OperationsProblem}","page":"PowerSimulations","title":"PowerSimulations.get_all_constraint_index","text":"\"Each Tuple corresponds to (conname, internalindex, moi_index)\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.get_all_var_index-Tuple{OperationsProblem}","page":"PowerSimulations","title":"PowerSimulations.get_all_var_index","text":"\"Each Tuple corresponds to (conname, internalindex, moi_index)\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.get_system!-Tuple{PowerSimulations.SimulationProblemResults}","page":"PowerSimulations","title":"PowerSimulations.get_system!","text":"Return the system used for the problem. If the system hasn't already been deserialized or set with set_system! then deserialize and store it.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.list_problems-Tuple{PowerSimulations.HdfSimulationStore}","page":"PowerSimulations","title":"PowerSimulations.list_problems","text":"Return the problem names in order of execution.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.list_problems-Tuple{SimulationResults}","page":"PowerSimulations","title":"PowerSimulations.list_problems","text":"Return the problem names in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.list_simulation_events-Union{Tuple{T}, Tuple{Type{T}, AbstractString}, Tuple{Type{T}, AbstractString, Union{Nothing, Function}}} where T<:InfrastructureSystems.AbstractRecorderEvent","page":"PowerSimulations","title":"PowerSimulations.list_simulation_events","text":"list_simulation_events(\n    ::Type{T},\n    output_dir::AbstractString,\n    filter_func::Union{Nothing, Function} = nothing;\n    step = nothing,\n    problem = nothing,\n) where {T <: IS.AbstractRecorderEvent}\n\nList simulation events of type T in a simulation output directory.\n\nArguments\n\noutput_dir::AbstractString: Simulation output directory\nfilter_func::Union{Nothing, Function} = nothing: Refer to show_simulation_events.\nstep::Int = nothing: Filter events by step. Required if problem is passed.\nproblem::Int = nothing: Filter events by problem.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.load_results!-Tuple{PowerSimulations.SimulationProblemResults, Int64}","page":"PowerSimulations","title":"PowerSimulations.load_results!","text":"Loads the simulation results into memory for repeated reads. Running this function twice\noverwrites the previously loaded results. This is useful when loading results from remote\nlocations over network connections\n\n# Required Key Words\n- `initial_time::Dates.DateTime` : initial of the requested results\n- `count::Int`: Number of results\n# Accepted Key Words\n- `variables::Vector{Symbol}`: Variables names to load into results\n- `duals::Vector{Symbol}`: Dual names to load into results\n- `parameters::Vector{Symbol}`: Parameter names to load into results\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.read_dual-Tuple{PowerSimulations.SimulationProblemResults, Symbol}","page":"PowerSimulations","title":"PowerSimulations.read_dual","text":"Returns the values for the requested dual name. It keeps requests when performing multiple retrievals. Accepts a dual name to return the result.\n# Accepted Key Words\n- `initial_time::Dates.DateTime` : initial of the requested results\n- `count::Int`: Number of results\n- `store::SimulationStore`: a store that has been opened for reading\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.read_duals-Tuple{PowerSimulations.SimulationProblemResults}","page":"PowerSimulations","title":"PowerSimulations.read_duals","text":"Returns the values for the requested dual names. It must match the duals requested in the simulation problem definition.\nIt keeps requests when performing multiple retrievals. Accepts a vector of names for the return of the values\n\n# Accepted Key Words\n- `names::Vector{Symbol}` : names of desired results\n- `initial_time::Dates.DateTime` : initial of the requested results\n- `count::Int`: Number of results\n- `store::SimulationStore`: a store that has been opened for reading\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.read_optimizer_stats-Tuple{PowerSimulations.SimulationProblemResults}","page":"PowerSimulations","title":"PowerSimulations.read_optimizer_stats","text":"Returns the optimizer stats for the problem as a DataFrame.\n\nAccepted keywords\n\nstore::SimulationStore: a store that has been opened for reading\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.read_parameter-Tuple{PowerSimulations.SimulationProblemResults, Symbol}","page":"PowerSimulations","title":"PowerSimulations.read_parameter","text":"Returns the values for the requested parameter name. It keeps requests when performing multiple retrievals. Accepts a parameter name to return the result.\n# Accepted Key Words\n- `initial_time::Dates.DateTime` : initial of the requested results\n- `count::Int`: Number of results\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.read_parameters-Tuple{PowerSimulations.SimulationProblemResults}","page":"PowerSimulations","title":"PowerSimulations.read_parameters","text":"Returns the values for the parameters used in the simulation. It keeps requests when performing multiple retrievals. Accepts a vector of names for the return of the values\n\n# Accepted Key Words\n- `names::Vector{Symbol}` : names of desired results\n- `initial_time::Dates.DateTime` : initial time of the requested results\n- `count::Int`: Number of results\n- `store::SimulationStore`: a store that has been opened for reading\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.read_realized_duals-Tuple{PowerSimulations.SimulationProblemResults}","page":"PowerSimulations","title":"PowerSimulations.read_realized_duals","text":"Returns the final values for the requested dual names for each time step for a problem.\nAccepts a vector of names for the return of the values. If the time stamps and names are\nloaded using the [load_results!](@ref) function it will read from memory.\n\n# Accepted Key Words\n- `names::Vector{Symbol}` : names of desired results\n- `initial_time::Dates.DateTime` : initial time of the requested results\n- `len::Int`: length of results\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.read_realized_parameters-Tuple{PowerSimulations.SimulationProblemResults}","page":"PowerSimulations","title":"PowerSimulations.read_realized_parameters","text":"Returns the final values for the requested parameter names for each time step for a problem.\nAccepts a vector of names for the return of the values. If the time stamps and names are\nloaded using the [load_results!](@ref) function it will read from memory.\n\n# Accepted Key Words\n- `names::Vector{Symbol}` : names of desired results\n- `initial_time::Dates.DateTime` : initial time of the requested results\n- `len::Int`: length of results\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.read_realized_variables-Tuple{PowerSimulations.SimulationProblemResults}","page":"PowerSimulations","title":"PowerSimulations.read_realized_variables","text":"Returns the final values for the requested variable names for each time step for a problem.\nAccepts a vector of names for the return of the values. If the time stamps and names are\nloaded using the [load_results!](@ref) function it will read from memory.\n\n# Accepted Key Words\n- `names::Vector{Symbol}` : names of desired results\n- `initial_time::Dates.DateTime` : initial time of the requested results\n- `len::Int`: length of results\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.read_variable-Tuple{PowerSimulations.SimulationProblemResults, Symbol}","page":"PowerSimulations","title":"PowerSimulations.read_variable","text":"Returns the values for the requested variable name. It keeps requests when performing multiple retrievals. Accepts a variable name to return the result.\n\n# Accepted Key Words\n- `initial_time::Dates.DateTime` : initial of the requested results\n- `count::Int`: Number of results\n- `store::SimulationStore`: a store that has been opened for reading\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.read_variables-Tuple{PowerSimulations.SimulationProblemResults}","page":"PowerSimulations","title":"PowerSimulations.read_variables","text":"Returns the values for the requested variable names. Accepts a vector of names for the\nreturn of the values. If the time stamps and names are loaded using the [load_results!](@ref)\nfunction it will read from memory.\n\n# Accepted Key Words\n- `names::Vector{Symbol}` : names of desired results\n- `initial_time::Dates.DateTime` : initial of the requested results\n- `count::Int`: Number of results\n- `store::SimulationStore`: a store that has been opened for reading\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.run_economic_dispatch-Tuple{System}","page":"PowerSimulations","title":"PowerSimulations.run_economic_dispatch","text":"run_economic_dispatch(system::PSY.System; kwargs...)\n\nCreates an OperationsProblemTemplate with default DeviceModels for an EconomicDispatch problem. Uses the template to create an OperationsProblem.\n\nExample\n\nresults = run_economic_dispatch(system; optimizer = optimizer)\n\nAccepted Key Words\n\nnetwork::Type{<:PM.AbstractPowerModel} : override default network model settings\ndevices::Dict{String, DeviceModel} : override default DeviceModel settings\nservices::Dict{String, ServiceModel} : override default ServiceModel settings\noptimizer::JuMP optimizer : a JuMP optimizer is a required key word\noutput_dir::AbstractString  : Path to save outputs\nKey word arguments supported by OperationsProblem\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.serialize_optimization_model-Tuple{PowerSimulations.OptimizationContainer, String}","page":"PowerSimulations","title":"PowerSimulations.serialize_optimization_model","text":"Exports the OpModel JuMP object in MathOptFormat\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.set_device_model!-Tuple{OperationsProblemTemplate, DeviceModel{var\"#s31\", var\"#s30\"} where {var\"#s31\"<:Device, var\"#s30\"<:PowerSimulations.AbstractDeviceFormulation}}","page":"PowerSimulations","title":"PowerSimulations.set_device_model!","text":"Sets the device model in a template using a DeviceModel instance\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.set_device_model!-Tuple{OperationsProblemTemplate, Type{var\"#s31\"} where var\"#s31\"<:Device, Type{var\"#s30\"} where var\"#s30\"<:PowerSimulations.AbstractDeviceFormulation}","page":"PowerSimulations","title":"PowerSimulations.set_device_model!","text":"Sets the device model in a template using the component type and formulation.\nBuilds a default DeviceModel\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.set_service_model!-Tuple{OperationsProblemTemplate, String, Type{var\"#s31\"} where var\"#s31\"<:Service, Type{var\"#s30\"} where var\"#s30\"<:PowerSimulations.AbstractServiceFormulation}","page":"PowerSimulations","title":"PowerSimulations.set_service_model!","text":"Sets the service model in a template using a name and the service type and formulation. Builds a default ServiceModel with use_service_name set to true.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.set_service_model!-Tuple{OperationsProblemTemplate, Type{var\"#s31\"} where var\"#s31\"<:Service, Type{var\"#s30\"} where var\"#s30\"<:PowerSimulations.AbstractServiceFormulation}","page":"PowerSimulations","title":"PowerSimulations.set_service_model!","text":"Sets the service model in a template using a ServiceModel instance.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.set_system!-Tuple{PowerSimulations.SimulationProblemResults, System}","page":"PowerSimulations","title":"PowerSimulations.set_system!","text":"Set the system in the results instance.\n\nThrows InvalidValue if the system UUID is incorrect.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.set_transmission_model!-Tuple{OperationsProblemTemplate, Type{var\"#s32\"} where var\"#s32\"<:PowerModels.AbstractPowerModel}","page":"PowerSimulations","title":"PowerSimulations.set_transmission_model!","text":"Sets the transmission model in a template\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.show_recorder_events-Union{Tuple{T}, Tuple{Type{T}, AbstractString}, Tuple{Type{T}, AbstractString, Union{Nothing, Function}}} where T<:InfrastructureSystems.AbstractRecorderEvent","page":"PowerSimulations","title":"PowerSimulations.show_recorder_events","text":"show_recorder_events(\n    ::Type{T},\n    filename::AbstractString,\n    filter_func::Union{Nothing, Function} = nothing;\n    wall_time = false,\n    kwargs...,\n) where {T <: IS.AbstractRecorderEvent}\n\nShow the events of type T in a recorder file.\n\nArguments\n\n::Type{T}: Recorder event type\nfilename::AbstractString: recorder filename\nfilter_func::Union{Nothing, Function} = nothing: Optional function that accepts an event  of type T and returns a Bool. Apply this function to each event and only return events  where the result is true.\nwall_time = false: If true, show the wall_time timestamp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.show_simulation_events-Union{Tuple{T}, Tuple{Type{T}, AbstractString}, Tuple{Type{T}, AbstractString, Union{Nothing, Function}}} where T<:InfrastructureSystems.AbstractRecorderEvent","page":"PowerSimulations","title":"PowerSimulations.show_simulation_events","text":"show_simulation_events(\n    ::Type{T},\n    output_dir::AbstractString,\n    filter_func::Union{Nothing,Function} = nothing;\n    step = nothing,\n    problem = nothing,\n    wall_time = false,\n    kwargs...,\n) where { T <: IS.AbstractRecorderEvent}\n\nShow all simulation events of type T in a simulation output directory.\n\nArguments\n\n::Type{T}: Recorder event type\noutput_dir::AbstractString: Simulation output directory\nfilter_func::Union{Nothing, Function} = nothing: Refer to show_recorder_events.\nstep::Int = nothing: Filter events by step. Required if problem is passed.\nproblem::Int = nothing: Filter events by problem.\nwall_time = false: If true, show the wall_time timestamp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.solve!-Tuple{Int64, OperationsProblem{var\"#s306\"} where var\"#s306\"<:PowerSimulations.AbstractOperationsProblem, Dates.DateTime, PowerSimulations.SimulationStore}","page":"PowerSimulations","title":"PowerSimulations.solve!","text":"Default solve method for an operational model used inside of a Simulation. Solves problems that conform to the requirements of OperationsProblem{<: PowerSimulationsOperationsProblem}\n\nArguments\n\nstep::Int: Simulation Step\nop_problem::OperationModel: operation model\nstart_time::Dates.DateTime: Initial Time of the simulation step in Simulation time.\nstore::SimulationStore: Simulation output store\n\nAccepted Key Words\n\nexports: realtime export of output. Use wisely, it can have negative impacts in the simulation times\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.solve!-Tuple{OperationsProblem{var\"#s306\"} where var\"#s306\"<:PowerSimulations.PowerSimulationsOperationsProblem}","page":"PowerSimulations","title":"PowerSimulations.solve!","text":"Default solve method the operational model for a single instance. Solves problems     that conform to the requirements of OperationsProblem{<: PowerSimulationsOperationsProblem}\n\nArguments\n\nop_problem::OperationModel = op_problem: operation model\n\nExamples\n\nresults = solve!(OpModel)\n\nAccepted Key Words\n\noutput_dir::String: If a file path is provided the results\n\nautomatically get written to feather files\n\noptimizer::MOI.OptimizerWithAttributes: The optimizer that is used to solve the model\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.template_agc_reserve_deployment-Tuple{}","page":"PowerSimulations","title":"PowerSimulations.template_agc_reserve_deployment","text":"template_agc_reserve_deployment(; kwargs...)\n\nCreates an OperationsProblemTemplate with default DeviceModels for an AGC Reserve Deplyment Problem. This model doesn't support customization\n\nExample\n\ntemplate = agc_reserve_deployment()\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.template_economic_dispatch-Tuple{}","page":"PowerSimulations","title":"PowerSimulations.template_economic_dispatch","text":"template_economic_dispatch(; kwargs...)\n\nCreates an OperationsProblemTemplate with default DeviceModels for an Economic Dispatch problem.\n\nExample\n\ntemplate = template_economic_dispatch()\n\nAccepted Key Words\n\nnetwork::Type{<:PM.AbstractPowerModel} : override default network model settings\ndevices::Vector{DeviceModel} : override default DeviceModel settings\nservices::Vector{ServiceModel} : override default ServiceModel settings\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.template_unit_commitment-Tuple{}","page":"PowerSimulations","title":"PowerSimulations.template_unit_commitment","text":"template_unit_commitment(; kwargs...)\n\nCreates an OperationsProblemTemplate with default DeviceModels for a Unit Commitment problem.\n\nExample\n\ntemplate = template_unit_commitment()\n\nAccepted Key Words\n\nnetwork::Type{<:PM.AbstractPowerModel} : override default network model settings\ndevices::Vector{DeviceModel} : override default DeviceModel settings\nservices::Vector{ServiceModel} : override default ServiceModel settings\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#Internal","page":"PowerSimulations","title":"Internal","text":"","category":"section"},{"location":"api/PowerSimulations/","page":"PowerSimulations","title":"PowerSimulations","text":"Modules = [PowerSimulations]\nPublic = false","category":"page"},{"location":"api/PowerSimulations/#PowerSimulations.AbstractDeviceFormulation","page":"PowerSimulations","title":"PowerSimulations.AbstractDeviceFormulation","text":"Abstract type for Device Formulations (a.k.a Models)\n\nExample\n\nimport PowerSimulations\nconst PSI = PowerSimulations\nstruct MyCustomFormulation <: PSI.AbstractDeviceFormulation\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSimulations/#PowerSimulations.AbstractServiceFormulation","page":"PowerSimulations","title":"PowerSimulations.AbstractServiceFormulation","text":"Abstract type for Service Formulations (a.k.a Models)\n\nExample\n\nimport PowerSimulations\nconst PSI = PowerSimulations\nstruct MyServiceFormulation <: PSI.AbstractServiceFormulation\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSimulations/#PowerSimulations.AbstractSimulationStatusEvent","page":"PowerSimulations","title":"PowerSimulations.AbstractSimulationStatusEvent","text":"All events subtyped from this need to be recorded under :simulation_status.\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSimulations/#PowerSimulations.ActivePowerInVariable","page":"PowerSimulations","title":"PowerSimulations.ActivePowerInVariable","text":"Struct to dispatch the creation of Active Power Input Variables for 2-directional devices. for instance storage or pump-hydro\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSimulations/#PowerSimulations.ActivePowerOutVariable","page":"PowerSimulations","title":"PowerSimulations.ActivePowerOutVariable","text":"Struct to dispatch the creation of Active Power Output Variables for 2-directional devices. for instance storage or pump-hydro\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSimulations/#PowerSimulations.ActivePowerVariable","page":"PowerSimulations","title":"PowerSimulations.ActivePowerVariable","text":"Struct to dispatch the creation of Active Power Variables\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSimulations/#PowerSimulations.CacheFlushRules","page":"PowerSimulations","title":"PowerSimulations.CacheFlushRules","text":"Informs the flusher on what data to keep in cache.\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSimulations/#PowerSimulations.DeviceEnergyBalanceConstraintSpec-Union{Tuple{H}, Tuple{Type{var\"#s2015\"} where var\"#s2015\"<:PowerSimulations.EnergyBalanceConstraint, Type{PowerSimulations.EnergyVariableUp}, Type{H}, Type{var\"#s2014\"} where var\"#s2014\"<:PowerSimulations.AbstractHydroFormulation, Type{var\"#s332\"} where var\"#s332\"<:PowerModels.AbstractPowerModel, Union{Nothing, PowerSimulations.AbstractAffectFeedForward}, Bool, Bool}} where H<:HydroPumpedStorage","page":"PowerSimulations","title":"PowerSimulations.DeviceEnergyBalanceConstraintSpec","text":"This function defines the constraints for the water level (or state of charge) for the HydroPumpedStorage.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.DeviceEnergyBalanceConstraintSpec-Union{Tuple{H}, Tuple{Type{var\"#s2015\"} where var\"#s2015\"<:PowerSimulations.EnergyBalanceConstraint, Type{PowerSimulations.EnergyVariable}, Type{H}, Type{var\"#s2014\"} where var\"#s2014\"<:PowerSimulations.AbstractHydroFormulation, Type{var\"#s332\"} where var\"#s332\"<:PowerModels.AbstractPowerModel, Union{Nothing, PowerSimulations.AbstractAffectFeedForward}, Bool, Bool}} where H<:HydroEnergyReservoir","page":"PowerSimulations","title":"PowerSimulations.DeviceEnergyBalanceConstraintSpec","text":"This function defines the constraints for the water level (or state of charge) for the Hydro Reservoir.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.DeviceRangeConstraintInfo","page":"PowerSimulations","title":"PowerSimulations.DeviceRangeConstraintInfo","text":"Data Container to construct range constraints\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSimulations/#PowerSimulations.DeviceRangeConstraintSpec-Tuple{Type{var\"#s2014\"} where var\"#s2014\"<:PowerSimulations.RangeConstraint, Type{PowerSimulations.ReactivePowerVariable}, Type{var\"#s332\"} where var\"#s332\"<:ElectricLoad, Type{var\"#s331\"} where var\"#s331\"<:PowerSimulations.AbstractControllablePowerLoadFormulation, Type{var\"#s308\"} where var\"#s308\"<:PowerModels.AbstractPowerModel, Union{Nothing, PowerSimulations.AbstractAffectFeedForward}, Bool, Bool}","page":"PowerSimulations","title":"PowerSimulations.DeviceRangeConstraintSpec","text":"Reactive Power Constraints on Controllable Loads Assume Constant power_factor\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.DeviceRangeConstraintSpec-Tuple{}","page":"PowerSimulations","title":"PowerSimulations.DeviceRangeConstraintSpec","text":"Construct inputs for creating range constraints.\n\nArguments\n\nrange_constraint_spec::Vector{RangeConstraintSpec}: May be emtpy. timeseries_range_constraint_spec::Vector{TimeSeriesConstraintSpec}: May be empty. custom_optimization_container_func::Union{Nothing, Function}: Optional function to add custom  constraints to the internals of a OptimizationContainer. Must accept OptimizationContainer, devices iterable,  and a subtype of AbstractDeviceFormulation. devices_filter_func::Union{Nothing, Function}: Optional function to filter the devices on\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.DeviceRangeConstraintSpec-Union{Tuple{T}, Tuple{Type{var\"#s2015\"} where var\"#s2015\"<:PowerSimulations.RangeConstraint, Type{PowerSimulations.ActivePowerVariable}, Type{T}, Type{var\"#s2014\"} where var\"#s2014\"<:PowerSimulations.AbstractHydroDispatchFormulation, Type{var\"#s332\"} where var\"#s332\"<:PowerModels.AbstractPowerModel, Union{Nothing, PowerSimulations.AbstractAffectFeedForward}, Bool, Bool}} where T<:HydroGen","page":"PowerSimulations","title":"PowerSimulations.DeviceRangeConstraintSpec","text":"This function define the range constraint specs for the active power for dispatch Run of River formulations.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.DeviceRangeConstraintSpec-Union{Tuple{T}, Tuple{Type{var\"#s2015\"} where var\"#s2015\"<:PowerSimulations.RangeConstraint, Type{PowerSimulations.ActivePowerVariable}, Type{T}, Type{var\"#s2014\"} where var\"#s2014\"<:PowerSimulations.AbstractHydroReservoirFormulation, Type{var\"#s332\"} where var\"#s332\"<:PowerModels.AbstractPowerModel, Union{Nothing, PowerSimulations.AbstractAffectFeedForward}, Bool, Bool}} where T<:HydroGen","page":"PowerSimulations","title":"PowerSimulations.DeviceRangeConstraintSpec","text":"This function define the range constraint specs for the active power for dispatch Reservoir formulations.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.DeviceRangeConstraintSpec-Union{Tuple{T}, Tuple{Type{var\"#s2015\"} where var\"#s2015\"<:PowerSimulations.RangeConstraint, Type{PowerSimulations.ActivePowerVariable}, Type{T}, Type{var\"#s2014\"} where var\"#s2014\"<:PowerSimulations.AbstractHydroUnitCommitment, Type{var\"#s332\"} where var\"#s332\"<:PowerModels.AbstractPowerModel, Nothing, Bool, Bool}} where T<:HydroGen","page":"PowerSimulations","title":"PowerSimulations.DeviceRangeConstraintSpec","text":"This function define the range constraint specs for the active power for commitment formulations (semi continuous).\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.DeviceRangeConstraintSpec-Union{Tuple{T}, Tuple{Type{var\"#s2015\"} where var\"#s2015\"<:PowerSimulations.RangeConstraint, Type{PowerSimulations.ActivePowerVariable}, Type{T}, Type{var\"#s2014\"} where var\"#s2014\"<:PowerSimulations.AbstractThermalDispatchFormulation, Type{var\"#s332\"} where var\"#s332\"<:PowerModels.AbstractPowerModel, Nothing, Bool, Bool}} where T<:ThermalGen","page":"PowerSimulations","title":"PowerSimulations.DeviceRangeConstraintSpec","text":"This function adds the active power limits of generators when there are no CommitmentVariables\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.DeviceRangeConstraintSpec-Union{Tuple{T}, Tuple{Type{var\"#s2015\"} where var\"#s2015\"<:PowerSimulations.RangeConstraint, Type{PowerSimulations.ActivePowerVariable}, Type{T}, Type{var\"#s2014\"} where var\"#s2014\"<:PowerSimulations.AbstractThermalUnitCommitment, Type{var\"#s332\"} where var\"#s332\"<:PowerModels.AbstractPowerModel, Nothing, Bool, Bool}} where T<:ThermalGen","page":"PowerSimulations","title":"PowerSimulations.DeviceRangeConstraintSpec","text":"This function adds the active power limits of generators when there are CommitmentVariables\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.DeviceRangeConstraintSpec-Union{Tuple{T}, Tuple{Type{var\"#s2015\"} where var\"#s2015\"<:PowerSimulations.RangeConstraint, Type{PowerSimulations.ActivePowerVariable}, Type{T}, Type{var\"#s2014\"} where var\"#s2014\"<:ThermalDispatchNoMin, Type{var\"#s332\"} where var\"#s332\"<:PowerModels.AbstractPowerModel, Nothing, Bool, Bool}} where T<:ThermalGen","page":"PowerSimulations","title":"PowerSimulations.DeviceRangeConstraintSpec","text":"This function adds the active power limits of generators when there are no CommitmentVariables\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.DeviceRangeConstraintSpec-Union{Tuple{T}, Tuple{Type{var\"#s2015\"} where var\"#s2015\"<:PowerSimulations.RangeConstraint, Type{PowerSimulations.ActivePowerVariable}, Type{T}, Type{var\"#s2014\"} where var\"#s2014\"<:ThermalMultiStartUnitCommitment, Type{var\"#s332\"} where var\"#s332\"<:PowerModels.AbstractPowerModel, Nothing, Bool, Bool}} where T<:ThermalMultiStart","page":"PowerSimulations","title":"PowerSimulations.DeviceRangeConstraintSpec","text":"This function adds the active power limits of generators. Constraint (17) & (18) from PGLIB\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.DeviceRangeConstraintSpec-Union{Tuple{T}, Tuple{Type{var\"#s2015\"} where var\"#s2015\"<:PowerSimulations.RangeConstraint, Type{PowerSimulations.ReactivePowerVariable}, Type{T}, Type{var\"#s2014\"} where var\"#s2014\"<:PowerSimulations.AbstractHydroDispatchFormulation, Type{var\"#s332\"} where var\"#s332\"<:PowerModels.AbstractPowerModel, Union{Nothing, PowerSimulations.AbstractAffectFeedForward}, Bool, Bool}} where T<:HydroGen","page":"PowerSimulations","title":"PowerSimulations.DeviceRangeConstraintSpec","text":"This function define the range constraint specs for the reactive power for dispatch formulations.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.DeviceRangeConstraintSpec-Union{Tuple{T}, Tuple{Type{var\"#s2015\"} where var\"#s2015\"<:PowerSimulations.RangeConstraint, Type{PowerSimulations.ReactivePowerVariable}, Type{T}, Type{var\"#s2014\"} where var\"#s2014\"<:PowerSimulations.AbstractHydroUnitCommitment, Type{var\"#s332\"} where var\"#s332\"<:PowerModels.AbstractPowerModel, Nothing, Bool, Bool}} where T<:HydroGen","page":"PowerSimulations","title":"PowerSimulations.DeviceRangeConstraintSpec","text":"This function define the range constraint specs for the reactive power for commitment formulations (semi continuous).\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.DeviceRangeConstraintSpec-Union{Tuple{T}, Tuple{Type{var\"#s2015\"} where var\"#s2015\"<:PowerSimulations.RangeConstraint, Type{PowerSimulations.ReactivePowerVariable}, Type{T}, Type{var\"#s2014\"} where var\"#s2014\"<:PowerSimulations.AbstractThermalDispatchFormulation, Type{var\"#s332\"} where var\"#s332\"<:PowerModels.AbstractPowerModel, Union{Nothing, PowerSimulations.AbstractAffectFeedForward}, Bool, Bool}} where T<:ThermalGen","page":"PowerSimulations","title":"PowerSimulations.DeviceRangeConstraintSpec","text":"This function adds the reactive  power limits of generators when there are CommitmentVariables\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.DeviceRangeConstraintSpec-Union{Tuple{T}, Tuple{Type{var\"#s2015\"} where var\"#s2015\"<:PowerSimulations.RangeConstraint, Type{PowerSimulations.ReactivePowerVariable}, Type{T}, Type{var\"#s2014\"} where var\"#s2014\"<:PowerSimulations.AbstractThermalUnitCommitment, Type{var\"#s332\"} where var\"#s332\"<:PowerModels.AbstractPowerModel, Union{Nothing, PowerSimulations.AbstractAffectFeedForward}, Bool, Bool}} where T<:ThermalGen","page":"PowerSimulations","title":"PowerSimulations.DeviceRangeConstraintSpec","text":"This function adds the reactive power limits of generators when there CommitmentVariables\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.FlowActivePowerVariable","page":"PowerSimulations","title":"PowerSimulations.FlowActivePowerVariable","text":"Struct to dispatch the creation of Flow Active Power Variables\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSimulations/#PowerSimulations.HdfSimulationStore","page":"PowerSimulations","title":"PowerSimulations.HdfSimulationStore","text":"Stores simulation data in an HDF file.\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSimulations/#PowerSimulations.InMemorySimulationStore","page":"PowerSimulations","title":"PowerSimulations.InMemorySimulationStore","text":"Stores simulation data in memory\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSimulations/#PowerSimulations.NodalExpressionSpec-Union{Tuple{U}, Tuple{T}, Tuple{Type{T}, Type{U}, Bool}} where {T<:Device, U<:PowerModels.AbstractPowerModel}","page":"PowerSimulations","title":"PowerSimulations.NodalExpressionSpec","text":"Construct NodalExpressionSpec for specific types.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.OptimizerStats-Tuple{Any, Any}","page":"PowerSimulations","title":"PowerSimulations.OptimizerStats","text":"Construct OptimizerStats when the OperationsProblem is part of a simulation.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.OptimizerStats-Tuple{Any}","page":"PowerSimulations","title":"PowerSimulations.OptimizerStats","text":"Construct OptimizerStats when the OperationsProblem is not part of a simulation.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.OptimizerStats-Tuple{Vector{Float64}}","page":"PowerSimulations","title":"PowerSimulations.OptimizerStats","text":"Construct OptimizerStats from a vector that was serialized to HDF5.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.ParamResultCache","page":"PowerSimulations","title":"PowerSimulations.ParamResultCache","text":"Cache for a single parameter/variable/dual. Stores arrays chronologically by simulation timestamp.\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSimulations/#PowerSimulations.PowerOutput","page":"PowerSimulations","title":"PowerSimulations.PowerOutput","text":"Auxiliary Variable for Thermal Generation Models that solve for power above min\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSimulations/#PowerSimulations.ProblemData","page":"PowerSimulations","title":"PowerSimulations.ProblemData","text":"Stores simulation data for one problem.\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSimulations/#PowerSimulations.ProblemDatasets","page":"PowerSimulations","title":"PowerSimulations.ProblemDatasets","text":"Stores HDF5 datasets for one problem.\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSimulations/#PowerSimulations.ResultCache","page":"PowerSimulations","title":"PowerSimulations.ResultCache","text":"Cache for all model results\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSimulations/#PowerSimulations.SimulationProblemResults","page":"PowerSimulations","title":"PowerSimulations.SimulationProblemResults","text":"Holds the results of a simulation problem for plotting or exporting\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSimulations/#PowerSimulations.SimulationStore","page":"PowerSimulations","title":"PowerSimulations.SimulationStore","text":"Provides storage of simulation data\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSimulations/#PowerSimulations.UpdateRef","page":"PowerSimulations","title":"PowerSimulations.UpdateRef","text":"Reference for parameters update when present\n\n\n\n\n\n","category":"type"},{"location":"api/PowerSimulations/#Base.show-Tuple{IO, MIME{Symbol(\"text/plain\")}, OperationsProblem}","page":"PowerSimulations","title":"Base.show","text":"Base.show(io::IO, ::MIME\"text/plain\", op_problem::OperationsProblem)\n\nThis function goes through the fields in OperationsProblem and then in OperationsProblemTemplate, if the field contains a Device model dictionary, it calls organizedevicemodel() & prints the data by field, key, value. If the field is not a Device model dictionary, and a value exists for that field it prints the value.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations._allocate_execution_order-Tuple{Dict{Int64, Int64}}","page":"PowerSimulations","title":"PowerSimulations._allocate_execution_order","text":"Function calculates the total number of problem executions in the simulation and allocates the appropiate vector\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations._calculate_interval_inner_counts-Tuple{OrderedDict{Symbol, Tuple{Dates.TimePeriod, PowerSimulations.FeedForwardChronology}}}","page":"PowerSimulations","title":"PowerSimulations._calculate_interval_inner_counts","text":"_calculate_interval_inner_counts(order::Dict{Int,String},\n                                      intervals::OrderedDict{String,<:Dates.TimePeriod},\n                                      step_resolution::Dates.TimePeriod)\n\nCalculates how many times a problem is executed for every interval of the previous problem\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations._get_data_for_rocc-Union{Tuple{T}, Tuple{PowerSimulations.OptimizationContainer, Type{T}}} where T<:ThermalGen","page":"PowerSimulations","title":"PowerSimulations._get_data_for_rocc","text":"This function gets the data for the generators for ramping constraints of thermal generators\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations._get_data_for_tdc-Tuple{Vector{InitialCondition}, Vector{InitialCondition}, Dates.TimePeriod}","page":"PowerSimulations","title":"PowerSimulations._get_data_for_tdc","text":"If the fraction of hours that a generator has a duration constraint is less than the fraction of hours that a single time_step represents then it is not binding.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations._get_data_startup_ic-Tuple{Vector{InitialCondition}, Dates.TimePeriod}","page":"PowerSimulations","title":"PowerSimulations._get_data_startup_ic","text":"This function gets the data for startup initial condition\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations._update_problem!-Tuple{OperationsProblem, Simulation}","page":"PowerSimulations","title":"PowerSimulations._update_problem!","text":"Required update problem function call\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.add_constraints!-Union{Tuple{S}, Tuple{D}, Tuple{St}, Tuple{PowerSimulations.OptimizationContainer, Type{var\"#s2015\"} where var\"#s2015\"<:PowerSimulations.RangeConstraint, Type{PowerSimulations.ReactivePowerVariable}, InfrastructureSystems.FlattenIteratorWrapper{St}, DeviceModel{St, D}, Type{S}, Union{Nothing, PowerSimulations.AbstractAffectFeedForward}}} where {St<:Storage, D<:PowerSimulations.AbstractStorageFormulation, S<:PowerModels.AbstractPowerModel}","page":"PowerSimulations","title":"PowerSimulations.add_constraints!","text":"This function adds the reactive  power limits of generators when there are CommitmentVariables\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.add_constraints!-Union{Tuple{X}, Tuple{W}, Tuple{V}, Tuple{U}, Tuple{T}, Tuple{PowerSimulations.OptimizationContainer, Type{T}, Type{U}, InfrastructureSystems.FlattenIteratorWrapper{V}, DeviceModel{V, W}, Type{X}, Union{Nothing, PowerSimulations.AbstractAffectFeedForward}}} where {T<:PowerSimulations.RangeConstraint, U<:PowerSimulations.VariableType, V<:Device, W<:PowerSimulations.AbstractDeviceFormulation, X<:PowerModels.AbstractPowerModel}","page":"PowerSimulations","title":"PowerSimulations.add_constraints!","text":"Default implementation to add range constraints.\n\nUsers of this function must implement a method for DeviceRangeConstraintSpec for their specific types. Users may also implement custom activepowerconstraints! methods.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.add_result!-Tuple{PowerSimulations.ParamResultCache, Any, Any, Any}","page":"PowerSimulations","title":"PowerSimulations.add_result!","text":"Adds thrame result to the cache. Return true if the cache needs to be flushed.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.add_to_cost!-Tuple{PowerSimulations.OptimizationContainer, PowerSimulations.AddCostSpec, MarketBidCost, Component}","page":"PowerSimulations","title":"PowerSimulations.add_to_cost!","text":"Adds to the models costs represented by PowerSystems Market-Bid costs. Default implementation for any PSY.Component. Uses by default the cost in of the cold stages for start up costs.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.add_to_cost!-Tuple{PowerSimulations.OptimizationContainer, PowerSimulations.AddCostSpec, MarketBidCost, ThermalMultiStart}","page":"PowerSimulations","title":"PowerSimulations.add_to_cost!","text":"Adds to the models costs represented by PowerSystems Market-Bid costs. Implementation for devices PSY.ThermalMultiStart\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.add_to_cost!-Tuple{PowerSimulations.OptimizationContainer, PowerSimulations.AddCostSpec, MultiStartCost, Component}","page":"PowerSimulations","title":"PowerSimulations.add_to_cost!","text":"Adds to the models costs represented by PowerSystems Multi-Start costs.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.add_to_cost!-Tuple{PowerSimulations.OptimizationContainer, PowerSimulations.AddCostSpec, ThreePartCost, Component}","page":"PowerSimulations","title":"PowerSimulations.add_to_cost!","text":"Adds to the models costs represented by PowerSystems ThreePart costs\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.add_to_cost!-Tuple{PowerSimulations.OptimizationContainer, PowerSimulations.AddCostSpec, TwoPartCost, Component}","page":"PowerSimulations","title":"PowerSimulations.add_to_cost!","text":"Adds to the models costs represented by PowerSystems TwoPart costs\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.add_variable!-Union{Tuple{U}, Tuple{D}, Tuple{PowerSimulations.OptimizationContainer, PowerSimulations.VariableType, U, Any}} where {D<:Component, U<:Union{Vector{D}, InfrastructureSystems.FlattenIteratorWrapper{D}}}","page":"PowerSimulations","title":"PowerSimulations.add_variable!","text":"Adds a variable to the optimization model and to the affine expressions contained in the optimization_container model according to the specified sign. Based on the inputs, the variable can be specified as binary.\n\nBounds\n\nlb_value_function <= varstart[name, t] <= ub_value_function\n\nIf binary = true:\n\nvarstart[name, t] in {0,1}\n\nLaTeX\n\nlb ge x^device_t le ub forall t\n\nx^device_t in 01 forall t iff textbinary = true\n\nArguments\n\noptimizationcontainer::OptimizationContainer : the optimizationcontainer model built in PowerSimulations\ndevices : Vector or Iterator with the devices\nvar_name::Symbol : Base Name for the variable\nbinary::Bool : Select if the variable is binary\nexpressionname::Symbol : Expressionname name stored in optimization_container.expressions to add the variable\nsign::Float64 : sign of the addition of the variable to the expression_name. Default Value is 1.0\n\nAccepted Keyword Arguments\n\nubvalue : Provides the function over device to obtain the value for a upperbound\nlbvalue : Provides the function over device to obtain the value for a lowerbound. If the variable is meant to be positive define lb = x -> 0.0\ninitial_value : Provides the function over device to obtain the warm start value\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.add_variable!-Union{Tuple{U}, Tuple{T}, Tuple{D}, Tuple{PowerSimulations.OptimizationContainer, T, U, Any}} where {D<:Component, T<:PowerSimulations.AuxVariableType, U<:Union{Vector{D}, InfrastructureSystems.FlattenIteratorWrapper{D}}}","page":"PowerSimulations","title":"PowerSimulations.add_variable!","text":"Default implementation of adding auxiliary variable to the model.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.add_variables!-Tuple{PowerSimulations.OptimizationContainer, Type{PowerSimulations.SteadyStateFrequencyDeviation}}","page":"PowerSimulations","title":"PowerSimulations.add_variables!","text":"Steady State deviation of the frequency\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.add_variables!-Union{Tuple{U}, Tuple{T}, Tuple{PowerSimulations.OptimizationContainer, Type{T}, Union{Vector{U}, InfrastructureSystems.FlattenIteratorWrapper{U}}, Union{PowerSimulations.AbstractDeviceFormulation, PowerSimulations.AbstractServiceFormulation}}} where {T<:PowerSimulations.AuxVariableType, U<:Component}","page":"PowerSimulations","title":"PowerSimulations.add_variables!","text":"Add variables to the OptimizationContainer for any component.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.add_variables!-Union{Tuple{U}, Tuple{T}, Tuple{PowerSimulations.OptimizationContainer, Type{T}, Union{Vector{U}, InfrastructureSystems.FlattenIteratorWrapper{U}}, Union{PowerSimulations.AbstractDeviceFormulation, PowerSimulations.AbstractServiceFormulation}}} where {T<:PowerSimulations.VariableType, U<:Component}","page":"PowerSimulations","title":"PowerSimulations.add_variables!","text":"Add variables to the OptimizationContainer for any component.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.add_variables!-Union{Tuple{V}, Tuple{U}, Tuple{T}, Tuple{PowerSimulations.OptimizationContainer, Type{T}, U, Vector{V}, PowerSimulations.AbstractReservesFormulation}} where {T<:PowerSimulations.VariableType, U<:Reserve, V<:Device}","page":"PowerSimulations","title":"PowerSimulations.add_variables!","text":"Add variables to the OptimizationContainer for a service.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.axis_array_to_dataframe","page":"PowerSimulations","title":"PowerSimulations.axis_array_to_dataframe","text":"Creates a DataFrame from a JuMP DenseAxisArray or SparseAxisArray.\n\nArguments\n\ninput_array: JuMP DenseAxisArray or SparseAxisArray to convert\ncolumns::Vector{Symbol}: Required when there is only one axis which is data. Ignored if input_array includes an axis for device names.\n\n\n\n\n\n","category":"function"},{"location":"api/PowerSimulations/#PowerSimulations.check_activeservice_variables-Tuple{PowerSimulations.OptimizationContainer, Vector{var\"#s2016\"} where var\"#s2016\"<:Service}","page":"PowerSimulations","title":"PowerSimulations.check_activeservice_variables","text":"This function checks if the variables for reserves were created\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.check_file_integrity-Tuple{String}","page":"PowerSimulations","title":"PowerSimulations.check_file_integrity","text":"check_file_integrity(path::String)\n\nChecks the hash value for each file made with the file is written with the new hash_value to verify the file hasn't been tampered with since written\n\nArguments\n\npath::String: this is the folder path that contains the results and the check.sha256 file\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.commit_hydro_active_power_ub!-Union{Tuple{W}, Tuple{V}, Tuple{PowerSimulations.OptimizationContainer, Any, DeviceModel{V, W}, Union{Nothing, PowerSimulations.AbstractAffectFeedForward}}} where {V<:HydroGen, W<:PowerSimulations.AbstractHydroUnitCommitment}","page":"PowerSimulations","title":"PowerSimulations.commit_hydro_active_power_ub!","text":"This function define the range constraint specs for the reactive power for Commitment Run of River formulation.     P = multiplier * P_max\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.commitment_constraints!-Union{Tuple{S}, Tuple{D}, Tuple{T}, Tuple{PowerSimulations.OptimizationContainer, InfrastructureSystems.FlattenIteratorWrapper{T}, DeviceModel{T, D}, Type{S}, Union{Nothing, PowerSimulations.AbstractAffectFeedForward}}} where {T<:ThermalGen, D<:PowerSimulations.AbstractThermalUnitCommitment, S<:PowerModels.AbstractPowerModel}","page":"PowerSimulations","title":"PowerSimulations.commitment_constraints!","text":"This function adds the Commitment Status constraint when there are CommitmentVariables\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.compute_sha256-Tuple{AbstractString}","page":"PowerSimulations","title":"PowerSimulations.compute_sha256","text":"Return the SHA 256 hash of a file.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.constraint_current_balance_ni_expr-Tuple{PowerModels.AbstractPowerModel, Int64, Int64, Any, Any, Any, Any}","page":"PowerSimulations","title":"PowerSimulations.constraint_current_balance_ni_expr","text":"\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.constraint_current_balance_ni_expr-Tuple{PowerModels.AbstractPowerModel, Int64}","page":"PowerSimulations","title":"PowerSimulations.constraint_current_balance_ni_expr","text":"\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.constraint_power_balance_ni_expr-Tuple{PowerModels.AbstractActivePowerModel, Int64, Int64, Any, Any, Any, Any}","page":"PowerSimulations","title":"PowerSimulations.constraint_power_balance_ni_expr","text":"\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.constraint_power_balance_ni_expr-Tuple{PowerModels.AbstractPowerModel, Int64, Int64, Any, Any, Any, Any}","page":"PowerSimulations","title":"PowerSimulations.constraint_power_balance_ni_expr","text":"\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.constraint_power_balance_ni_expr-Tuple{PowerModels.AbstractPowerModel, Int64}","page":"PowerSimulations","title":"PowerSimulations.constraint_power_balance_ni_expr","text":"\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.construct_device!-Union{Tuple{S}, Tuple{D}, Tuple{H}, Tuple{PowerSimulations.OptimizationContainer, System, DeviceModel{H, D}, Type{S}}} where {H<:HydroGen, D<:HydroCommitmentReservoirBudget, S<:PowerModels.AbstractActivePowerModel}","page":"PowerSimulations","title":"PowerSimulations.construct_device!","text":"Construct model for HydroGen with ReservoirBudget Commitment Formulation with only Active Power.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.construct_device!-Union{Tuple{S}, Tuple{D}, Tuple{H}, Tuple{PowerSimulations.OptimizationContainer, System, DeviceModel{H, D}, Type{S}}} where {H<:HydroGen, D<:HydroCommitmentReservoirBudget, S<:PowerModels.AbstractPowerModel}","page":"PowerSimulations","title":"PowerSimulations.construct_device!","text":"Construct model for HydroGen with ReservoirBudget Commitment Formulation\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.construct_device!-Union{Tuple{S}, Tuple{D}, Tuple{H}, Tuple{PowerSimulations.OptimizationContainer, System, DeviceModel{H, D}, Type{S}}} where {H<:HydroGen, D<:HydroCommitmentRunOfRiver, S<:PowerModels.AbstractActivePowerModel}","page":"PowerSimulations","title":"PowerSimulations.construct_device!","text":"Construct model for HydroGen with RunOfRiver Commitment Formulation with only Active Power.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.construct_device!-Union{Tuple{S}, Tuple{D}, Tuple{H}, Tuple{PowerSimulations.OptimizationContainer, System, DeviceModel{H, D}, Type{S}}} where {H<:HydroGen, D<:HydroCommitmentRunOfRiver, S<:PowerModels.AbstractPowerModel}","page":"PowerSimulations","title":"PowerSimulations.construct_device!","text":"Construct model for HydroGen with RunOfRiver Commitment Formulation\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.construct_device!-Union{Tuple{S}, Tuple{D}, Tuple{H}, Tuple{PowerSimulations.OptimizationContainer, System, DeviceModel{H, D}, Type{S}}} where {H<:HydroGen, D<:PowerSimulations.AbstractHydroDispatchFormulation, S<:PowerModels.AbstractActivePowerModel}","page":"PowerSimulations","title":"PowerSimulations.construct_device!","text":"Construct model for HydroGen with RunOfRiver Dispatch Formulation with only Active Power.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.construct_device!-Union{Tuple{S}, Tuple{D}, Tuple{H}, Tuple{PowerSimulations.OptimizationContainer, System, DeviceModel{H, D}, Type{S}}} where {H<:HydroGen, D<:PowerSimulations.AbstractHydroDispatchFormulation, S<:PowerModels.AbstractPowerModel}","page":"PowerSimulations","title":"PowerSimulations.construct_device!","text":"Construct model for HydroGen with RunOfRiver Dispatch Formulation\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.construct_device!-Union{Tuple{S}, Tuple{D}, Tuple{T}, Tuple{PowerSimulations.OptimizationContainer, System, DeviceModel{T, D}, Type{S}}} where {T<:ThermalGen, D<:PowerSimulations.AbstractStandardUnitCommitment, S<:PowerModels.AbstractActivePowerModel}","page":"PowerSimulations","title":"PowerSimulations.construct_device!","text":"This function creates the model for a full thermal dispatch formulation depending on combination of devices, deviceformulation and systemformulation\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.construct_device!-Union{Tuple{S}, Tuple{D}, Tuple{T}, Tuple{PowerSimulations.OptimizationContainer, System, DeviceModel{T, D}, Type{S}}} where {T<:ThermalGen, D<:PowerSimulations.AbstractStandardUnitCommitment, S<:PowerModels.AbstractPowerModel}","page":"PowerSimulations","title":"PowerSimulations.construct_device!","text":"This function creates the model for a full thermal dispatch formulation depending on combination of devices, deviceformulation and systemformulation\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.construct_device!-Union{Tuple{S}, Tuple{H}, Tuple{PowerSimulations.OptimizationContainer, System, DeviceModel{H, FixedOutput}, Type{S}}} where {H<:HydroGen, S<:PowerModels.AbstractPowerModel}","page":"PowerSimulations","title":"PowerSimulations.construct_device!","text":"Construct model for HydroGen with FixedOutput Formulation\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.construct_device!-Union{Tuple{S}, Tuple{H}, Tuple{PowerSimulations.OptimizationContainer, System, DeviceModel{H, HydroCommitmentReservoirStorage}, Type{S}}} where {H<:HydroEnergyReservoir, S<:PowerModels.AbstractActivePowerModel}","page":"PowerSimulations","title":"PowerSimulations.construct_device!","text":"Construct model for HydroGen with ReservoirStorage Dispatch Formulation with only Active Power\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.construct_device!-Union{Tuple{S}, Tuple{H}, Tuple{PowerSimulations.OptimizationContainer, System, DeviceModel{H, HydroCommitmentReservoirStorage}, Type{S}}} where {H<:HydroEnergyReservoir, S<:PowerModels.AbstractPowerModel}","page":"PowerSimulations","title":"PowerSimulations.construct_device!","text":"Construct model for HydroGen with ReservoirStorage Commitment Formulation\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.construct_device!-Union{Tuple{S}, Tuple{H}, Tuple{PowerSimulations.OptimizationContainer, System, DeviceModel{H, HydroDispatchPumpedStoragewReservation}, Type{S}}} where {H<:HydroPumpedStorage, S<:PowerModels.AbstractActivePowerModel}","page":"PowerSimulations","title":"PowerSimulations.construct_device!","text":"Construct model for HydroPumpedStorage with PumpedStorage Dispatch Formulation with reservation constraint with only Active Power\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.construct_device!-Union{Tuple{S}, Tuple{H}, Tuple{PowerSimulations.OptimizationContainer, System, DeviceModel{H, HydroDispatchPumpedStorage}, Type{S}}} where {H<:HydroPumpedStorage, S<:PowerModels.AbstractActivePowerModel}","page":"PowerSimulations","title":"PowerSimulations.construct_device!","text":"Construct model for HydroPumpedStorage with PumpedStorage Dispatch Formulation with only Active Power\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.construct_device!-Union{Tuple{S}, Tuple{H}, Tuple{PowerSimulations.OptimizationContainer, System, DeviceModel{H, HydroDispatchReservoirBudget}, Type{S}}} where {H<:HydroEnergyReservoir, S<:PowerModels.AbstractActivePowerModel}","page":"PowerSimulations","title":"PowerSimulations.construct_device!","text":"Construct model for HydroGen with ReservoirBudget Dispatch Formulation with only Active Power.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.construct_device!-Union{Tuple{S}, Tuple{H}, Tuple{PowerSimulations.OptimizationContainer, System, DeviceModel{H, HydroDispatchReservoirBudget}, Type{S}}} where {H<:HydroEnergyReservoir, S<:PowerModels.AbstractPowerModel}","page":"PowerSimulations","title":"PowerSimulations.construct_device!","text":"Construct model for HydroGen with ReservoirBudget Dispatch Formulation\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.construct_device!-Union{Tuple{S}, Tuple{H}, Tuple{PowerSimulations.OptimizationContainer, System, DeviceModel{H, HydroDispatchReservoirStorage}, Type{S}}} where {H<:HydroEnergyReservoir, S<:PowerModels.AbstractActivePowerModel}","page":"PowerSimulations","title":"PowerSimulations.construct_device!","text":"Construct model for HydroGen with ReservoirStorage Dispatch Formulation with only Active Power\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.construct_device!-Union{Tuple{S}, Tuple{H}, Tuple{PowerSimulations.OptimizationContainer, System, DeviceModel{H, HydroDispatchReservoirStorage}, Type{S}}} where {H<:HydroEnergyReservoir, S<:PowerModels.AbstractPowerModel}","page":"PowerSimulations","title":"PowerSimulations.construct_device!","text":"Construct model for HydroGen with ReservoirStorage Dispatch Formulation\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.construct_device!-Union{Tuple{S}, Tuple{T}, Tuple{PowerSimulations.OptimizationContainer, System, DeviceModel{RegulationDevice{T}, DeviceLimitedRegulation}, Type{S}}} where {T<:StaticInjection, S<:PowerModels.AbstractPowerModel}","page":"PowerSimulations","title":"PowerSimulations.construct_device!","text":"This function creates the model for a full thermal dispatch formulation depending on combination of devices, deviceformulation and systemformulation\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.construct_device!-Union{Tuple{S}, Tuple{T}, Tuple{PowerSimulations.OptimizationContainer, System, DeviceModel{RegulationDevice{T}, FixedOutput}, Type{S}}} where {T<:StaticInjection, S<:PowerModels.AbstractPowerModel}","page":"PowerSimulations","title":"PowerSimulations.construct_device!","text":"This function creates the model for a full thermal dispatch formulation depending on combination of devices, deviceformulation and systemformulation\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.construct_device!-Union{Tuple{S}, Tuple{T}, Tuple{PowerSimulations.OptimizationContainer, System, DeviceModel{RegulationDevice{T}, ReserveLimitedRegulation}, Type{S}}} where {T<:StaticInjection, S<:PowerModels.AbstractPowerModel}","page":"PowerSimulations","title":"PowerSimulations.construct_device!","text":"This function creates the model for a full thermal dispatch formulation depending on combination of devices, deviceformulation and systemformulation\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.construct_device!-Union{Tuple{S}, Tuple{T}, Tuple{PowerSimulations.OptimizationContainer, System, DeviceModel{T, ThermalBasicUnitCommitment}, Type{S}}} where {T<:ThermalGen, S<:PowerModels.AbstractActivePowerModel}","page":"PowerSimulations","title":"PowerSimulations.construct_device!","text":"This function creates the model for a full thermal dispatch formulation depending on combination of devices, deviceformulation and systemformulation\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.construct_device!-Union{Tuple{S}, Tuple{T}, Tuple{PowerSimulations.OptimizationContainer, System, DeviceModel{T, ThermalBasicUnitCommitment}, Type{S}}} where {T<:ThermalGen, S<:PowerModels.AbstractPowerModel}","page":"PowerSimulations","title":"PowerSimulations.construct_device!","text":"This function creates the model for a full thermal dispatch formulation depending on combination of devices, deviceformulation and systemformulation\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.construct_device!-Union{Tuple{S}, Tuple{T}, Tuple{PowerSimulations.OptimizationContainer, System, DeviceModel{T, ThermalRampLimited}, Type{S}}} where {T<:ThermalGen, S<:PowerModels.AbstractActivePowerModel}","page":"PowerSimulations","title":"PowerSimulations.construct_device!","text":"This function creates the model for a full thermal dispatch formulation depending on combination of devices, deviceformulation and systemformulation\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.construct_device!-Union{Tuple{S}, Tuple{T}, Tuple{PowerSimulations.OptimizationContainer, System, DeviceModel{T, ThermalRampLimited}, Type{S}}} where {T<:ThermalGen, S<:PowerModels.AbstractPowerModel}","page":"PowerSimulations","title":"PowerSimulations.construct_device!","text":"This function creates the model for a full thermal dispatch formulation depending on combination of devices, deviceformulation and systemformulation\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.construct_service!-Union{Tuple{SR}, Tuple{PowerSimulations.OptimizationContainer, Vector{SR}, System, ServiceModel{SR, GroupReserve}, Dict{Symbol, DeviceModel}, Vector{var\"#s2016\"} where var\"#s2016\"<:DataType}} where SR<:StaticReserveGroup","page":"PowerSimulations","title":"PowerSimulations.construct_service!","text":"Constructs a service for StaticReserveGroup.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.container_spec-Union{Tuple{T}, Tuple{Type{T}, Vararg{Any, N} where N}} where T","page":"PowerSimulations","title":"PowerSimulations.container_spec","text":"Returns the correct container spec for the selected type of JuMP Model\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.cost_function!-Union{Tuple{T}, Tuple{PowerSimulations.OptimizationContainer, InfrastructureSystems.FlattenIteratorWrapper{T}, DeviceModel{T, ThermalDispatchNoMin}, Type{var\"#s2015\"} where var\"#s2015\"<:PowerModels.AbstractPowerModel, Union{Nothing, PowerSimulations.AbstractAffectFeedForward}}} where T<:ThermalGen","page":"PowerSimulations","title":"PowerSimulations.cost_function!","text":"Cost function for generators formulated as No-Min\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.cost_function!-Union{Tuple{U}, Tuple{T}, Tuple{PowerSimulations.OptimizationContainer, InfrastructureSystems.FlattenIteratorWrapper{T}, DeviceModel{T, U}, Type{var\"#s332\"} where var\"#s332\"<:PowerModels.AbstractPowerModel}, Tuple{PowerSimulations.OptimizationContainer, InfrastructureSystems.FlattenIteratorWrapper{T}, DeviceModel{T, U}, Type{var\"#s331\"} where var\"#s331\"<:PowerModels.AbstractPowerModel, Union{Nothing, PowerSimulations.AbstractAffectFeedForward}}} where {T<:Component, U<:PowerSimulations.AbstractDeviceFormulation}","page":"PowerSimulations","title":"PowerSimulations.cost_function!","text":"Add variables to the OptimizationContainer for a service.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.device_commitment!-Tuple{PowerSimulations.OptimizationContainer, Vector{InitialCondition}, Symbol, Tuple{Symbol, Symbol, Symbol}}","page":"PowerSimulations","title":"PowerSimulations.device_commitment!","text":"Constructs multi-timestep constraint from initial conditions and binary variable tuple.\n\nConstraints\n\nvarstart + varstop <= 1.0\n\nIf t = 1:\n\nvaron[name, 1] == ic.value + varstart[name, 1] - varstop[name, 1]\n\nwhere ic in initial_condtions.\n\nIf t > 1:\n\nvaron[name, t] == varon[name, t-1] + varstart[name, t] - varstop[name, t]\n\nLaTeX\n\nx^on_t + x^off_t leq 10 forall t\n\nx^on_1 = x^on_init + x^start_1 - x^stop_1 text for  t = 1\n\nx^on_t = x^on_t-1 + x^start_t - x^stop_t forall t geq 2\n\nArguments\n\noptimizationcontainer::OptimizationContainer : the optimizationcontainer model built in PowerSimulations\ninitial_conditions::Vector{InitialCondition} : for time zero 'varon'\ncons_name::Symbol : name of the constraint\nvar_names::Tuple{Symbol, Symbol, Symbol} : the names of the variables\n: var_names[1] : varstart\n: var_names[2] : varstop\n: var_names[3] : varon\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.device_duration_compact_retrospective!-Tuple{PowerSimulations.OptimizationContainer, Vector{NamedTuple{(:up, :down), Tuple{Float64, Float64}}}, Matrix{InitialCondition}, Symbol, Tuple{Symbol, Symbol, Symbol}}","page":"PowerSimulations","title":"PowerSimulations.device_duration_compact_retrospective!","text":"This formulation of the duration constraints adds over the start times looking backwards.\n\nLaTeX\n\nMinimum up-time constraint:\n\nsum_i=t-min(d_min^up T)+ 1^t x_i^start - x_t^on leq 0\n\nfor i in the set of time steps.\n\nMinimum down-time constraint:\n\nsum_i=t-min(d_min^down T) + 1^t x_i^stop + x_t^on leq 1\n\nfor i in the set of time steps.\n\nArguments\n\noptimizationcontainer::OptimizationContainer : the optimizationcontainer model built in PowerSimulations\nduration_data::Vector{UpDown} : gives how many time steps variable needs to be up or down\ninitial_duration::Matrix{InitialCondition} : gives initial conditions for up (column 1) and down (column 2)\ncons_name::Symbol : name of the constraint\nvar_names::Tuple{Symbol, Symbol, Symbol}) : names of the variables\n: var_names[1] : varon\n: var_names[2] : varstart\n: var_names[3] : varstop\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.device_duration_look_ahead!-Tuple{PowerSimulations.OptimizationContainer, Vector{NamedTuple{(:up, :down), Tuple{Float64, Float64}}}, Matrix{InitialCondition}, Symbol, Tuple{Symbol, Symbol, Symbol}}","page":"PowerSimulations","title":"PowerSimulations.device_duration_look_ahead!","text":"This formulation of the duration constraints looks ahead in the time frame of the model.\n\nLaTeX\n\nMinimum up-time constraint:\n\nIf t leq d_min^up\n\nd_min^downx_t^stop - sum_i=t-d_min^up + 1^t x_i^on - x_init^up leq 0\n\nfor i in the set of time steps. Otherwise:\n\nd_min^downx_t^stop - sum_i=t-d_min^up + 1^t x_i^on leq 0\n\nfor i in the set of time steps.\n\nMinimum down-time constraint:\n\nIf t leq d_min^down\n\nd_min^upx_t^start - sum_i=t-d_min^down + 1^t (1 - x_i^on) - x_init^down leq 0\n\nfor i in the set of time steps. Otherwise:\n\nd_min^upx_t^start - sum_i=t-d_min^down + 1^t (1 - x_i^on) leq 0\n\nfor i in the set of time steps.\n\nArguments\n\noptimizationcontainer::OptimizationContainer : the optimizationcontainer model built in PowerSimulations\nduration_data::Vector{UpDown} : gives how many time steps variable needs to be up or down\ninitial_duration::Matrix{InitialCondition} : gives initial conditions for up (column 1) and down (column 2)\ncons_name::Symbol : name of the constraint\nvar_names::Tuple{Symbol, Symbol, Symbol}) : names of the variables\n: var_names[1] : varon\n: var_names[2] : varstart\n: var_names[3] : varstop\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.device_duration_parameters!-Tuple{PowerSimulations.OptimizationContainer, Vector{NamedTuple{(:up, :down), Tuple{Float64, Float64}}}, Matrix{InitialCondition}, Symbol, Tuple{Symbol, Symbol, Symbol}}","page":"PowerSimulations","title":"PowerSimulations.device_duration_parameters!","text":"This formulation of the duration constraints considers parameters.\n\nLaTeX\n\nMinimum up-time constraint:\n\nIf t leq d_min^up\n\nd_min^downx_t^stop - sum_i=t-d_min^up + 1^t x_i^on - x_init^up leq 0\n\nfor i in the set of time steps. Otherwise:\n\nsum_i=t-d_min^up + 1^t x_i^start - x_t^on leq 0\n\nfor i in the set of time steps.\n\nMinimum down-time constraint:\n\nIf t leq d_min^down\n\nd_min^upx_t^start - sum_i=t-d_min^down + 1^t (1 - x_i^on) - x_init^down leq 0\n\nfor i in the set of time steps. Otherwise:\n\nsum_i=t-d_min^down + 1^t x_i^stop + x_t^on leq 1\n\nfor i in the set of time steps.\n\nArguments\n\noptimizationcontainer::OptimizationContainer : the optimizationcontainer model built in PowerSimulations\nduration_data::Vector{UpDown} : gives how many time steps variable needs to be up or down\ninitialdurationon::Vector{InitialCondition} : gives initial number of time steps variable is up\ninitialdurationoff::Vector{InitialCondition} : gives initial number of time steps variable is down\ncons_name::Symbol : name of the constraint\nvar_names::Tuple{Symbol, Symbol, Symbol}) : names of the variables\n: var_names[1] : varon\n: var_names[2] : varstart\n: var_names[3] : varstop\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.device_duration_retrospective!-Tuple{PowerSimulations.OptimizationContainer, Vector{NamedTuple{(:up, :down), Tuple{Float64, Float64}}}, Matrix{InitialCondition}, Symbol, Tuple{Symbol, Symbol, Symbol}}","page":"PowerSimulations","title":"PowerSimulations.device_duration_retrospective!","text":"This formulation of the duration constraints adds over the start times looking backwards.\n\nLaTeX\n\nMinimum up-time constraint:\n\nIf t leq d_min^up - d_init^up and d_init^up  0\n\n1 + sum_i=t-d_min^up + 1^t x_i^start - x_t^on leq 0\n\nfor i in the set of time steps. Otherwise:\n\nsum_i=t-d_min^up + 1^t x_i^start - x_t^on leq 0\n\nfor i in the set of time steps.\n\nMinimum down-time constraint:\n\nIf t leq d_min^down - d_init^down and d_init^down  0\n\n1 + sum_i=t-d_min^down + 1^t x_i^stop + x_t^on leq 1\n\nfor i in the set of time steps. Otherwise:\n\nsum_i=t-d_min^down + 1^t x_i^stop + x_t^on leq 1\n\nfor i in the set of time steps.\n\nArguments\n\noptimizationcontainer::OptimizationContainer : the optimizationcontainer model built in PowerSimulations\nduration_data::Vector{UpDown} : gives how many time steps variable needs to be up or down\ninitial_duration::Matrix{InitialCondition} : gives initial conditions for up (column 1) and down (column 2)\ncons_name::Symbol : name of the constraint\nvar_names::Tuple{Symbol, Symbol, Symbol}) : names of the variables\n: var_names[1] : varon\n: var_names[2] : varstart\n: var_names[3] : varstop\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.device_energy_budget_param_ub-Tuple{PowerSimulations.OptimizationContainer, Vector{PowerSimulations.DeviceTimeSeriesConstraintInfo}, Symbol, PowerSimulations.UpdateRef, Symbol}","page":"PowerSimulations","title":"PowerSimulations.device_energy_budget_param_ub","text":"This function define the budget constraint (using params) for the active power budget formulation.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.device_energy_budget_ub-Tuple{PowerSimulations.OptimizationContainer, Vector{PowerSimulations.DeviceTimeSeriesConstraintInfo}, Symbol, Symbol}","page":"PowerSimulations","title":"PowerSimulations.device_energy_budget_ub","text":"This function define the budget constraint for the active power budget formulation.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.device_linear_rateofchange!-Tuple{PowerSimulations.OptimizationContainer, Vector{PowerSimulations.DeviceRampConstraintInfo}, Symbol, Symbol}","page":"PowerSimulations","title":"PowerSimulations.device_linear_rateofchange!","text":"Constructs allowed rate-of-change constraints from variables, initial condtions, and rate data.\n\nConstraints\n\nIf t = 1:\n\nvariable[name, 1] - initial_conditions[ix].value <= rate_data[1][ix].up\n\ninitial_conditions[ix].value - variable[name, 1] <= rate_data[1][ix].down\n\nIf t > 1:\n\nvariable[name, t] - variable[name, t-1] <= rate_data[1][ix].up\n\nvariable[name, t-1] - variable[name, t] <= rate_data[1][ix].down\n\nLaTeX\n\nr^down leq x_1 - x_init leq r^up text for  t = 1\n\nr^down leq x_t - x_t-1 leq r^up forall t geq 2\n\nArguments\n\noptimizationcontainer::OptimizationContainer : the optimizationcontainer model built in PowerSimulations\nrate_data::Tuple{Vector{String}, Vector{UpDown}} : gives name (1) and max ramp up/down rates (2)\ninitial_conditions::Vector{InitialCondition} : for time zero 'variable'\ncons_name::Symbol : name of the constraint\nvar_name::Tuple{Symbol, Symbol, Symbol} : the name of the variable\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.device_mixedinteger_rateofchange!-Tuple{PowerSimulations.OptimizationContainer, Vector{PowerSimulations.DeviceRampConstraintInfo}, Symbol, Tuple{Symbol, Symbol, Symbol}}","page":"PowerSimulations","title":"PowerSimulations.device_mixedinteger_rateofchange!","text":"Constructs allowed rate-of-change constraints from variables, initial condtions, start/stop status, and rate data\n\nEquations\n\nIf t = 1:\n\nvariable[name, 1] - initial_conditions[ix].value <= rate_data[1][ix].up + rate_data[2][ix].max*varstart[name, 1]\n\ninitial_conditions[ix].value - variable[name, 1] <= rate_data[1][ix].down + rate_data[2][ix].min*varstop[name, 1]\n\nIf t > 1:\n\nvariable[name, t] - variable[name, t-1] <= rate_data[1][ix].up + rate_data[2][ix].max*varstart[name, t]\n\nvariable[name, t-1] - variable[name, t] <= rate_data[1][ix].down + rate_data[2][ix].min*varstop[name, t]\n\nLaTeX\n\nr^down + r^min x^stop_1 leq x_1 - x_init leq r^up + r^max x^start_1 text for  t = 1\n\nr^down + r^min x^stop_t leq x_t - x_t-1 leq r^up + r^max x^start_t forall t geq 2\n\nArguments\n\noptimizationcontainer::OptimizationContainer : the optimizationcontainer model built in PowerSimulations\nrate_data::Tuple{Vector{String}, Vector{UpDown}, Vector{MinMax}} : (1) gives name                                                                    (2) gives min/max ramp rates                                                                    (3) gives min/max for 'variable'\ninitial_conditions::Vector{InitialCondition} : for time zero 'variable'\ncons_name::Symbol : name of the constraint\nvar_names::Tuple{Symbol, Symbol, Symbol} : the names of the variables\n: var_names[1] : 'variable'\n: var_names[2] : 'varstart'\n: var_names[3] : 'varstop'\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.device_multistart_range!-Tuple{PowerSimulations.OptimizationContainer, PowerSimulations.RangeConstraintSpecInternal}","page":"PowerSimulations","title":"PowerSimulations.device_multistart_range!","text":"Constructs min/max range constraint from device variable and on/off decision variable.\n\nConstraints\n\n        - max(limits.max - lag_ramp_limits.startup, 0) * var_on[name, t] ```\n\n\nvarcts[name, t] <= (limits.max-limits.min)*varbin[name, t])         - max(limits.max - lagramplimits.shutdown, 0) * var_off[name, t] ```\n\nwhere limits and lagramplimits is in range_data.\n\nLaTeX\n\nx^cts leq (limits^max-limits^min) x^bin - max(limits^max - lag^startup 0) x^on\n\nx^cts leq (limits^max-limits^min) x^bin - max(limits^max - lag^shutdown 0) x^off\n\nArguments\n\noptimizationcontainer::OptimizationContainer : the optimizationcontainer model built in PowerSimulations\nrange_data::Vector{DeviceRange} : contains names and vector of min/max\ncons_name::Symbol : name of the constraint\nvar_name::Symbol : the name of the continuous variable\nbinvar_names::Symbol : the names of the binary variables\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.device_multistart_range_ic!-Tuple{PowerSimulations.OptimizationContainer, Vector{PowerSimulations.DeviceMultiStartRangeConstraintsInfo}, Matrix{InitialCondition}, Symbol, Symbol}","page":"PowerSimulations","title":"PowerSimulations.device_multistart_range_ic!","text":"Constructs min/max range constraint from device variable and on/off decision variable.\n\nConstraints\n\nmax(limits.max - lag_ramp_limits.shutdown, 0) var_off[name, 1] <= initial_power[ix].value         - (limits.max - limits.min)initial_status[ix].value\n\nwhere limits in range_data.\n\nLaTeX\n\nmax(limits^max - lag^shutdown 0) x^off leq initial_condition^power - (limits^max - limits^min) initial_condition^status\n\nArguments\n\noptimizationcontainer::OptimizationContainer : the optimizationcontainer model built in PowerSimulations\nrange_data::Vector{DeviceRange} : contains names and vector of min/max\ninitial_conditions::Matrix{InitialCondition} :\ncons_name::Symbol : name of the constraint\nvar_name::Symbol : name of the shutdown variable\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.device_multistart_rateofchange!-Tuple{PowerSimulations.OptimizationContainer, Vector{PowerSimulations.DeviceRampConstraintInfo}, Symbol, Symbol}","page":"PowerSimulations","title":"PowerSimulations.device_multistart_rateofchange!","text":"Constructs allowed rate-of-change constraints from variables, initial condtions, start/stop status, and rate data\n\nEquations\n\nIf t = 1:\n\nvariable[name, 1] - initial_conditions[ix].value <= rate_data[1][ix].up\n\ninitial_conditions[ix].value - variable[name, 1] <= rate_data[1][ix].down\n\nIf t > 1:\n\nvariable[name, t] - variable[name, t-1] <= rate_data[1][ix].up\n\nvariable[name, t-1] - variable[name, t] <= rate_data[1][ix].down\n\nLaTeX\n\nr^down  leq x_1 - x_init leq r^up  text for  t = 1\n\nr^down leq x_t - x_t-1 leq r^up  forall t geq 2\n\nArguments\n\noptimizationcontainer::OptimizationContainer : the optimizationcontainer model built in PowerSimulations\nrate_data::Tuple{Vector{String}, Vector{UpDown}, Vector{MinMax}} : (1) gives name                                                                    (2) gives min/max ramp rates                                                                    (3) gives min/max for 'variable'\ninitial_conditions::Vector{InitialCondition} : for time zero 'variable'\ncons_name::Symbol : name of the constraint\nvar_names::Tuple{Symbol, Symbol, Symbol} : the names of the variables\n: var_name : 'variable'\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.device_range!-Tuple{PowerSimulations.OptimizationContainer, PowerSimulations.RangeConstraintSpecInternal}","page":"PowerSimulations","title":"PowerSimulations.device_range!","text":"Constructs min/max range constraint from device variable.\n\nConstraints\n\nIf min and max within an epsilon width:\n\nvariable[name, t] == limits.max\n\nOtherwise:\n\nlimits.min <= variable[name, t] <= limits.max\n\nwhere limits in constraint_infos.\n\nLaTeX\n\nx = limits^max text for  limits^max - limits^min  varepsilon\n\nlimits^min leq x leq limits^max text otherwise \n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.device_semicontinuousrange!-Tuple{PowerSimulations.OptimizationContainer, PowerSimulations.RangeConstraintSpecInternal}","page":"PowerSimulations","title":"PowerSimulations.device_semicontinuousrange!","text":"Constructs min/max range constraint from device variable and on/off decision variable.\n\nConstraints\n\nIf device min = 0:\n\nvarcts[name, t] <= limits.max*varbin[name, t])\n\nvarcts[name, t] >= 0.0\n\nOtherwise:\n\nvarcts[name, t] <= limits.max*varbin[name, t]\n\nvarcts[name, t] >= limits.min*varbin[name, t]\n\nwhere limits in constraint_infos.\n\nLaTeX\n\n0 leq x^cts leq limits^max x^bin text for  limits^min = 0\n\nlimits^min x^bin leq x^cts leq limits^max x^bin text otherwise \n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.device_start_type_constraint-Tuple{PowerSimulations.OptimizationContainer, Vector{PowerSimulations.DeviceStartTypesConstraintInfo}, Symbol, Symbol, Tuple{Symbol, Symbol, Symbol}}","page":"PowerSimulations","title":"PowerSimulations.device_start_type_constraint","text":"device_start_type_constraint(optimization_container::OptimizationContainer,\n                        data::Vector{DeviceStartTypesConstraintInfo},\n                        cons_name::Symbol,\n                        var_start::Symbol,\n                        var_names::Tuple{Symbol, Symbol, Symbol},)\n\nConstructs contraints that restricts devices to one type of start at a time\n\nEquations\n\nsum(var_starts[name, s, t] for s in starts) = var_start[name, t]\n\nLaTeX\n\nsum^S_g_s=1 δ^s(t)  eq  x^start(t)\n\nArguments\n\noptimizationcontainer::OptimizationContainer : the optimizationcontainer model built in PowerSimulations\ndata::Vector{DeviceStartTypesConstraintInfo},\ncons_name::Symbol : name of the constraint\nvar_start::Symbol : name of the startup variable\nvar_starts::Tuple{Symbol, Symbol} : the names of the different start variables\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.device_startup_initial_condition-Tuple{PowerSimulations.OptimizationContainer, Vector{PowerSimulations.DeviceStartUpConstraintInfo}, Vector{InitialCondition}, Symbol, Tuple{Symbol, Symbol}, Symbol}","page":"PowerSimulations","title":"PowerSimulations.device_startup_initial_condition","text":"device_startup_initial_condition(optimization_container::OptimizationContainer,\n                        data::Vector{DeviceStartUpConstraintInfo},\n                        initial_conditions::Vector{InitialCondition},\n                        cons_name::Symbol,\n                        var_names::Tuple{Symbol, Symbol},\n                        bin_name::Symbol,)\n\nConstructs contraints that restricts devices to one type of start at a time\n\nEquations\n\nub: (time_limits[st+1]-1)*δ^{s}(t) + (1 - δ^{s}(t)) * M_VALUE >= sum(1-varbin[name, i]) for i in 1:t) + initial_condition_offtime lb: (time_limits[st]-1)*δ^{s}(t) =< sum(1-varbin[name, i]) for i in 1:t) + initial_condition_offtime\n\nLaTeX\n\nTS^s+1_g δ^s(t) + (1-δ^s(t)) M_VALUE   geq  sum^t_i=1 x^status(i)  +  DT_g^0  forall t in 1 ldots  TS^s+1_g\n\nTS^s_g δ^s(t) leq  sum^t_i=1 x^status(i)  +  DT_g^0  forall t in 1 ldots  TS^s+1_g\n\nArguments\n\noptimizationcontainer::OptimizationContainer : the optimizationcontainer model built in PowerSimulations\ndata::Vector{DeviceStartTypesConstraintInfo},\ncons_name::Symbol : name of the constraint\nvar_names::Tuple{Symbol, Symbol} : the names of the different start variables\nbin_name::Symbol : name of the status variable\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.device_timeseries_lb!-Tuple{PowerSimulations.OptimizationContainer, PowerSimulations.TimeSeriesConstraintSpecInternal}","page":"PowerSimulations","title":"PowerSimulations.device_timeseries_lb!","text":"Constructs lower bound for given variable subject to time series data and a multiplier.\n\nConstraint\n\nconstraint_infos[name].multiplier * ts_data[name].timeseries[t] <= variable[name, t]\n\nLaTeX\n\nr^val r_t leq x_t forall t\n\nwhere (name, data) in range_data.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.device_timeseries_param_lb!-Tuple{PowerSimulations.OptimizationContainer, PowerSimulations.TimeSeriesConstraintSpecInternal}","page":"PowerSimulations","title":"PowerSimulations.device_timeseries_param_lb!","text":"Constructs lower bound for given variable using a parameter. The constraint is     built with a time series data vector and a multiplier\n\nConstraint\n\nconstraint_infos[name].multiplier * param[name, t] <= variable[name, t]\n\nLaTeX\n\nr^val x^param_t leq x^var_t forall t\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.device_timeseries_param_ub!-Tuple{PowerSimulations.OptimizationContainer, PowerSimulations.TimeSeriesConstraintSpecInternal}","page":"PowerSimulations","title":"PowerSimulations.device_timeseries_param_ub!","text":"Constructs upper bound for given variable using a parameter. The constraint is     built with a time series data vector and a multiplier\n\nConstraint\n\nvariable[name, t] <= constraint_infos[name].multiplier * param[name, t]\n\nLaTeX\n\nx^var_t leq r^val x^param_t forall t\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.device_timeseries_ub!-Tuple{PowerSimulations.OptimizationContainer, PowerSimulations.TimeSeriesConstraintSpecInternal}","page":"PowerSimulations","title":"PowerSimulations.device_timeseries_ub!","text":"Constructs upper bound for given variable and time series data and a multiplier.\n\nConstraint\n\nvariable[name, t] <= constraint_infos[name].multiplier * ts_data[name].timeseries[t]\n\nLaTeX\n\nx_t leq r^val r_t forall t\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.device_timeseries_ub_bigM!-Tuple{PowerSimulations.OptimizationContainer, PowerSimulations.TimeSeriesConstraintSpecInternal}","page":"PowerSimulations","title":"PowerSimulations.device_timeseries_ub_bigM!","text":"Constructs upper bound for variable and time series and a multiplier or confines to 0 depending on binary variable.     Uses BigM constraint type to allow for parameter since ParameterJuMP doesn't support var*parameter\n\nconstraint_infos\n\nvarcts[name, t] - constraint_infos[name].multipliers * param[name, t] <= (1 - varbin[name, t]) * M_value\n\nvarcts[name, t] <= varbin[name, t]*M_value\n\nLaTeX\n\nx^cts_t - r^val x^param_t leq M(1 - x^bin_t ) forall t\n\nx^cts_t leq M x^bin_t forall t\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.device_timeseries_ub_bin!-Tuple{PowerSimulations.OptimizationContainer, PowerSimulations.TimeSeriesConstraintSpecInternal}","page":"PowerSimulations","title":"PowerSimulations.device_timeseries_ub_bin!","text":"Constructs upper bound for variable and time series or confines to 0 depending on binary variable.     The upper bound is defined by a time series and a multiplier.\n\nconstraint_infos\n\nvarcts[name, t] <= varbin[name, t]* constraint_infos[name].multiplier * ts_data[name].timeseries[t]\n\nwhere (name, data) in range_data.\n\nLaTeX\n\nx^cts_t leq r^val r_t x^bin_t forall t\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.energy_balance!-Tuple{PowerSimulations.OptimizationContainer, PowerSimulations.DeviceEnergyBalanceConstraintSpecInternal}","page":"PowerSimulations","title":"PowerSimulations.energy_balance!","text":"Constructs multi-timestep constraint from initial condition, efficiency data, and variable tuple\n\nConstraints\n\nIf t = 1: varenergy[name, 1] == initial_conditions[ix].value + varin[name, 1]*eff_in*fraction_of_hour - varout[name, 1]*fraction_of_hour/eff_out If t > 1: varenergy[name, t] == varenergy[name, t-1] + varin[name, t]*eff_in*fraction_of_hour - varout[name, t]*fraction_of_hour/eff_out\n\nLaTeX\n\nx^energy_1 == x^energy_init + frhr eta^in x^in_1 - fracfrhreta^out x^out_1 text for  t = 1 x^energy_t == x^energy_t-1 + frhr eta^in x^in_t - fracfrhreta^out x^out_t forall t geq 2\n\nArguments\n\noptimizationcontainer::OptimizationContainer : the optimizationcontainer model built in PowerSimulations\ninputs::Vector{DeviceEnergyBalanceConstraintSpecInternal} : stores constraint information \n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.energy_balance_param!-Tuple{PowerSimulations.OptimizationContainer, PowerSimulations.DeviceEnergyBalanceConstraintSpecInternal}","page":"PowerSimulations","title":"PowerSimulations.energy_balance_param!","text":"Constructs multi-timestep constraint from initial condition, efficiency data, and variable tuple\n\nConstraints\n\nIf t = 1: varenergy[name, 1] == initial_conditions[ix].value + varin[name, 1]*eff_in*fraction_of_hour - varout[name, 1]*fraction_of_hour/eff_out If t > 1: varenergy[name, t] == varenergy[name, t-1] + varin[name, t]*eff_in*fraction_of_hour - varout[name, t]*fraction_of_hour/eff_out\n\nLaTeX\n\nx^energy_1 == x^energy_init + frhr eta^in x^in_1 - fracfrhreta^out x^out_1 text for  t = 1 x^energy_t == x^energy_t-1 + frhr eta^in x^in_t - fracfrhreta^out x^out_t forall t geq 2\n\nArguments\n\noptimizationcontainer::OptimizationContainer : the optimizationcontainer model built in PowerSimulations\ninputs::Vector{DeviceEnergyBalanceConstraintSpecInternal} : stores constraint information \n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.energy_budget_constraints!-Union{Tuple{H}, Tuple{PowerSimulations.OptimizationContainer, InfrastructureSystems.FlattenIteratorWrapper{H}, DeviceModel{H, var\"#s2014\"} where var\"#s2014\"<:PowerSimulations.AbstractHydroFormulation, Type{var\"#s332\"} where var\"#s332\"<:PowerModels.AbstractPowerModel, Union{Nothing, PowerSimulations.AbstractAffectFeedForward}}} where H<:HydroGen","page":"PowerSimulations","title":"PowerSimulations.energy_budget_constraints!","text":"This function define the budget constraint for the active power budget formulation.\n\nsum(Pt) = Budget\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.energy_target!-Union{Tuple{T}, Tuple{PowerSimulations.OptimizationContainer, Vector{T}, Symbol, Tuple{Symbol, Symbol, Symbol}}} where T<:PowerSimulations.DeviceTimeSeriesConstraintInfo","page":"PowerSimulations","title":"PowerSimulations.energy_target!","text":"Constructs constraint energy target data, and variable\n\nConstraints\n\nvarenergyname end  = paramenergytargetname end\n\nLaTeX\n\nx^energy_t  = x^energy_target text for  t = end\n\nArguments\n\noptimizationcontainer::OptimizationContainer : the optimizationcontainer model built in PowerSimulations\ntimeseriesdata::Vector{DeviceTimeSeriesConstraintInfo} : Target reservoir storage forecast information\ncons_name::Symbol : energy target constraint name\nvar_name::Symbol : the name of the Energy  variable\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.energy_target_param!-Tuple{PowerSimulations.OptimizationContainer, Vector{PowerSimulations.DeviceTimeSeriesConstraintInfo}, Symbol, Tuple{Symbol, Symbol, Symbol}, PowerSimulations.UpdateRef}","page":"PowerSimulations","title":"PowerSimulations.energy_target_param!","text":"Constructs constraint energy target data, and variable\n\nConstraints\n\nvarenergyname end  = paramenergytargetname end\n\nLaTeX\n\nx^energy_t  = x^energy_target text for  t = end\n\nArguments\n\noptimizationcontainer::OptimizationContainer : the optimizationcontainer model built in PowerSimulations\ntimeseriesdata::Vector{DeviceTimeSeriesConstraintInfo} : Target reservoir storage forecast information\ncons_names::Symbol : name of the constraint\nvar_names::Symbol : the name of the energy variable\nparam_reference::UpdateRef : UpdateRef to access the target parameter\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.find_key_with_value-Tuple{Any, Any}","page":"PowerSimulations","title":"PowerSimulations.find_key_with_value","text":"Return the key for the given value\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.frequency_response_constraint!-Tuple{PowerSimulations.OptimizationContainer, System}","page":"PowerSimulations","title":"PowerSimulations.frequency_response_constraint!","text":"Expression for the power deviation given deviation in the frequency. This expression allows updating the response of the frequency depending on commitment decisions\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.get_enum_value-Tuple{Any, String}","page":"PowerSimulations","title":"PowerSimulations.get_enum_value","text":"Get the enum value for the string. Case insensitive.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.has_dirty-Tuple{PowerSimulations.ResultCache}","page":"PowerSimulations","title":"PowerSimulations.has_dirty","text":"Return true if the cache has data that has not been flushed to storage.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.initial_condition_update!-Tuple{OperationsProblem, PowerSimulations.ICKey, Vector{InitialCondition}, InterProblemChronology, Simulation}","page":"PowerSimulations","title":"PowerSimulations.initial_condition_update!","text":"Updates the initial conditions of the problem\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.initial_condition_update!-Tuple{OperationsProblem, PowerSimulations.ICKey, Vector{InitialCondition}, IntraProblemChronology, Simulation}","page":"PowerSimulations","title":"PowerSimulations.initial_condition_update!","text":"Updates the initial conditions of the problem\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.initial_range_constraints!-Union{Tuple{S}, Tuple{D}, Tuple{T}, Tuple{PowerSimulations.OptimizationContainer, InfrastructureSystems.FlattenIteratorWrapper{T}, DeviceModel{T, D}, Type{S}, Union{Nothing, PowerSimulations.AbstractAffectFeedForward}}} where {T<:ThermalMultiStart, D<:PowerSimulations.AbstractCompactUnitCommitment, S<:PowerModels.AbstractPowerModel}","page":"PowerSimulations","title":"PowerSimulations.initial_range_constraints!","text":"This function adds range constraint for the first time period. Constraint (10) from PGLIB formulation\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.instantiate_nip_expr_model-Tuple{Dict{String, Any}, Any}","page":"PowerSimulations","title":"PowerSimulations.instantiate_nip_expr_model","text":"\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.instantiate_nip_ptdf_expr_model-Tuple{Dict{String, Any}, Any}","page":"PowerSimulations","title":"PowerSimulations.instantiate_nip_ptdf_expr_model","text":"\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.integral_limit_ff-Tuple{PowerSimulations.OptimizationContainer, Symbol, PowerSimulations.UpdateRef, Symbol}","page":"PowerSimulations","title":"PowerSimulations.integral_limit_ff","text":"    integral_limit_ff(optimization_container::OptimizationContainer,\n                    cons_name::Symbol,\n                    param_reference::UpdateRef,\n                    var_name::Symbol)\n\nConstructs a parametrized integral limit constraint to implement feedforward from other models. The Parameters are initialized using the upper boundary values of the provided variables.\n\nConstraints\n\nsum(variable[var_name, t] for t in time_steps)/length(time_steps) <= param_reference[var_name]\n\nLaTeX\n\nsum_t x leq param^max sum_t x * DeltaT_lower leq param^max * DeltaT_upper     P_LL - P_max * ON_upper = 00     P_LL - P_min * ON_upper = 00\n\nArguments\n\noptimizationcontainer::OptimizationContainer : the optimizationcontainer model built in PowerSimulations\ncons_name::Symbol : name of the constraint\nparam_reference : Reference to the PJ.ParameterRef used to determine the upperbound\nvar_name::Symbol : the name of the continuous variable\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.is_cached-Tuple{PowerSimulations.ResultCache, Any, Any, Any, Any}","page":"PowerSimulations","title":"PowerSimulations.is_cached","text":"Return true if the data for timestamp is stored in cache.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.iterate_initial_conditions-Tuple{PowerSimulations.InitialConditions}","page":"PowerSimulations","title":"PowerSimulations.iterate_initial_conditions","text":"Iterate over the keys and vectors of initial conditions.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.list_fields-Tuple{PowerSimulations.HdfSimulationStore, Symbol, Symbol}","page":"PowerSimulations","title":"PowerSimulations.list_fields","text":"Return the fields stored for the problem and container_type (duals/parameters/variables).\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.log_cache_hit_percentages-Tuple{PowerSimulations.ResultCache}","page":"PowerSimulations","title":"PowerSimulations.log_cache_hit_percentages","text":"Log the cache hit percentages for all caches.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.must_run_constraints!-Union{Tuple{S}, Tuple{PowerSimulations.OptimizationContainer, InfrastructureSystems.FlattenIteratorWrapper{ThermalMultiStart}, DeviceModel{ThermalMultiStart, ThermalMultiStartUnitCommitment}, Type{S}, Union{Nothing, PowerSimulations.AbstractAffectFeedForward}}} where S<:PowerModels.AbstractPowerModel","page":"PowerSimulations","title":"PowerSimulations.must_run_constraints!","text":"This function creates constraints that keep must run devices online\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.nodal_expression!-Union{Tuple{U}, Tuple{T}, Tuple{PowerSimulations.OptimizationContainer, InfrastructureSystems.FlattenIteratorWrapper{T}, Type{U}}} where {T<:Device, U<:PowerModels.AbstractPowerModel}","page":"PowerSimulations","title":"PowerSimulations.nodal_expression!","text":"Default implementation to add nodal expressions.\n\nUsers of this function must implement a method for NodalExpressionSpec for their specific types. Users may also implement custom nodal_expression! methods.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.open_store","page":"PowerSimulations","title":"PowerSimulations.open_store","text":"Construct and open an HdfSimulationStore.\n\nWhen reading or writing results in a program you should use the method that accepts a function in order to guarantee that the file handle gets closed.\n\nExamples\n\n# Assumes a simulation has been executed in the './rts' directory with these parameters.\npath = \"./rts\"\nproblem = :ED\nvar_name = :P__ThermalStandard\ntimestamp = DateTime(\"2020-01-01T05:00:00\")\nstore = open_store(HdfSimulationStore, path)\ndf = PowerSimulations.read_result(DataFrame, store, problem, :variables, var_name, timestamp)\n\n\n\n\n\n","category":"function"},{"location":"api/PowerSimulations/#PowerSimulations.powermodels_network!-Union{Tuple{S}, Tuple{PowerSimulations.OptimizationContainer, Type{S}, System, OperationsProblemTemplate}, Tuple{PowerSimulations.OptimizationContainer, Type{S}, System, OperationsProblemTemplate, Any}} where S<:PowerModels.AbstractActivePowerModel","page":"PowerSimulations","title":"PowerSimulations.powermodels_network!","text":"\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.powermodels_network!-Union{Tuple{S}, Tuple{PowerSimulations.OptimizationContainer, Type{S}, System, OperationsProblemTemplate}, Tuple{PowerSimulations.OptimizationContainer, Type{S}, System, OperationsProblemTemplate, Any}} where S<:PowerModels.AbstractPowerModel","page":"PowerSimulations","title":"PowerSimulations.powermodels_network!","text":"\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.problem_build!-Tuple{OperationsProblem{var\"#s331\"} where var\"#s331\"<:PowerSimulations.PowerSimulationsOperationsProblem}","page":"PowerSimulations","title":"PowerSimulations.problem_build!","text":"Default implementation of build method for Operational Problems for models conforming with PowerSimulationsOperationsProblem specification. Overload this function to implement a custom build method\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.pwl_gencost_linear!-Tuple{PowerSimulations.OptimizationContainer, PowerSimulations.AddCostSpec, String, Vector{Tuple{Float64, Float64}}, Int64}","page":"PowerSimulations","title":"PowerSimulations.pwl_gencost_linear!","text":"Returns piecewise cost expression using linear implementation for optimization_container model.\n\nEquations\n\n0 <= pwl_var[i] <= (cost_data[2][i] - cost_data[2][i-1])\n\nvariable = sum(pwl_var[i])\n\ngen_cost = sum(pwl_var[i]*cost_data[1][i]/cost_data[2][i])\n\nLaTeX\n\n0 = pwl_i = (c_2 i - c_2 i-1)\n\nvariable = (sum_iin I pwl_i)\n\ngen_cost = (sum_iin I  pwl_i) c_1 ic_2 i\n\nReturns gen_cost\n\nArguments\n\noptimizationcontainer::OptimizationContainer : the optimizationcontainer model built in PowerSimulations\nvariable::JuMP.Containers.DenseAxisArray{JV} : variable array\ncost_data::Vector{NTuple{2, Float64}} : container for quadratic and linear factors\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.pwl_gencost_sos!-Tuple{PowerSimulations.OptimizationContainer, PowerSimulations.AddCostSpec, String, Vector{Tuple{Float64, Float64}}, Int64}","page":"PowerSimulations","title":"PowerSimulations.pwl_gencost_sos!","text":"Returns piecewise cost expression using SOS Type-2 implementation for optimization_container model.\n\nEquations\n\nvariable = sum(sos_var[i]*cost_data[2][i])\n\ngen_cost = sum(sos_var[i]*cost_data[1][i])\n\nLaTeX\n\nvariable = (sum_iin I c_2 i sos_i)\n\ngen_cost = (sum_iin I c_1 i sos_i)\n\nReturns gen_cost\n\nArguments\n\noptimizationcontainer::OptimizationContainer : the optimizationcontainer model built in PowerSimulations\nvariable::JuMP.Containers.DenseAxisArray{JV} : variable array\ncost_data::PSY.VariableCost{NTuple{2, Float64}} : container for quadratic and linear factors\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.pwlparamcheck-Tuple{Any}","page":"PowerSimulations","title":"PowerSimulations.pwlparamcheck","text":"Returns True/False depending on compatibility of the cost data with the linear implementation method\n\nReturns flag\n\nArguments\n\ncost_ : container for quadratic and linear factors\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.ramp_constraints!-Union{Tuple{S}, Tuple{D}, Tuple{T}, Tuple{PowerSimulations.OptimizationContainer, InfrastructureSystems.FlattenIteratorWrapper{T}, DeviceModel{T, D}, Type{S}, Union{Nothing, PowerSimulations.AbstractAffectFeedForward}}} where {T<:ThermalGen, D<:PowerSimulations.AbstractThermalUnitCommitment, S<:PowerModels.AbstractPowerModel}","page":"PowerSimulations","title":"PowerSimulations.ramp_constraints!","text":"This function adds the ramping limits of generators when there are CommitmentVariables\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.range_ff-Tuple{PowerSimulations.OptimizationContainer, Symbol, Vector{T} where T, Tuple{PowerSimulations.UpdateRef, PowerSimulations.UpdateRef}, Symbol}","page":"PowerSimulations","title":"PowerSimulations.range_ff","text":"    range_ff(optimization_container::OptimizationContainer,\n                    cons_name::Symbol,\n                    param_reference::NTuple{2, UpdateRef},\n                    var_name::Symbol)\n\nConstructs min/max range parametrized constraint from device variable to include feedforward.\n\nConstraints\n\nparam_reference[1][var_name] <= variable[var_name, t] variable[var_name, t] <= param_reference[2][var_name]\n\nwhere r in range_data.\n\nLaTeX\n\nparam^min leq x x leq param^max\n\nArguments\n\noptimizationcontainer::OptimizationContainer : the optimizationcontainer model built in PowerSimulations\nparam_reference::NTuple{2, UpdateRef} : Tuple with the lower bound and upper bound parameter reference\ncons_name::Symbol : name of the constraint\nvar_name::Symbol : the name of the continuous variable\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.rating_constraint!-Tuple{PowerSimulations.OptimizationContainer, Vector{Tuple{String, Float64}}, Symbol, Tuple{Symbol, Symbol}}","page":"PowerSimulations","title":"PowerSimulations.rating_constraint!","text":"Constructs constraint from rating data and related variable tuple.\n\nConstraint\n\nvar1[r[1], t]^2 + var2[r[1], t]^2 <= r[2]^2\n\nwhere r in rating data and t in time steps.\n\nLaTeX\n\nx_1^2 + x_2^2 leq r^2\n\nArguments\n\noptimizationcontainer::OptimizationContainer : the optimizationcontainer model built in PowerSimulations\nrating_data::Vector{Tuple{String, Float64}} : rating data name (1) and value (2)\ncons_name::Symbol : name of the constraint\nvar_names::Tuple{Symbol, Symbol} : the names of the variables\n: var_names[1] : var1\n: var_names[2] : var2\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.read_dataframe-Tuple{AbstractString}","page":"PowerSimulations","title":"PowerSimulations.read_dataframe","text":"Return a DataFrame from a CSV file.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.read_json-Tuple{AbstractString}","page":"PowerSimulations","title":"PowerSimulations.read_json","text":"Return a decoded JSON file.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.read_problem_optimizer_stats-Tuple{PowerSimulations.HdfSimulationStore, Any, Any, Any}","page":"PowerSimulations","title":"PowerSimulations.read_problem_optimizer_stats","text":"Read the optimizer stats for a problem execution.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.read_problem_optimizer_stats-Tuple{PowerSimulations.HdfSimulationStore, Any}","page":"PowerSimulations","title":"PowerSimulations.read_problem_optimizer_stats","text":"Return the optimizer stats for a problem as a DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.read_result-Tuple{PowerSimulations.ResultCache, Any, Any, Any, Any}","page":"PowerSimulations","title":"PowerSimulations.read_result","text":"Read the result from cache. Callers must first call is_cached to check if the timestamp is present.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.read_result-Tuple{Type{DataFrames.DataFrame}, PowerSimulations.HdfSimulationStore, Any, Any, Any, Dates.DateTime}","page":"PowerSimulations","title":"PowerSimulations.read_result","text":"Return DataFrame, DenseAxisArray, or Array for a model result at a timestamp.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.remove_chars-Tuple{String, String}","page":"PowerSimulations","title":"PowerSimulations.remove_chars","text":"Removes the string char from the original string\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.replace_chars-Tuple{String, String, String}","page":"PowerSimulations","title":"PowerSimulations.replace_chars","text":"Replaces the string in char with the stringreplacement\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.reserve_device_semicontinuousrange!-Tuple{PowerSimulations.OptimizationContainer, PowerSimulations.RangeConstraintSpecInternal}","page":"PowerSimulations","title":"PowerSimulations.reserve_device_semicontinuousrange!","text":"Constructs min/max range constraint from device variable and on/off decision variable.\n\nConstraints\n\nIf device min = 0:\n\nvarcts[name, t] <= limits.max * (1 - varbin[name, t])\n\nvarcts[name, t] >= 0.0\n\nOtherwise:\n\nvarcts[name, t] <= limits.max * (1 - varbin[name, t])\n\nvarcts[name, t] >= limits.min * (1 - varbin[name, t])\n\nwhere limits in constraint_infos.\n\nLaTeX\n\n0 leq x^cts leq limits^max (1 - x^bin ) text for  limits^min = 0\n\nlimits^min (1 - x^bin ) leq x^cts leq limits^max (1 - x^bin ) text otherwise \n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.semicontinuousrange_ff-Tuple{PowerSimulations.OptimizationContainer, Symbol, Vector{PowerSimulations.DeviceRangeConstraintInfo}, PowerSimulations.UpdateRef, Symbol}","page":"PowerSimulations","title":"PowerSimulations.semicontinuousrange_ff","text":"        semicontinuousrange_ff(optimization_container::OptimizationContainer,\n                                cons_name::Symbol,\n                                var_name::Symbol,\n                                param_reference::UpdateRef)\n\nConstructs min/max range constraint from device variable with parameter setting.\n\nConstraints\n\nIf device min = 0:\n\nvariable[var_name, t] <= r[2].max*param_reference[var_name]\n\nOtherwise:\n\nvariable[var_name, t] <= r[2].max*param_reference[var_name]\n\nvariable[var_name, t] >= r[2].min*param_reference[var_name]\n\nwhere r in range_data.\n\nLaTeX\n\n00 leq x^var leq r^max x^param text for  r^min = 0\n\nr^min x^param leq x^var leq r^min x^param text otherwise \n\nArguments\n\noptimizationcontainer::OptimizationContainer : the optimizationcontainer model built in PowerSimulations\ncons_name::Symbol : name of the constraint\nvar_name::Symbol : the name of the continuous variable\nparam_reference::UpdateRef : UpdateRef of the parameter\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.serialize_simulation-Tuple{Simulation}","page":"PowerSimulations","title":"PowerSimulations.serialize_simulation","text":"serialize_simulation(sim::Simulation, path = \".\")\n\nSerialize the simulation to a directory in path.\n\nReturn the serialized simulation directory name that is created.\n\nArguments\n\nsim::Simulation: simulation to serialize\npath = \".\": path in which to create the serialzed directory\nforce = false: If true, delete the directory if it already exists. Otherwise, it will  throw an exception.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.service_requirement_constraint!-Union{Tuple{SR}, Tuple{PowerSimulations.OptimizationContainer, SR, ServiceModel{SR, GroupReserve}, Vector{var\"#s2015\"} where var\"#s2015\"<:Service}} where SR<:StaticReserveGroup","page":"PowerSimulations","title":"PowerSimulations.service_requirement_constraint!","text":"This function creates the requirement constraint that will be attained by the apropriate services\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.set_variable_bounds!-Union{Tuple{T}, Tuple{PowerSimulations.OptimizationContainer, Vector{PowerSimulations.DeviceRangeConstraintInfo}, AbstractString, Type{T}}} where T<:Component","page":"PowerSimulations","title":"PowerSimulations.set_variable_bounds!","text":"Adds a bounds to a variable in the optimization model.\n\nBounds\n\nbounds.min <= varstart[name, t] <= bounds.max\n\nLaTeX\n\nx^device_t = bound^min forall t\n\nx^device_t = bound^max forall t\n\nArguments\n\noptimizationcontainer::OptimizationContainer : the optimizationcontainer model built in PowerSimulations\nbounds::DeviceRangeConstraintInfo : contains names and vector of min / max\nvar_type::AbstractString : type of the variable\nT: type of the device\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.sparse_container_spec-Union{Tuple{T}, Tuple{Type{T}, Vararg{Any, N} where N}} where T","page":"PowerSimulations","title":"PowerSimulations.sparse_container_spec","text":"Returns the correct container spec for the selected type of JuMP Model\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.startup_initial_condition_constraints!-Union{Tuple{S}, Tuple{PowerSimulations.OptimizationContainer, InfrastructureSystems.FlattenIteratorWrapper{ThermalMultiStart}, DeviceModel{ThermalMultiStart, ThermalMultiStartUnitCommitment}, Type{S}, Union{Nothing, PowerSimulations.AbstractAffectFeedForward}}} where S<:PowerModels.AbstractPowerModel","page":"PowerSimulations","title":"PowerSimulations.startup_initial_condition_constraints!","text":"This function creates the initial conditions for multi-start devices\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.startup_time_constraints!-Union{Tuple{S}, Tuple{PowerSimulations.OptimizationContainer, InfrastructureSystems.FlattenIteratorWrapper{ThermalMultiStart}, DeviceModel{ThermalMultiStart, ThermalMultiStartUnitCommitment}, Type{S}, Union{Nothing, PowerSimulations.AbstractAffectFeedForward}}} where S<:PowerModels.AbstractPowerModel","page":"PowerSimulations","title":"PowerSimulations.startup_time_constraints!","text":"This function creates the contraints for different types of starts based on generator down-time\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.startup_type_constraints!-Union{Tuple{S}, Tuple{PowerSimulations.OptimizationContainer, InfrastructureSystems.FlattenIteratorWrapper{ThermalMultiStart}, DeviceModel{ThermalMultiStart, ThermalMultiStartUnitCommitment}, Type{S}, Union{Nothing, PowerSimulations.AbstractAffectFeedForward}}} where S<:PowerModels.AbstractPowerModel","page":"PowerSimulations","title":"PowerSimulations.startup_type_constraints!","text":"This function creates constraints to select a single type of startup based on off-time\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.status_initial_condition!-Union{Tuple{D}, Tuple{T}, Tuple{PowerSimulations.OptimizationContainer, InfrastructureSystems.FlattenIteratorWrapper{T}, D}} where {T<:ThermalGen, D<:PowerSimulations.AbstractThermalFormulation}","page":"PowerSimulations","title":"PowerSimulations.status_initial_condition!","text":"Status Init is always calculated based on the Power Output of the device This is to make it easier to calculate when the previous model doesn't contain binaries. For instance, looking back on an ED model to find the IC of the UC model\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.to_array-Tuple{PowerSimulations.OptimizerStats}","page":"PowerSimulations","title":"PowerSimulations.to_array","text":"Convert OptimizerStats to an array of floats that can be serialized to HDF5.\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.turbine_temperature-Tuple{PowerSimulations.OptimizationContainer, Vector{PowerSimulations.DeviceStartUpConstraintInfo}, Symbol, Symbol, Tuple{Symbol, Symbol}}","page":"PowerSimulations","title":"PowerSimulations.turbine_temperature","text":"turbine_temperature(optimization_container::OptimizationContainer,\n                        startup_data::Vector{DeviceStartUpConstraintInfo},\n                        cons_name::Symbol,\n                        var_stop::Symbol,\n                        var_starts::Tuple{Symbol, Symbol})\n\nConstructs contraints for different types of starts based on generator down-time\n\nEquations\n\nfor t in time_limits[s+1]:T\n\nvar_starts[name, s, t] <= sum( var_stop[name, t-i] for i in time_limits[s]:(time_limits[s+1]-1)\n\nLaTeX\n\nδ^s(t)  leq sum_i=TS^s_g^TS^s+1_g x^stop(t-i)\n\nArguments\n\noptimizationcontainer::OptimizationContainer : the optimizationcontainer model built in PowerSimulations\nrate_data::Vector{DeviceStartUpConstraintInfo},\ncons_name::Symbol : name of the constraint\nvar_stop::Symbol : name of the stop variable\nvar_starts::Tuple{Symbol, Symbol} : the names of the different start variables\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.ub_ff-Tuple{PowerSimulations.OptimizationContainer, Symbol, Vector{PowerSimulations.DeviceRangeConstraintInfo}, PowerSimulations.UpdateRef, Symbol}","page":"PowerSimulations","title":"PowerSimulations.ub_ff","text":"    ub_ff(optimization_container::OptimizationContainer,\n          cons_name::Symbol,\n          constraint_infos::Vector{DeviceRangeConstraintInfo},\n          param_reference::UpdateRef,\n          var_name::Symbol)\n\nConstructs a parametrized upper bound constraint to implement feedforward from other models. The Parameters are initialized using the uppper boundary values of the provided variables.\n\nConstraints\n\nvariable[var_name, t] <= param_reference[var_name]\n\nLaTeX\n\nx leq param^max\n\nArguments\n\noptimizationcontainer::OptimizationContainer : the optimizationcontainer model built in PowerSimulations\ncons_name::Symbol : name of the constraint\nparam_reference : Reference to the PJ.ParameterRef used to determine the upperbound\nvar_name::Symbol : the name of the continuous variable\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.update_parameter!-Tuple{PowerSimulations.UpdateRef{JuMP.VariableRef}, PowerSimulations.ParameterContainer, OperationsProblem, Simulation}","page":"PowerSimulations","title":"PowerSimulations.update_parameter!","text":"Updates the forecast parameter value\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.update_problem!-Union{Tuple{M}, Tuple{OperationsProblem{M}, Simulation}} where M<:PowerSimulations.PowerSimulationsOperationsProblem","page":"PowerSimulations","title":"PowerSimulations.update_problem!","text":"Generic problem update function for most problems with no customization\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.variable_cost!-Tuple{PowerSimulations.OptimizationContainer, PowerSimulations.AddCostSpec, String, Nothing, Int64}","page":"PowerSimulations","title":"PowerSimulations.variable_cost!","text":"Adds to the cost function cost terms for sum of variables with common factor to be used for cost expression for optimization_container model.\n\n# Arguments\n\noptimizationcontainer::OptimizationContainer : the optimizationcontainer model built in PowerSimulations\nvar_name::Symbol: The variable name\ncomponentname::String: The componentname of the variable container\ncost_component::PSY.VariableCost{Float64} : container for cost to be associated with variable\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.variable_cost!-Tuple{PowerSimulations.OptimizationContainer, PowerSimulations.AddCostSpec, String, VariableCost{Float64}, Int64}","page":"PowerSimulations","title":"PowerSimulations.variable_cost!","text":"Adds to the cost function cost terms for sum of variables with common factor to be used for cost expression for optimization_container model.\n\n# Arguments\n\noptimizationcontainer::OptimizationContainer : the optimizationcontainer model built in PowerSimulations\nvar_name::Symbol: The variable name\ncomponentname::String: The componentname of the variable container\ncost_component::PSY.VariableCost{Float64} : container for cost to be associated with variable\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.variable_cost!-Tuple{PowerSimulations.OptimizationContainer, PowerSimulations.AddCostSpec, String, VariableCost{Tuple{Float64, Float64}}, Int64}","page":"PowerSimulations","title":"PowerSimulations.variable_cost!","text":"Adds to the cost function cost terms for sum of variables with common factor to be used for cost expression for optimization_container model.\n\nEquation\n\ngen_cost = dt*sign*(sum(variable.^2)*cost_data[1] + sum(variable)*cost_data[2])\n\nLaTeX\n\ncost = dttimes sign (sum_iin I c_1 v_i^2 + sum_iin I c_2 v_i )\n\nfor quadratic factor large enough. If the first term of the quadratic objective is 0.0, adds a linear cost term sum(variable)*cost_data[2]\n\nArguments\n\noptimizationcontainer::OptimizationContainer : the optimizationcontainer model built in PowerSimulations\nvar_name::Symbol: The variable name\ncomponentname::String: The componentname of the variable container\ncost_component::PSY.VariableCost{NTuple{2, Float64}} : container for quadratic and linear factors\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.variable_cost!-Tuple{PowerSimulations.OptimizationContainer, PowerSimulations.AddCostSpec, String, VariableCost{Vector{Tuple{Float64, Float64}}}, Int64}","page":"PowerSimulations","title":"PowerSimulations.variable_cost!","text":"Creates piecewise linear cost function using a sum of variables and expression with sign and time step included.\n\nExpression\n\nJuMP.add_to_expression!(gen_cost, c)\n\nReturns signgen_costdt\n\nLaTeX\n\ncost = signtimes dt sum_vin V c_v\n\nwhere c_v is given by\n\nc_v = sum_iin Ix fracy_i - y_i-1x_i - x_i-1 v^pw_i\n\nArguments\n\noptimizationcontainer::OptimizationContainer : the optimizationcontainer model built in PowerSimulations\nvar_name::Symbol: The variable name\ncomponentname::String: The componentname of the variable container\ncost_component::PSY.VariableCost{Vector{NTuple{2, Float64}}}\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.variable_reactive_net_injection-Tuple{PowerModels.AbstractActivePowerModel}","page":"PowerSimulations","title":"PowerSimulations.variable_reactive_net_injection","text":"active power only models ignore reactive power variables\n\n\n\n\n\n","category":"method"},{"location":"api/PowerSimulations/#PowerSimulations.write_result!","page":"PowerSimulations","title":"PowerSimulations.write_result!","text":"Write a model result for a timestamp to the store.\n\n\n\n\n\n","category":"function"},{"location":"ref/hydro/#Hydro-Generation-Models","page":"Hydro Models","title":"Hydro Generation Models","text":"","category":"section"},{"location":"ref/hydro/","page":"Hydro Models","title":"Hydro Models","text":"Here we present the mathematical formulation of the different models for Hydro Generation.","category":"page"},{"location":"ref/hydro/#Dispatch-Run-of-River-[HydroDispatchRunOfRiver]","page":"Hydro Models","title":"Dispatch Run of River [HydroDispatchRunOfRiver]","text":"","category":"section"},{"location":"ref/hydro/","page":"Hydro Models","title":"Hydro Models","text":"The following model provides upper bounds for the active power based on run of the river inflow, modeled as a eta_t in 01 coefficient of the maximum active power. Additional bounds for reactive power are considered.","category":"page"},{"location":"ref/hydro/","page":"Hydro Models","title":"Hydro Models","text":"beginalign\n  P^textmin le P_t le eta_t P^textmax \n  Q^textmin le Q_t le Q^textmax\nendalign","category":"page"},{"location":"ref/hydro/#Dispatch-Energy-Budget-[HydroDispatchReservoirBudget]","page":"Hydro Models","title":"Dispatch Energy Budget [HydroDispatchReservoirBudget]","text":"","category":"section"},{"location":"ref/hydro/","page":"Hydro Models","title":"Hydro Models","text":"The following model provides an energy budget over the time horizon for the active power.","category":"page"},{"location":"ref/hydro/","page":"Hydro Models","title":"Hydro Models","text":"beginalign\n  sum_t = 1^N P_t cdot Delta T le E^textbudget \n  P^textmin le P_t le P^textmax \n  Q^textmin le Q_t le Q^textmax\nendalign","category":"page"},{"location":"ref/hydro/#Dispatch-Storage-[HydroDispatchReservoirStorage]","page":"Hydro Models","title":"Dispatch Storage [HydroDispatchReservoirStorage]","text":"","category":"section"},{"location":"ref/hydro/","page":"Hydro Models","title":"Hydro Models","text":"The following model includes a energy level E_t to handle the storage energy. Inflow powerI_t can also be included as time series into the balance equation. Spillage S_t is also considered:","category":"page"},{"location":"ref/hydro/","page":"Hydro Models","title":"Hydro Models","text":"beginalign\n  E_t+1 = E_t + (I_t - S_t - P_t)Delta T \n  P^textmin le P_t le P^textmax \n  Q^textmin le Q_t le Q^textmax\nendalign","category":"page"},{"location":"ref/hydro/","page":"Hydro Models","title":"Hydro Models","text":"Future releases will also implement a requirement of the energy at the last time point N:","category":"page"},{"location":"ref/hydro/","page":"Hydro Models","title":"Hydro Models","text":"beginalign\n E_N ge E^textrequirement\nendalign","category":"page"},{"location":"ref/hydro/#Commitment-Run-of-River-[HydroCommitmentRunOfRiver]","page":"Hydro Models","title":"Commitment Run of River [HydroCommitmentRunOfRiver]","text":"","category":"section"},{"location":"ref/hydro/","page":"Hydro Models","title":"Hydro Models","text":"Similar to the dispatch formulation, but considering a binary variable u_t in 0 1 with semi continuous constraints for both active and reactive power:","category":"page"},{"location":"ref/hydro/","page":"Hydro Models","title":"Hydro Models","text":"beginalign\n  P_t le eta_t P^textmax\n  P_t - u_t P^textmax le 0 \n  P_t - u_t P^textmin ge 0 \n  Q_t - u_t Q^textmax le 0 \n  Q_t - u_t Q^textmin ge 0\nendalign","category":"page"},{"location":"ref/hydro/#Commitment-Energy-Budget-[HydroCommitmentReservoirBudget]","page":"Hydro Models","title":"Commitment Energy Budget [HydroCommitmentReservoirBudget]","text":"","category":"section"},{"location":"ref/hydro/","page":"Hydro Models","title":"Hydro Models","text":"Similar to the dispatch formulation, but considering a binary variable u_t in 0 1 with semi continuous constraints for both active and reactive power:","category":"page"},{"location":"ref/hydro/","page":"Hydro Models","title":"Hydro Models","text":"beginalign\n  sum_t = 1^N P_t cdot Delta T le E^textbudget \n  P_t - u_t P^textmax le 0 \n  P_t - u_t P^textmin ge 0 \n  Q_t - u_t Q^textmax le 0 \n  Q_t - u_t Q^textmin ge 0\nendalign","category":"page"},{"location":"ref/hydro/#Commitment-Energy-Budget-[HydroCommitmentReservoirStorage]","page":"Hydro Models","title":"Commitment Energy Budget [HydroCommitmentReservoirStorage]","text":"","category":"section"},{"location":"ref/hydro/","page":"Hydro Models","title":"Hydro Models","text":"Similar to the dispatch formulation, but considering a binary variable u_t in 0 1 with semi continuous constraints for both active and reactive power:","category":"page"},{"location":"ref/hydro/","page":"Hydro Models","title":"Hydro Models","text":"beginalign\n  E_t+1 = E_t + (I_t - S_t - P_t)Delta T \n  P_t - u_t P^textmax le 0 \n  P_t - u_t P^textmin ge 0 \n  Q_t - u_t Q^textmax le 0 \n  Q_t - u_t Q^textmin ge 0\nendalign","category":"page"},{"location":"man/logging/#Logging","page":"Logging","title":"Logging","text":"","category":"section"},{"location":"man/logging/","page":"Logging","title":"Logging","text":"PowerSimulations will output many log messages when building systems and running simulations. You may want to customize what gets logged to the console and, optionally, a file.","category":"page"},{"location":"man/logging/","page":"Logging","title":"Logging","text":"By default all log messages of level Logging.Info or higher will get displayed to the console.  When you run a simulation a simulation-specific logger will take over and log its messages to a file in the logs directory in the simulation output directory. When finished it will relinquish control back to the global logger.","category":"page"},{"location":"man/logging/#Configuring-the-global-logger","page":"Logging","title":"Configuring the global logger","text":"","category":"section"},{"location":"man/logging/","page":"Logging","title":"Logging","text":"To configure the global logger in a Jupyter Notebook or REPL you may configure your own logger with the Julia Logging standard library or use the convenience function provided by PowerSimulations.  This example will log messages of level Logging.Error to console and Logging.Info and higher to the file power-simulations.log in the current directory.","category":"page"},{"location":"man/logging/","page":"Logging","title":"Logging","text":"import Logging\nusing PowerSimulations\nlogger = configure_logging(\n    console_level = Logging.Error,\n    file_level = Logging.Info,\n    filename = \"power-simulations.log\"\n)","category":"page"},{"location":"man/logging/#Configuring-the-simulation-logger","page":"Logging","title":"Configuring the simulation logger","text":"","category":"section"},{"location":"man/logging/","page":"Logging","title":"Logging","text":"You can configure the logging level used by the simulation logger when you call build!(simulation).  Here is an example that increases logging verbosity:","category":"page"},{"location":"man/logging/","page":"Logging","title":"Logging","text":"import Logging\nusing PowerSimulations\nsimulation = Simulation(...)\nbuild!(simulation, console_level = Logging.Info, file_level = Logging.Debug)","category":"page"},{"location":"man/logging/","page":"Logging","title":"Logging","text":"The log file will be located at <your-output-path>/<simulation-name>/<run-output-dir>/logs/simulation.log.","category":"page"},{"location":"man/logging/#Solver-logs","page":"Logging","title":"Solver logs","text":"","category":"section"},{"location":"man/logging/","page":"Logging","title":"Logging","text":"You can configure logging for the solver you use.  Refer to the solver documentation.  PowerSimulations does not redirect or intercept prints to stdout or stderr from other libraries.","category":"page"},{"location":"man/logging/#Recorder-events","page":"Logging","title":"Recorder events","text":"","category":"section"},{"location":"man/logging/","page":"Logging","title":"Logging","text":"PowerSimulations uses the InfrastructureSystems.Recorder to store simulation events in a log file.  Refer to this link for more information.","category":"page"},{"location":"man/storage_energy_target/#Energy-Target-Storage-Formulation","page":"Energy Target Storage Formulation","title":"Energy Target Storage Formulation","text":"","category":"section"},{"location":"man/storage_energy_target/","page":"Energy Target Storage Formulation","title":"Energy Target Storage Formulation","text":"This formulation provide a way for user to tackle the end of horizon effect in battery opertaion by adding a constraint on stored energy at the end of period. The target constraint includes a slack variable which is associated with a penalty for any violation of the constraints, this ensure feasibility of the model for scenarios where it not optimal to excatly meet the target.","category":"page"},{"location":"man/storage_energy_target/#Formulation-Overview","page":"Energy Target Storage Formulation","title":"Formulation Overview","text":"","category":"section"},{"location":"man/storage_energy_target/","page":"Energy Target Storage Formulation","title":"Energy Target Storage Formulation","text":"The features of this model are:","category":"page"},{"location":"man/storage_energy_target/","page":"Energy Target Storage Formulation","title":"Energy Target Storage Formulation","text":"Standard Battery Operation Constraint\nEnergy balance constraint\nEnergy range constraint\nCharging and discharing limit constraint\nPower Contribution in eligible services \nStored Energy Target Constraint ","category":"page"},{"location":"man/storage_energy_target/#Formulations","page":"Energy Target Storage Formulation","title":"Formulations","text":"","category":"section"},{"location":"man/storage_energy_target/#Indices-and-Sets","page":"Energy Target Storage Formulation","title":"Indices and Sets","text":"","category":"section"},{"location":"man/storage_energy_target/","page":"Energy Target Storage Formulation","title":"Energy Target Storage Formulation","text":"beginitemize\n\titemt in cT Hourly time steps 1 ldots T T = tt time_periods\n    itemb in cB - Set of battery device\n    itemh in cH- Set of hydro reservoir device\nenditemize","category":"page"},{"location":"man/storage_energy_target/#Parameters","page":"Energy Target Storage Formulation","title":"Parameters","text":"","category":"section"},{"location":"man/storage_energy_target/","page":"Energy Target Storage Formulation","title":"Energy Target Storage Formulation","text":"beginitemize\n\titemC  Value of energypenalty cost for device b (MW)\n    itemC^value(b) or C^value(h)  - EnergyWater value cost for batteryhydro devices at end of period\n    itemC^penalty(b) or  C^penalty(h) - Penalty cost associated with unsatisfied energy target for batteryhydro devices\n    itemC^var(b) or C^var(h) - Variable cost of generation\n\titemoP_in(b)   Maximum charging power input for device b (MW) tt power_input_maximum\n\titemuP_in(b)   Minimum charging power input for device b (MW) tt power_input_minimum\n    itemoP_out(b)   Maximum discharging power output for device b (MW) tt power_output_maximum\n\titemuP_out(b)   Minimum discharging power output for device b (MW) tt power_output_minimum\n    itemoE(b) Maximum state of charge limt for device b (MWh) tt energy_maximum\n    itemuE(b) Minimum state of charge limt for device b (MWh) tt energy_minimum\n\titemI(bt)) - EnergyWater inflow in the hydro reservoir at timestep (t) for hydro devices\n    itemhatE(bt))  or hatE(ht)) - Energy target at timestep (t) for batteryhydro devices for t in hatT\n\titemE(b)^0   Energy stored in device b (MWh) in the time period prior to t=1 tt energy_stored_t0\nenditemize","category":"page"},{"location":"man/storage_energy_target/#Variables","page":"Energy Target Storage Formulation","title":"Variables","text":"","category":"section"},{"location":"man/storage_energy_target/","page":"Energy Target Storage Formulation","title":"Energy Target Storage Formulation","text":"beginitemize\n\titemp_in(bt) Active power variable for charging  b at time t geq 0\n\titemp_out(b t)  Active power variable for discharging b at time t geq 0\n\titeme(b t) Stored energy variable for b at time t geq 0\n\titeme_slack(b t) Slack variable for energy target constraint for b at time t  geq 0\n    items(ht) - EnergyWater Spilled from a hydro reservoir devices\n    iteme^-_slack(bt)  or  e^-_slack(ht) - Slack variable for energy target constraint for excess\n    iteme^+_slack(bt)  or  e^+_slack(ht) - Slack variable for energy target constraint for shortage\nenditemize","category":"page"},{"location":"man/storage_energy_target/#Model-Description","page":"Energy Target Storage Formulation","title":"Model Description","text":"","category":"section"},{"location":"man/storage_energy_target/","page":"Energy Target Storage Formulation","title":"Energy Target Storage Formulation","text":"This first model is for Power Systems Storage devices (e.g. GenericBattery, BatteryEMS) with StorageManagementCost.","category":"page"},{"location":"man/storage_energy_target/","page":"Energy Target Storage Formulation","title":"Energy Target Storage Formulation","text":"Objective Function","category":"page"},{"location":"man/storage_energy_target/","page":"Energy Target Storage Formulation","title":"Energy Target Storage Formulation","text":"allowdisplaybreaks\nbeginalign\n     textmin sum_b t in hatcT quad e^+_slack(bt)*C^penalty(b) - e^-_slack(bt)* C^value(b) labeleqobj tagOBJ \nendalign\n","category":"page"},{"location":"man/storage_energy_target/","page":"Energy Target Storage Formulation","title":"Energy Target Storage Formulation","text":"subject to:\n Active power constraints","category":"page"},{"location":"man/storage_energy_target/","page":"Energy Target Storage Formulation","title":"Energy Target Storage Formulation","text":"beginalign\n\t\t p_in(bt) + r_g(t) leq  oP_in(b)  forall t in cT  forall b in cB labeleqMaxInput \n\t\t p_in(bt) + r_g(t) geq  uP_in(b)  forall t in cT  forall b in cB labeleqMinInput \n         p_out(bt) + r_g(t) leq  oP_out(b) forall t in cT  forall b in cB labeleqMaxOutput \n\t\t p_out(bt) + r_g(t) geq  uP_out(b) forall t in cT  forall b in cB labeleqMinOutput \nendalign","category":"page"},{"location":"man/storage_energy_target/","page":"Energy Target Storage Formulation","title":"Energy Target Storage Formulation","text":"Energy Limit constraints","category":"page"},{"location":"man/storage_energy_target/","page":"Energy Target Storage Formulation","title":"Energy Target Storage Formulation","text":"beginalign\n\t\t e(bt) leq  oE(b)  forall t in cT  forall b in cB labeleqMaxEnergyLimit \n\t\t e(bt) geq  uE(b)  forall t in cT  forall b in cB labeleqMinEnergyLimit \nendalign","category":"page"},{"location":"man/storage_energy_target/","page":"Energy Target Storage Formulation","title":"Energy Target Storage Formulation","text":"Energy Balance/State of Charge constraint","category":"page"},{"location":"man/storage_energy_target/","page":"Energy Target Storage Formulation","title":"Energy Target Storage Formulation","text":"beginalign\n\t\t e(b1) - E(b)^0 = p_in(b1) - p_out(b1)  forall b in cB labeleqEnergyBalance0 \n\t\t e(bt) -e(bt-1) = p_in(bt) - p_out(bt)  forall t in cTsetminus1  forall b in cB labeleqEnergyBalance \nendalign","category":"page"},{"location":"man/storage_energy_target/","page":"Energy Target Storage Formulation","title":"Energy Target Storage Formulation","text":"Energy Target constraint","category":"page"},{"location":"man/storage_energy_target/","page":"Energy Target Storage Formulation","title":"Energy Target Storage Formulation","text":"beginalign\n         e(bt) + e^+_slack(bt) + e^-_slack(bt) = hatE(bt) quad forall b in cB t in hatcT labeleqEnergyTarget \nendalign","category":"page"},{"location":"man/storage_energy_target/","page":"Energy Target Storage Formulation","title":"Energy Target Storage Formulation","text":"Energy slacks constraint","category":"page"},{"location":"man/storage_energy_target/","page":"Energy Target Storage Formulation","title":"Energy Target Storage Formulation","text":"beginalign\n\t\t e^-_slack(bt) leq 00  forall t in cT  forall b in cB labeleqShortageSlackBound \n\t\t e^+_slack(bt) geq 00  forall t in cT  forall b in cB labeleqSurplusSlackBound \nendalign","category":"page"},{"location":"man/storage_energy_target/#Hydro-Storage-Target-Model-Description","page":"Energy Target Storage Formulation","title":"Hydro Storage Target Model Description","text":"","category":"section"},{"location":"man/storage_energy_target/","page":"Energy Target Storage Formulation","title":"Energy Target Storage Formulation","text":"This model is for Power Systems HydroEnergyReservoir and HydroPumpedStorage devices with StorageManagementCost.","category":"page"},{"location":"man/storage_energy_target/","page":"Energy Target Storage Formulation","title":"Energy Target Storage Formulation","text":"Objective Function","category":"page"},{"location":"man/storage_energy_target/","page":"Energy Target Storage Formulation","title":"Energy Target Storage Formulation","text":"allowdisplaybreaks\nbeginalign\n     textmin   sum_ht p(ht) cdot C^var(h) + C^fixed(h) \n    + sum_h t in hatcT quad e^+_slack(ht) * C^penalty(h) - e^-_slack(ht) * C^value(h)   labeleqobj tagOBJ \nendalign\n","category":"page"},{"location":"man/storage_energy_target/","page":"Energy Target Storage Formulation","title":"Energy Target Storage Formulation","text":"subject to:\n Active power constraints","category":"page"},{"location":"man/storage_energy_target/","page":"Energy Target Storage Formulation","title":"Energy Target Storage Formulation","text":"beginalign\n\t\t p(ht)  leq  oP(h)  forall t in cT  forall h in cH labeleqMinOutput \n\t\t p(ht)  geq  uP(h)  forall t in cT  forall h in cH labeleqMinOutput \n         s(ht) leq  cS^max(h) forall t in cT  forall h in cH labeleqMaxSpillage \n\t\t s(ht) geq  0  forall t in cT  forall h in cH labeleqMinSpillage \nendalign","category":"page"},{"location":"man/storage_energy_target/","page":"Energy Target Storage Formulation","title":"Energy Target Storage Formulation","text":"Energy Limit constraints","category":"page"},{"location":"man/storage_energy_target/","page":"Energy Target Storage Formulation","title":"Energy Target Storage Formulation","text":"beginalign\n\t\t e(bt) leq  oE(b)  forall t in cT  forall b in cB labeleqMaxEnergyLimit \n\t\t e(bt) geq  uE(b)  forall t in cT  forall b in cB labeleqMinEnergyLimit \nendalign","category":"page"},{"location":"man/storage_energy_target/","page":"Energy Target Storage Formulation","title":"Energy Target Storage Formulation","text":"Energy Balance/State of Charge constraint","category":"page"},{"location":"man/storage_energy_target/","page":"Energy Target Storage Formulation","title":"Energy Target Storage Formulation","text":"beginalign\n\t\t e(h1) - E(h)^0 = I(h1) - p(h1) - s(h1)  forall h in cH labeleqEnergyBalance0 \n\t\t e(ht) -e(ht-1) = I(ht) - p(ht) - s(ht)  forall t in cTsetminus1  forall h in cH labeleqEnergyBalance \nendalign","category":"page"},{"location":"man/storage_energy_target/","page":"Energy Target Storage Formulation","title":"Energy Target Storage Formulation","text":"Energy Target constraint","category":"page"},{"location":"man/storage_energy_target/","page":"Energy Target Storage Formulation","title":"Energy Target Storage Formulation","text":"beginalign\n         e(ht) + e^+_slack(ht) + e^-_slack(ht) = hatE(ht) quad forall h in cH t in hatcT labeleqEnergyTarget \nendalign","category":"page"},{"location":"man/storage_energy_target/","page":"Energy Target Storage Formulation","title":"Energy Target Storage Formulation","text":"Energy slacks constraint","category":"page"},{"location":"man/storage_energy_target/","page":"Energy Target Storage Formulation","title":"Energy Target Storage Formulation","text":"beginalign\n\t\t e^-_slack(ht) leq 00  forall t in cT  forall h in cH labeleqShortageSlackBound \n\t\t e^+_slack(ht) geq 00  forall t in cT  forall h in cH labeleqSurplusSlackBound \nendalign","category":"page"},{"location":"man/storage_energy_target/#Impact-of-different-cost-configurations","page":"Energy Target Storage Formulation","title":"Impact of different cost configurations","text":"","category":"section"},{"location":"man/storage_energy_target/","page":"Energy Target Storage Formulation","title":"Energy Target Storage Formulation","text":"In the table we describe all possible configuration of the StorageManagementCost with the target constraint in hydro or storage device models. Cases 1(a) & 2(a) will have no impact of the models operations and the target constraint will be rendered useless. In most cases that have no energy target and a non-zero value for C^value, if this cost is too high (C^value  0) or too low (C^value 0) can will result in either the model holding on to stored energy till the end or the model not storing any energy in the device. This is caused by the fact when energy target is zero, we have e(t) = - e^-_shortage(t), and  - e^-_shortage * C^value in the objective function is replaced by e(t) * C^value, thus resulting in C^value to be seen as the cost of stored energy.","category":"page"},{"location":"man/storage_energy_target/","page":"Energy Target Storage Formulation","title":"Energy Target Storage Formulation","text":"begintable\n caption\nbegintabular p15cmp15cmp2cmp2cmp5cm \n hline\n multicolumn5cScenario List \n hline\nCase  Energy Target  Energy Shortage Cost  Energy Value  Energy Surplus cost Effect \n hline\n Case 1(a)  hatE=0     C^penalty=0    C^value=0 no change-15ex\n hline-15ex\n Case 1(b)  hatE=0     C^penalty=0    C^value0 penalty for storing energy\n Case 1(c)  hatE=0     C^penalty0    C^value=0 no penalties or incentives applied\n Case 1(d)  hatE=0     C^penalty=0    C^value0 incentive for storing energy \n Case 1(e)  hatE=0     C^penalty0    C^value0 penalty for storing energy \n Case 1(f)  hatE=0     C^penalty0    C^value0 incentive for storing energy \n hline\n Case 2(a)  hatE0     C^penalty=0    C^value=0 no change-15ex\n hline-15ex\n Case 2(b)  hatE0     C^penalty=0    C^value0 penalty on energy storage in excess of target  \n Case 2(c)  hatE0     C^penalty0    C^value=0 penalty on energy storage short of target\n Case 2(d)  hatE0     C^penalty=0    C^value0 incentive on excess energy \n Case 2(e)  hatE0     C^penalty0    C^value0 penalty on both  excessshortage of energy\n Case 2(f)  hatE0     C^penalty0    C^value0 penalty for shortage incentive for excess energy \n hline\nendtabular\ncaptionlabeltabtable-name Table above describes the different effects that can be induced into the model using the target constraint formulation\nendtable","category":"page"},{"location":"man/multistart_formulation/#Power-Grid-Lib-Unit-Commitment-/-Multi-Start-Unit-Commitment","page":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","title":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","text":"","category":"section"},{"location":"man/multistart_formulation/","page":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","title":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","text":"This formulation is from the benchmark library maintained by the IEEE PES Task Force on Benchmarks for Validation of Emerging Power System Algorithms and is designed to evaluate a well established version of the the Unit Commitment problem.","category":"page"},{"location":"man/multistart_formulation/#Formulation-Overview","page":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","title":"Formulation Overview","text":"","category":"section"},{"location":"man/multistart_formulation/","page":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","title":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","text":"The features of this model are:","category":"page"},{"location":"man/multistart_formulation/","page":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","title":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","text":"A global load requirement with time series\nAn optional global spinning reserve requirement with time series\nThermal generators with technical parameters, including\nMinimum and maximum power output\nHourly ramp-up and ramp-down rates\nStart-up and shut-down ramp rates\nMinimum run-times and off-times\nUp to 3 types of startup types (hot, warm, cold)\nOff time dependent start-up costs\nStartup & Shutdown lag/power trajectory constraint\nPiecewise linear convex production costs\nMust run constraints\nNo-load costs\nOptional renewable generators with time series for minimum and maximum production.","category":"page"},{"location":"man/multistart_formulation/#Formulations","page":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","title":"Formulations","text":"","category":"section"},{"location":"man/multistart_formulation/","page":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","title":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","text":"A detailed description of this mathematical model is available here. This model does have some aaugmentation to constraints but is mathematically equivalent to the formulation found here.","category":"page"},{"location":"man/multistart_formulation/#Indices-and-Sets","page":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","title":"Indices and Sets","text":"","category":"section"},{"location":"man/multistart_formulation/","page":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","title":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","text":"beginitemize\n\titemg in cG Set of thermal generators\n\titemg in cG_textiton^0 Set of thermal generators which are initially committed (on)\n\titemg in cG_textitoff^0 Set of thermal generators which are not initially committed (off)\n\titemt in cT Hourly time steps 1 ldots T T = tt time_periods\n\titeml in cL_g Piecewise production cost intervals for thermal generator g 1 ldots L_g\n\titems in cS_g Startup categories for thermal generator g from hottest (1) to coldest (S_g) 1 ldots S_g\nenditemize","category":"page"},{"location":"man/multistart_formulation/#Thermal-Generator-Parameters","page":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","title":"Thermal Generator Parameters","text":"","category":"section"},{"location":"man/multistart_formulation/","page":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","title":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","text":"beginitemize\n\titemCS_g^s  Startup cost in category s for generator g () tt startupcost\n\titemCP_g^l  Cost of operating at piecewise generation point l for generator g (MW) tt piecewise_productioncost\n\titemDT_g    Minimum down time for generator g (h) tt time_down_minimum\n\titemDT^0_g Number of time periods the unit has been off prior to the first time period for generator g tt time_down_t0\n\titemoP_g   Maximum power output for generator g (MW) tt power_output_maximum\n\titemuP_g   Minimum power output for generator g (MW) tt power_output_minimum\n\titemP_g^0   Power output for generator g (MW) in the time period prior to t=1 tt power_output_t0\n\titemP_g^l   Power level for piecewise generation point l for generator g (MW) P^1_g = uP_g and P^L_g_g = oP_g tt piecewise_productionmw\n\titemRD_g    Ramp-down rate for generator g (MWh) tt ramp_down_limit\n\titemRU_g    Ramp-up rate for generator g (MWh) tt ramp_up_limit\n\titemSD_g    Shutdown capability for generator g (MW) tt ramp_shutdown_limit\n\titemSU_g    Startup capability for generator g (MW) tt ramp_startup_limit\n\titemTS^s_g Time offline after which the startup category s becomes active (h) tt startuplag\n\titemUT_g    Minimum up time for generator g (h) tt time_up_minimum\n\titemUT^0_g Number of time periods the unit has been on prior to the first time period for generator g tt time_up_t0\n\titemU_g^0  Initial onoff status for generator g U_g^0=1 for g in cG_textiton^0 U_g^0=0 for g in cG_textitoff^0  tt unit_on_t0\n\titemU_g \tMust-run status for generator g tt must_run\nenditemize","category":"page"},{"location":"man/multistart_formulation/#Variables","page":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","title":"Variables","text":"","category":"section"},{"location":"man/multistart_formulation/","page":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","title":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","text":"beginitemize\n\titemc_g(t)    Cost of power produced above minimum for thermal generator g at time t (MW) in bbR\n\titemp_g(t)    Power above minimum for thermal generator g at time t (MW) geq 0\n\titemp_w(t)  Renewable generation used from renewable generator w at time t (MW) geq 0\n\titemu_g(t)    Commitment status of thermal generator g at time t in 01\n\titemv_g(t)    Startup status of thermal generator g at time t in 01\n\titemw_g(t)    Shutdown status of thermal generator g at time t in 01 \n\titemdelta^s_g(t) Startup in category s for thermal generator g at time t in 01\n\titemlambda_g^l(t)  Fraction of power from piecewise generation point l for generator g at time t (MW) in 01\n\nenditemize","category":"page"},{"location":"man/multistart_formulation/#Model-Description","page":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","title":"Model Description","text":"","category":"section"},{"location":"man/multistart_formulation/","page":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","title":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","text":"Below we describe the unit commitment model given by~\\cite{morales2013tight}, with the piecewise production cost description from~\\cite{sridhar2013locally}. The unit commitment problem can then be formulated as:\nObjective Function","category":"page"},{"location":"man/multistart_formulation/","page":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","title":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","text":"allowdisplaybreaks\nbeginalign\n     textmin  sum_g in cG sum_t in cT left( c_g(t) + CP_g^1  u_g(t) + sum_s = 1^S_g left( CS^s_g delta^s(t) right) right) labeleqobj tagUC \nendalign\n","category":"page"},{"location":"man/multistart_formulation/","page":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","title":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","text":"subject to:\n Active power constraints with Startup/Shutdown lag","category":"page"},{"location":"man/multistart_formulation/","page":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","title":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","text":"beginalign\n\t\t U_g^0(P_g^0-uP_g) leq (oP_g - uP_g) U_g^0 - max(oP_g - SD_g)0 w_g(1)  forall g in cG labeleqMaxOutput2Init\n\t\t p_g(t) + r_g(t) leq (oP_g - uP_g) u_g(t) - max(oP_g - SU_g)0 v_g(t)  forall t in cT  forall g in cG labeleqMaxOutput1 \n\t\t p_g(t) + r_g(t) leq (oP_g - uP_g) u_g(t) - max(oP_g - SD_g)0 w_g(t+1)  forall t in cTsetminus T  forall g in cG labeleqMaxOutput2\nendalign","category":"page"},{"location":"man/multistart_formulation/","page":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","title":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","text":"Ramp constraints","category":"page"},{"location":"man/multistart_formulation/","page":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","title":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","text":"beginalign\n\t\t p_g(1) + r_g(1) - U_g^0(P_g^0-uP_g) leq RU_g  forall g in cG labeleqRampUpInit \n\t\t U_g^0(P_g^0-uP_g) - p_g(1) leq RD_g  forall g in cG labeleqRampDownInit \n\t\t p_g(t) + r_g(t) - p_g(t-1) leq RU_g  forall t in cTsetminus1  forall g in cG labeleqRampUp \n\t\t p_g(t-1) - p_g(t) leq RD_g  forall t in cTsetminus1  forall g in cG labeleqRampDown\nendalign","category":"page"},{"location":"man/multistart_formulation/","page":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","title":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","text":"Unit Commitment constraint","category":"page"},{"location":"man/multistart_formulation/","page":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","title":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","text":"beginalign\n\t\t u_g(1) - U_g^0 = v_g(1) - w_g(1)  forall g in cG labeleqLogicalInitial \n\t\t u_g(t) - u_g(t-1) = v_g(t) - w_g(t)  forall t in cTsetminus1  forall g in cG labeleqLogical \nendalign","category":"page"},{"location":"man/multistart_formulation/","page":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","title":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","text":"Minimum Uptime constraints","category":"page"},{"location":"man/multistart_formulation/","page":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","title":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","text":"beginalign\n\t\t UT_g w_g(t) - sum_i=t-UT_g + 1^t u_g(i) - UT_g^0 leq 0  forall t in 1 ldots minUT_gT  forall g in cG labeleqStartupInit \n\t\t sum_i= t-minUT_gT + 1^t v_g(i) leq u_g(t)  forall t in minUT_gT ldots T  forall g in cG labeleqStartup\nendalign","category":"page"},{"location":"man/multistart_formulation/","page":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","title":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","text":"Minimum Downtime constraints","category":"page"},{"location":"man/multistart_formulation/","page":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","title":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","text":"beginalign\n\t\t DT_g v_g(t) - sum_i=t-DT_g + 1^t u_g(i) - DT_g^0 leq 0  forall t in 1 ldots minDT_gT  forall g in cG labeleqShutdownInit \n\t\t sum_i= t-minDT_gT + 1^t w_g(i) leq 1 - u_g(t)  forall t in minDT_g T ldots T  forall g in cG labeleqShutdown\nendalign","category":"page"},{"location":"man/multistart_formulation/","page":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","title":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","text":"Must run constriant","category":"page"},{"location":"man/multistart_formulation/","page":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","title":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","text":"beginalign\n\t\t u_g(t) geq U_g  hspace1cm forall t in cT  forall g in cG labeleqMustRun\nendalign","category":"page"},{"location":"man/multistart_formulation/","page":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","title":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","text":"Start-up time_limits constraints","category":"page"},{"location":"man/multistart_formulation/","page":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","title":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","text":"beginalign\n\t\t delta^s_g(t) leq sum_i = TS^s_g^TS^s+1_g-1 w_g(t-i)  forall t in TS^s+1_gldotsTforall s in cS_gsetminusS_g  forall g in cG labeleqSTISelect\nendalign","category":"page"},{"location":"man/multistart_formulation/","page":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","title":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","text":"Start-up type selection constriant","category":"page"},{"location":"man/multistart_formulation/","page":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","title":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","text":"beginalign\n\t\t v_g(t) = sum_s = 1^S_g delta^s_g(t)  forall t in cT forall g in cG labeleqSTILink\nendalign","category":"page"},{"location":"man/multistart_formulation/","page":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","title":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","text":"Start-up initial condition constraints","category":"page"},{"location":"man/multistart_formulation/","page":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","title":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","text":"beginalign\n\t\t (TS^s+1_g - 1)delta^s_g(t) + (1 - delta^s_g(t)) M geq sum_i = 1^t u_g(i) + DT_g^0  forall t in 1ldotsTS^s+1_g -1 forall g in cG labeleqSTInitUB\n\t\t TS^s_g delta^s_g(t)  leq sum_i = 1^t u_g(i) + DT_g^0  forall t in 1ldotsTS^s+1_g-1 forall g in cG labeleqSTInitLB\nendalign","category":"page"},{"location":"man/multistart_formulation/","page":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","title":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","text":"Piecewise Cost Constraint","category":"page"},{"location":"man/multistart_formulation/","page":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","title":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","text":"beginalign\n\t\t p_g(t) = sum_l in cL_g (P_g^l - P_g^1) lambda_g^l(t) hspace5cm forall t in cT  forall g in cG labeleqPiecewiseParts \n\t\t c_g(t) = sum_l in cL_g (CP_g^l - CP_g^1) lambda_g^l(t)  forall t in cT  forall g in cG labeleqPiecewisePartsCost \n\t\t u_g(t) = sum_l in cL_g lambda_g^l(t)  forall t in cT forall g in cG labeleqPiecewiseLimits\nendalign","category":"page"},{"location":"man/multistart_formulation/","page":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","title":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","text":"Active power limits","category":"page"},{"location":"man/multistart_formulation/","page":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","title":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","text":"beginalign\n\t\t uP_w(t) leq p_w(t) leq oP_w(t) hspace6cm forall t in cT  forall w in cW labeleqWindLimit\nendalign","category":"page"},{"location":"man/multistart_formulation/#References","page":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","title":"References","text":"","category":"section"},{"location":"man/multistart_formulation/","page":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","title":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","text":"[1] Knueven, Bernard, James Ostrowski, and Jean-Paul Watson. \"On mixed integer programming formulations for the unit commitment problem.\" Pre-print available at http://www.optimization-online.org/DB_HTML/2018/11/6930.pdf (2018).","category":"page"},{"location":"man/multistart_formulation/","page":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","title":"Power Grid Lib - Unit Commitment / Multi-Start Unit Commitment","text":"[2] Krall, Eric, Michael Higgins, and Richard P. O’Neill. \"RTO unit commitment test system.\" Federal Energy Regulatory Commission. Available: http://ferc.gov/legal/staff-reports/rto-COMMITMENT-TEST.pdf (2012).","category":"page"},{"location":"glossary/#Glossary","page":"Glossary","title":"Glossary","text":"","category":"section"},{"location":"glossary/#Simulation-Sequence-Components","page":"Glossary","title":"Simulation Sequence Components","text":"","category":"section"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"cache: Cache is used to store quantities resulting from the solutions of a stage.","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"chronology: The vertical inter-stage relationship dictating how variable results impact the next stage's variable parameters.","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"Example: feedforward_chronologies = Dict((\"stage-1\" => \"stage-2\") => Synchronize(periods = 24)) This chronology uses the first 24 solutions in the horizon to synchronize with 24 executions of stage 2.","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"feedforward: The variable that is used as a parameter for a later stage. A feedforward define both the variable to parameter map and the expected behaviour of the map.","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"Example: feedforward = Dict((\"stage-2\", :devices, :Generators) => SemiContinuousFF(binary_source_problem = PSI.ON, affected_variables = [PSI.ACTIVE_POWER]) This semi-continuous feedforward passes binary results from the first stage to parameters of the active power of the second stage.","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"horizons: The integer count of resolution time periods for a full step resolution of the simulation. (Horizon = 12) x (resolution = 1 Hour) = 12 Hours","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"Example: horizons = Dict(\"stage-1\" => 24, \"stage-2\" => 12) The first stage has a horizon of 24, representing 24 1-hour increments. The second stage has a horizon of 12, representing 12 5-min increments","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"initial condition chronology: The structure dictating how initial conditions get updated from previous results in the simulation.","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"Examples: ini_cond_chronology = InterProblemChronology()","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"1\n|\n2                   2 ... (x04)\n|             ┌----/|\n|             |     |\n3 --> 3 ... (x12)   3 --> 3 ... (x12)","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"This represents an inter-stage chronology where the results of each stage feed back into the initial conditions of the stage above it.","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"ini_cond_chronology = IntraProblemChronology()","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"1\n\n2 ----------------> 2 ... (x04)\n\n3 --> 3 ... (x12)   3 --> 3 ... (x12)","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"This represents an intra-stage chronology where the results of each simulation run feed back into the initial conditions of the next simulation for that stage.","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"intervals: The increment of time per stage in each simulation solve, and how results get fed forward into initial conditions between intervals.","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"Example: intervals = Dict(\"UC\" => (Hour(24), Consecutive()), \"ED\" => (Hour(1), Consecutive()))","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"Operations Problem A single-step optimization problem.","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"Simulations Problem: A multi-step and/or multi-stage optimization problem.","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"Simulation Sequence: Simulation Sequence formulates the structure and flow of results through the simulation. It sets up the feedforward and initial condition chronologies, the horizon, intervals, and order.","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"Stage: Each stage represents a formulation of a problem to be solved, such as unit commitment or economic dispatch. Each stage has its own system with a specified time-scale.","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"Example:","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"\"UC\" => OperationsProblem(GenericOpProblem, template, system, optimizer)","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"problem: The optimization problem populated with the specific system to be solved.","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"step resolution: The time period representing the time length of the whole simulation before it repeats.","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"Example: step_resolution = Hour(24)","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"template: The structure of the problem to be solved, without the actual system data that makes it a populated problem.","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"Time Increments: ***Resolution ≤ Interval ≤ Step Resolution***","category":"page"},{"location":"#PowerSimulations.jl","page":"Introduction","title":"PowerSimulations.jl","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"CurrentModule = PowerSimulations","category":"page"},{"location":"#Overview","page":"Introduction","title":"Overview","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"PowerSimulations.jl is a Julia/JuMP package designed to develop and study power system operation models in steady-state. It uses the data model implemented in PowerSystems.jl to construct optimization models.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"The package supports to major analysis tools.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Operational Models: Meant to study and analyze multiperiod operational model formulations that can specified by the combination of device formulations and network models.\nSimulations Models: Developed to run sequences of operational models to study model interactions sucha as cost-production-modeling.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"The documentation is still work in progress.","category":"page"},{"location":"#Installation","page":"Introduction","title":"Installation","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"The latest stable release of PowerModels can be installed using the Julia package manager with","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"] add PowerSimulations","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"For the current development version, \"checkout\" this package with","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"] add PowerSimulations#master","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"An appropiate optimization solver is required for running PowerSimulations models. Refer to JuMP.jl solver's page to select the most appropiate for the application of interest.","category":"page"},{"location":"man/op_problem/#Operational-Model","page":"Operation Model","title":"Operational Model","text":"","category":"section"},{"location":"man/op_problem/","page":"Operation Model","title":"Operation Model","text":"An operational model is defined as the combination of an objective function (\\refeq{gpsimulations}) in terms of state x and control u variables. Equations (\\refeq{dpsimulations}) describe the device model formulations as a function of variables, parameters eta and uncertainty terms omega. Further, equations (\\refeq{n_psimulations}) represents the network modeling and finally the system services.","category":"page"},{"location":"man/op_problem/","page":"Operation Model","title":"Operation Model","text":"In the same fashion as in PowerSystems.jl, the objective is not to list all possible formulations for devices, network, and services in a power system model. Rather, the contribution is to develop a type hierarchy that enables developers to create new formulations and allow analysts a  natural way to describe the functional assumptions used in the model.","category":"page"}]
}
